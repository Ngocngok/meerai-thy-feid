var plans = [{ s: 7001, d: "Plan Max MQTT Micro", a: !0, f: !1 }, { s: 7002, d: "Plan Max MQTT Starter", a: !0, f: !1 }, { s: 7003, d: "Plan Max MQTT Basic", a: !0, f: !1 }, { s: 7004, d: "Plan Max MQTT Standard", a: !0, f: !1 }, { s: 7005, d: "Plan Max MQTT Professional", a: !0, f: !1 }, { s: 7006, d: "Plan Max MQTT Premium", a: !0, f: !1 }, { s: 7051, d: "Plan MQTT Micro", a: !1, f: !1 }, { s: 7052, d: "Plan MQTT Starter", a: !1, f: !1 }, { s: 7053, d: "Plan MQTT Basic", a: !1, f: !1 }, { s: 7054, d: "Plan MQTT Standard", a: !1, f: !1 }, { s: 7055, d: "Plan MQTT Professional", a: !1, f: !1 }, {
    s: 7056, d: "Plan MQTT Premium",
    a: !1, f: !1
}, { s: 7101, d: "Plan Max MQTT Big1", a: !0, f: !1 }, { s: 7102, d: "Plan Max MQTT Big2", a: !0, f: !1 }, { s: 7103, d: "Plan Max MQTT Big3", a: !0, f: !1 }, { s: 7010, d: "Plan Max MQTT Free", a: !0, f: !0 }]; function _if(a, b, c) { return a && b in a && myqtt.parseBoolean(a[b]) ? " " + c + " " : "" } function _ifn(a, b, c) { return !a || !(b in a && myqtt.parseBoolean(a[b])) ? " " + c + " " : "" }
function _g(a, b, c, d) { if ("object" == typeof b) { var e = [], f; for (f in b) f in b && (f = b[f], e.push(_g(a, f, c, d))); return " " + e.join(" ") } return b in a ? (a = a[b], "icon-size" == b && "medium" == a && (a = ""), c && (a = c + a), d && (a += d), " " + a + " ") : "" } function _b(a, b, c, d) { if ("object" == typeof b) { var e = [], f; for (f in b) f = b[f], e.push(_g(a, f, c, d)); return " " + e.join(" ") } return b in a && a[b] ? (a = b, c && (a = c + a), d && (a += d), " " + a + " ") : "" }
$(document).ready(function () {
    var a = window.location.href, b = $("[name=appcontent]"); 0 <= a.indexOf("/panel/show") ? (myqtt.panelShow = !0, myqtt.runPanel(b)) : (hljs.initHighlightingOnLoad(), $(".sidebar").sidebar({ dimPage: !1, closable: !1 }), $(".sidebar").sidebar("setting", "transition", "overlay"), $("[name=myqtt_top_button]").css("cursor", "pointer"), $("[name=myqtt_top_button],[name=topbar_menu_logo]").click(function () { myqtt.togglePusher() }), $(".pusher").click(function () { $(".sidebar").hasClass("visible") && myqtt.togglePusher() }),
        myqtt.resizePusher(), $("[name=logout]").click(myqtt.logout), $(window).resize(function () { myqtt.onResize() }), $("[name=loggedas]").popup({ inline: !0, hoverable: !0, delay: { show: 100, hide: 100 }, onShow: function (a) { $("[name=profilepopup]").css({ display: "inline" }) } }), myqtt.getUserInfo(function () {
            myqtt.configureToolbar(); 0 <= a.indexOf("/messages") ? myqtt.showMessages(b) : 0 <= a.indexOf("/selector") ? myqtt.showSelector(b) : 0 <= a.indexOf("/panels") ? myqtt.showPanels(b) : 0 <= a.indexOf("/upgrade") ? myqtt.showUpgrade(b) : 0 <= a.indexOf("/change-or-downgrade") ?
                myqtt.showDowngrade(b) : 0 <= a.indexOf("/cancel-request") ? myqtt.cancelRequest(b) : 0 <= a.indexOf("/panel/add") ? myqtt.showPanelAddForm(b, !0) : 0 <= a.indexOf("/panel/update") ? myqtt.showPanelAddForm(b, !1) : 0 <= a.indexOf("/stashes") ? myqtt.showStashes(b) : 0 <= a.indexOf("/stash/add") ? myqtt.showStashAddForm(b) : 0 <= a.indexOf("/stash/view") ? myqtt.getStashAndRedirect(b) : 0 <= a.indexOf("/stashed/") ? myqtt.showStashed(b) : 0 <= a.indexOf("/publish/prepare") ? myqtt.showPublishForm(b) : 0 <= a.indexOf("/domain/subscriptions") ? myqtt.showDomainSubscriptions(b) :
                    0 <= a.indexOf("/domain/subscribe/add") ? myqtt.showDomainSubscribeAddForm(b) : 0 <= a.indexOf("/subscriptions") ? myqtt.showSubscriptions(b) : 0 <= a.indexOf("/connected/devices") ? myqtt.showConnectedDevices(b) : 0 <= a.indexOf("/subscribe/add") ? myqtt.showSubscribeAddForm(b) : 0 <= a.indexOf("/domains") ? myqtt.showDomains(b) : 0 <= a.indexOf("/domain/add") ? myqtt.showAddDomainForm(b) : 0 <= a.indexOf("/domain/view") ? myqtt.getDomainAndRedirect(b) : 0 <= a.indexOf("/domain/quota") ? myqtt.getDomainAndRedirect(b, function (a) {
                        a[0].tabactive =
                        "stats_and_quota"; a = "/domain/add/" + myqtt.formatParameters(a[0]); window.location.replace(a)
                    }) : 0 <= a.indexOf("/domain/new") ? myqtt.showNewDomainForm(b) : 0 <= a.indexOf("/devices") ? myqtt.showDevices(b) : 0 <= a.indexOf("/bootstrap/auths") ? myqtt.showBootstrapAuths(b) : 0 <= a.indexOf("/bootstrap/auth/add") ? myqtt.showAddBootstrapAuthForm(b) : 0 <= a.indexOf("/device/add") ? myqtt.showAddDeviceForm(b) : 0 <= a.indexOf("/device/view") ? myqtt.getDeviceAndRedirect(b) : 0 <= a.indexOf("/change/password") ? myqtt.changePasswordForm(b) : 0 <=
                        a.indexOf("/show-admin-devices") ? myqtt.showAdminDevices(b) : 0 <= a.indexOf("/show-domain-admin-devices") ? myqtt.showDomainAdminDevices(b) : 0 <= a.indexOf("/ip/allowed/add") ? myqtt.showIpsAllowedForm(b) : 0 <= a.indexOf("/ip/allowed") ? myqtt.showIpsAllowed(b) : 0 <= a.indexOf("/plans") ? myqtt.showPlans(b) : 0 <= a.indexOf("/plan/add") ? myqtt.showAddPlanForm(b) : 0 <= a.indexOf("/device/enabletrace") ? myqtt.showEnableTrace(b) : 0 <= a.indexOf("/device/disabletrace") ? myqtt.showDisableTrace(b) : 0 <= a.indexOf("/device/skipconnreplaceon") ?
                            myqtt.showSkipReplaceConnOn(b) : 0 <= a.indexOf("/device/skipconnreplaceoff") ? myqtt.showSkipReplaceConnOff(b) : 0 <= a.indexOf("/filters") ? myqtt.showFilters(b) : 0 <= a.indexOf("/filter/add") ? myqtt.showAddFilterForm(b) : 0 <= a.indexOf("/inspect/unconfirmed-messages") ? myqtt.showGlobalUnconfirmedMessages(b) : 0 <= a.indexOf("/will/inspector") ? myqtt.showWillInspector(b) : myqtt.isRootPage() && myqtt.showHome(b)
        }))
});
function _prepare_log_msg(a) { var b = { "PUBLISH-FILTERED": "red", "filterStatus=Reject": "red", DISCARDED: "yellow", "NOT-STORED": "red" }; a = a.split(" "); var c = [], d; for (d in a) { var e = a[d], f; for (f in b) if (e == f) { e = myqtt.label({ label: e, color: b[f] }); break } c.push(e) } return c.join(" ") } function _ip(a) { return !a ? "-" : "<span class='ip' ip='" + a + "' resolved='no'>" + a + "</span>" }
function _device(a, b, c) { c || (c = ""); if (!b || !a) return "-"; var d = b; 36 < b.length && (d = b.substr(0, 16) + "..." + b.substr(b.length - 16)); return "<a class='ui horizontal orange label " + c + "' href='/device/view/" + a + "/" + b + "'>" + d + "</a>" }
myqtt.getDeviceAndRedirect = function (a) {
    function b(b) { myqtt.showErrorInPanel("Failed to load device (" + d + ") from domain (" + c + ")", "Error 0x80009012: received error response: " + b.statusText + ".<br>" + b.responseText, a) } a.html("<div class='ui text loader centered active top150'>Loading device</div>"); var c = myqtt.getUrlPathItem(2); if (c) {
        var d = myqtt.getUrlPathItem(3); if (d) {
            var d = decodeURIComponent(d), e = {}; e.domainName = c; e.clientId = d; myqtt.post({
                url: "/device/view", data: e, success: function (f) {
                    0 <= e.clientId.indexOf("_virt_") ?
                    (f = "/device/view/" + c + "/" + d.split("_virt_")[0], window.location.replace(f)) : 0 == f.length ? myqtt.post({
                        url: "/device/connect-info/get", data: e, success: function (e) {
                            0 == e.length ? myqtt.showErrorInPanel("Failed to load device (" + d + ") from domain (" + c + ")", "Device or domain does not exists or you are not authorized to view/handle it (0x80009011)", a) : 0 < e.length && e[0].bootStrapped ? myqtt.showInfoInPanel("Bootstrapped device found", "You cannot view settings for this device because it was bootstrapped from bootstrap auth credentials and that configuration has no register flag enabled",
                                a) : b({ statusText: "Reached unsupported case (0x80009013)", responseText: "Device not found but found in connection info." })
                        }, error: function (a) { b(a) }
                    }) : (f = "/device/add/" + c + myqtt.formatParameters(f[0]), window.location.replace(f))
                }, error: function (c) { b(c); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading device</button></a>") }
            })
        } else myqtt.showErrorInPanel("Failed to load device", "Received domainName (" + c + ") but no clientId value was received (0x90008003)", a)
    } else myqtt.showErrorInPanel("Failed to load device",
        "No domain value was received (0x90008002)", a)
}; function _domain(a, b) { b || (b = ""); return "<a class='ui horizontal teal label " + b + "' href='/domain/view/" + a + "'>" + a + "</a>" } function _topic(a, b, c) { c || (c = ""); var d = {}; d.topic = a; return b ? "<a class='ui horizontal brown label " + c + "' href='/publish/prepare/" + b + myqtt.formatParameters(d) + "'>" + a + "</a>" : "<a class='ui horizontal brown label " + c + "' href='/publish/prepare/" + myqtt.formatParameters(d) + "'>" + a + "</a>" }
myqtt.getDomainAndRedirect = function (a, b) {
    a.html("<div class='ui text loader centered active top150'>Loading domain</div>"); var c = myqtt.getUrlPathItem(2); if (c) {
        var d = {}; d.domain = c; myqtt.post({
            url: "/domain/view", data: d, success: function (c) {
                if (0 == c.length) myqtt.showErrorInPanel("Failed to load domain", "Domain does not exists or you are not authorized to view/handle it", a); else if (b) b(c); else {
                    var d = myqtt.extractParams(); d && d.tabactive && (c[0].tabactive = d.tabactive); c = "/domain/add/" + myqtt.formatParameters(c[0]);
                    window.location.replace(c)
                }
            }, error: function (b) { myqtt.showErrorInPanel("Failed to load domain", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading domain</button></a>") }
        })
    } else myqtt.showErrorInPanel("Failed to load domain", "No domain value was received (0x90008001)", a)
};
myqtt.showSelector = function (a) { var b = myqtt.extractParams(); myqtt.selector(a, a, b.listService, b.itemType, b.nodeAttr, b.redirectUrl, b.infoOp) };
myqtt.showHome = function (a) {
    !myqtt.userInfo.isAdmin && !myqtt.userInfo.hasDomainAdmin ? window.location = "/messages" : myqtt.userInfo.hasDomainAdmin ? window.location = "/devices" : (a.html("<h2 class='ui header'>MyQtt Web interface home</h2>"), a.append("<div class='ui three column doubling stackable grid '>\t      <div name='serverstatsbox' class='column'>\t        <div class='ui vertical segment'>\t            <table><tr><td><i class='big server icon'></i></i></td><td><h3 class='ui header'>\t              <div class='content'>\t                Server stats\t                <div class='sub header'>MyQtt Server stats</div>\t              </div>\t            </h3></td></tr></table>                   <div name='serverstats' class='ui segment'>                   </div> \t        </div>\t      </div>\t      <div class='column'>\t        <div class='ui vertical segment'>\t     \t            <table><tr><td>\t            <i class='icons large'>                       <i class='icon server'></i>                       <i class='corner hand pointer outline icon'></i>                    </i></td><td><h3 class='ui header'> \t            <div class='content'>\t               Link to common actions\t            </div>\t            <div class='sub header'>Common actions</div>\t          </h3></td></tr></table>\t          <div name='actions' class='ui segment'>\t\t    <span name='cassandra-cql-debug-status'>Loading Cassandra CQL debug status...</span><br><br>\t\t    Server authentication cach\u00e9: <button class='ui button mini primary' name='clear-auth-cache'>Clear auth cache</button><br><br>\t\t    <span name='inspect-unconfirmed-messages'>Inspect unconfirmed messages: <a class='ui button mini primary' href='/inspect/unconfirmed-messages'>Inspect unconfirmed messages</a></span>\t          </div>\t        </div>\t      </div>\t    <div class='column'>\t        <div class='ui vertical segment'>\t    \t          <table><tr><td> \t            <i class='envelope icon large'></i></td><td><h3 class='ui header'>\t            <div class='content'>\t               Last messages\t            </div>\t            <div class='sub header'>Common actions</div>\t          </h3></td></tr></table>\t          <div name='lastmessages' class='ui segment'>\t          </div>\t        </div>\t    </div>   </div>"), myqtt.getCassanraCQLDebugStatus("[name=cassandra-cql-debug-status]"),
        $("button[name=clear-auth-cache]").click(function () { myqtt.clearAuthCache() }), myqtt.userInfo.isAdmin ? myqtt.getServerStats() : $("[name=serverstatsbox]", a).remove())
}; myqtt.clearAuthCache = function () { myqtt.post({ url: "/config/server/cache/clear", success: function (a) { myqtt.showInfo("Server cache cleared", "Server cache cleared.") }, error: function (a) { myqtt.showError({ title: "Server cache clear request failed", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.getCassanraCQLDebugStatus = function (a) {
    myqtt.post({
        url: "/config/get/cql/debug", success: function (b) {
            var c = "", c = b && b.status ? "CQL debug is enabled: <button class='ui button mini red' name='change-cql-debug-status'>Disable CQL debug (when finished)</button>" : "CQL debug is disabled: <button class='ui button mini brown' name='change-cql-debug-status'>Enable CQL debug (warning performance impact)</button>"; $(a).html(c); $(a + " button").click(function () {
                myqtt.post({
                    url: "/config/manage/cql/debug", data: { status: !b.status },
                    success: function (b) { myqtt.getCassanraCQLDebugStatus(a) }, error: function (a) { $("body").toast({ title: "Failed to change CQL debug status", showIcon: "error", message: "Error was: " + myqtt.stripHtml(String(JSON.stringify(a))), showProgress: "bottom", classProgress: "blue" }) }
                })
            })
        }, error: function (a) { $("body").toast({ title: "Failed to get CQL debug status", showIcon: "error", message: "Error was: " + String(JSON.stringify(a)), showProgress: "bottom", classProgress: "blue" }) }
    })
};
myqtt.getServerStats = function () {
    myqtt.post({
        url: "/stats/server", success: function (a) { var b = $("[name=serverstats]"); b.append("<p>Online connections: " + a.connections + "</p>"); b.append("<p>Devices in domain (" + myqtt.userInfo.domainName + "): " + a.devices + "</p>"); b.append("<p>Domains handled: " + a.domains + "</p>"); b.append("<p>ReactiveMyQtt version: " + a.myqttServerVersion + "</p>"); b.append("<p>HTTP API version: " + a.httpApiVersion + "</p>") }, error: function (a) {
            myqtt.showError({
                title: "Failed to get server stats",
                content: "Received error response: " + a.statusText + ".<br>" + a.responseText
            })
        }
    })
}; myqtt.isRootPage = function () { return 0 == window.location.href.split("://")[1].split("/")[1].length };
myqtt.checkAndShowQuotaHeaderInfo = function () {
    if (myqtt.userInfo.messageStats) {
        var a = myqtt.proposeUpgrade({ msgStats: myqtt.userInfo.messageStats }); a && (a = '<div class="ui doubling container"><div class="ui icon message yellow"><i class="exclamation circle icon"></i><i class="close icon"></i><div class="content"><div class="header">MQTT HUB ' + _domain(myqtt.userInfo.domainName) + " " + a.hint + ' (95%) reached, <a href="/domain/quota/' + myqtt.userInfo.domainName + '">check HUB stats.</a></div><p>' + a.hint2 + "</p></div></div></div>",
            $("[name=header-quota-reached]").removeClass("myhidden"), $("[name=header-quota-reached]").html(a), $("[name=header-quota-reached] .message .close").on("click", function () { $(this).closest(".message").transition("fade"); $("[name=header-quota-reached]").addClass("myhidden") }), $("[name=header-quota-reached] [name=hub-restart]").on("click", function (a) { a.preventDefault(); myqtt.restartMyQttHubContext(myqtt.userInfo.domainName) }))
    }
};
myqtt.getUserInfo = function (a) {
    myqtt.post({
        url: "/user/info", success: function (b) {
            myqtt.userInfo = b; !myqtt.cookieGet("userName") && myqtt.userInfo.userName && myqtt.cookieSet("userName", myqtt.userInfo.userName); b = $("[name=profilepopup]"); myqtt.userInfo.cleanSession ? $("[name=User_profile_cleanSession]", b).html(" <a class='ui green horizontal label mini'>Keep session</a>") : $("[name=User_profile_cleanSession]", b).html(" <a class='ui horizontal label mini'>Clean Session</a>"); $("[name=User_profile_clientId]",
                b).html(_device(myqtt.userInfo.domainName, myqtt.userInfo.clientId)); $("[name=User_profile_userName]", b).text(myqtt.userInfo.userName); $("[name=User_profile_domainName]", b).html(_domain(myqtt.userInfo.domainName)); myqtt.userInfo.isAdmin ? $("[name=User_profile_isadmin]", b).html(" <a class='ui green horizontal label mini'>Adminstrator</a>") : $("[name=User_profile_isadmin]", b).parent().remove(); myqtt.removeAdminOptions(); a && a(); myqtt.checkAndShowQuotaHeaderInfo()
        }, error: function (a) {
            myqtt.removeAdminOptions();
            0 <= a.responseText.indexOf("Token not valid, expired or login session needed") || 0 <= a.responseText.indexOf("Token expired") ? myqtt.requestPassword() : myqtt.showError({ title: "Failed to get user information", content: "Received error response: " + a.statusText + ".<br>" + a.responseText })
        }
    })
};
myqtt.requestPassword = function () {
    if (!myqtt.userInfo || !myqtt.userInfo.clientId) { myqtt.userInfo = {}; myqtt.userInfo.clientId = myqtt.cookieGet("clientId"); myqtt.userInfo.userName = myqtt.cookieGet("userName"); var a = myqtt.cookieGet("cleanSession"); if ("false" == a || "0" == a) a = !1; if ("true" == a || "1" == a) a = !0; myqtt.userInfo.cleanSession = a } $("[name=requestpassword]").modal("settings", "closable", !1).modal("show"); $("[name=requestpassword_password]").keypress(function (a) { 13 == a.which && (a.preventDefault(), myqtt.__requestPasswordDo()) });
    $("[name=loginbuttonpasswordrequest]").click(function (a) { a.preventDefault(); myqtt.__requestPasswordDo() }); $("[name=requestpassword_password]").focus()
};
myqtt.__requestPasswordDo = function () { $("[name=requestpassword]").modal("hide"); var a = $("[name=requestpassword_password]").val(), a = { cleanSession: myqtt.userInfo.cleanSession, clientId: myqtt.userInfo.clientId, userName: myqtt.userInfo.userName, password: a }, b = window.location.href; myqtt.cookieDelete("tokenId"); myqtt.post({ url: "/login", data: a, success: function (a) { a.tokenId && (myqtt.cookieSet("tokenId", a.tokenId), window.location = b) }, error: function (a) { myqtt.requestPassword() } }) };
myqtt.removeAdminOptions = function () { myqtt.userInfo || (myqtt.userInfo = {}); !myqtt.userInfo.hasDomainAdmin && !myqtt.userInfo.isAdmin && ($("[name=admin-domains]").remove(), $("[name=admin-devices]").remove(), $("[name=show-connected-devices]").remove(), $("[name=stashes]").remove(), $("[name=filters]").remove(), $("[name=filters]").remove()); myqtt.userInfo.isAdmin || ($("[name=show-admin-devices]").remove(), $("[name=admin-plans]").remove(), $("[name=show-domain-admin-devices]").remove()) };
myqtt.showPublishForm = function (a) {
    function b() {
        var b = $("textarea[name=payload]", a).val(); $("[data-tab=publish_to_topic_lkjo8usdf_json] i").removeClass("check grey"); $("[data-tab=publish_to_topic_lkjo8usdf_json] i").removeClass("red exclamation triangle"); $("[data-tab=publish_to_topic_lkjo8usdf_json] i").removeClass("check green"); if (b && 0 == b.trim().length) $("[data-tab=publish_to_topic_lkjo8usdf_json] i").addClass("check grey"); else {
            $("[data-tab=publish_to_topic_lkjo8usdf_json] .segment").empty(); try {
                var c =
                    JSON.parse(b); $("[data-tab=publish_to_topic_lkjo8usdf_json] i").addClass("check green"); var d = ["<table class='ui compact table'><thead><tr><th>Attr-Name</th><th>Value</th></tr></thead><tbody>"]; for (key in c) d.push("<tr><td>" + key + "</td><td>" + c[key] + "</td></tr>"); d.push("<tbody></table>"); d = d.join(""); $("[data-tab=publish_to_topic_lkjo8usdf_json] .segment").html("<a class='ui horizontal teal label' href='#'>Correct json detected (parse OK) </a> <br><br>  " + d)
            } catch (e) {
                $("[data-tab=publish_to_topic_lkjo8usdf_json] i").addClass("red exclamation triangle"),
                $("[data-tab=publish_to_topic_lkjo8usdf_json] .segment").html("<a class='ui horizontal red label' href='#'>JSON parse error: </a> <br><br>" + e.message + "<br><span style='background-color: #c9c9c9'>" + b + "</span>")
            }
        }
    } var c = [], d = myqtt.getUrlPathItem(2), e = myqtt.getUrlPathItem(3), f = myqtt.extractParams(); c.push("<div class='ui text container'>"); var g = "<h1 class='ui header'>Publish a message to: " + _domain(myqtt.userInfo.domainName) + "</h1>"; d && e ? g = "<h1 class='ui header'>Publish to device: " + _device(d, e) + "</h1>" :
        d && (g = "<h1 class='ui header'>Publish a message to: " + _domain(d) + "</h1>"); c.push(g); c.push('<form class="ui form">'); g = ""; f && f.topic && (g = " value='" + f.topic + "' "); c.push('<div class="field"><label>Topic</label><input type="text" name="topic" placeholder="Message topic" ' + g + "></div>"); c.push('<div class="field"><div class="fields">'); c.push('<div class="field" name="dropdown-qos-select"><label>Select Qos for publish</label><select class="ui search dropdown" name="qos"><option value="">Select Qos</option><option value="0" selected>Qos0 (Fire and forget)</option><option value="1">Qos1 (at least once)</option><option value="2">Qos2 (one and only one)</option></select></div>');
    c.push('<div class="field"><label>Retention</label><div class="ui toggle checkbox"><input type="checkbox" name="retain"></div></div>'); c.push('<div class="field"><label>Duplication</label><div class="ui toggle checkbox"><input type="checkbox" name="dup"></div></div>'); c.push("</div></div>"); c.push('<div class="field" name="publish_to_topic_kljsdf214">  <div class="ui top tabular menu">    <a class="item active" data-tab="publish_to_topic_lkjo8usdf_text"><i class="mail icon blue"></i>Payload</a>    <a class="item" data-tab="publish_to_topic_lkjo8usdf_json"><i class="grey check icon"></i>Json Check</a>  </div>  <div class="ui tab active" data-tab="publish_to_topic_lkjo8usdf_text" style="height: 200px">    <label>Text</label><textarea style="margin-top: 0px; margin-bottom: 0px; height: 126px;" name="payload">    </textarea>  </div>  <div class="ui tab" data-tab="publish_to_topic_lkjo8usdf_json" style="height: 200px">    <div class="ui segment basic" style="overflow-y: scroll; height: 200px">    </div>  </div></div>');
    myqtt.userInfo.isAdmin && d && c.push('<div class="field"><div class="ui toggle checkbox"><label>Skip topic filter matching (admin option for directed messages)</label><input type="checkbox" name="skipmatching"></div></div>'); f = '<button class="ui right labeled icon button primary" name="publish"><i class="right mail icon"></i>Publish to ' + myqtt.userInfo.domainName + "</button>"; d && e ? f = '<button class="ui right labeled icon button primary" name="publish"><i class="right mail icon"></i>Publish to ' + d + "+" +
        e + "</button>" : d && (f = '<button class="ui right labeled icon button primary" name="publish"><i class="right mail icon"></i>Publish to ' + d + "</button>"); c.push(f); c.push("</form>"); c.push("</div>"); a.html(c.join("\n")); $("textarea[name=payload]", a).keyup(b); $("textarea[name=payload]", a).bind("paste", b); $("[name=publish_to_topic_kljsdf214] .menu .item").tab(); b(); $("select", a).dropdown(); $(".ui.checkbox", a).checkbox(); $("[name=dropdown-qos-select] .dropdown i", a).removeClass("dropdown"); $("[name=dropdown-qos-select] .dropdown i",
            a).addClass("block layout"); $("[name=publish]", a).click(function (b) {
                b.preventDefault(); b = {}; b.topic = $("[name=topic]", a).val(); b.qos = Number($("[name=qos]", a).val()); b.retain = $("input[name=retain]", a).is(":checked"); b.dup = $("input[name=dup]", a).is(":checked"); b.payload = $("textarea[name=payload]", a).val(); var c = "/publish"; b.payload = myqtt.Base64.encode(b.payload); d && (b.domainName = d, b.skipMatching = $("input[name=skipmatching]", a).is(":checked"), c = "/publish-to"); d && e && (b.domainName = d, b.clientId = e, b.skipMatching =
                    $("input[name=skipmatching]", a).is(":checked"), c = "/publish-to"); myqtt.post({ url: c, data: b, success: function (a) { window.location = "/messages" }, error: function (a) { myqtt.showError({ title: "Failed to PUBLISH", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } })
            })
};
myqtt.showMessages = function (a) { a.html("<div class='ui text loader centered active top150'>Loading messages</div>"); myqtt.post({ url: "/pull", success: function (b) { myqtt.showMessagesComplete(a, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load messages", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='/subscriptions'><button class='ui primary button'>Retry loading subscriptions</button></a>") } }) };
myqtt.showMessagesComplete = function (a, b) {
    var c = [], d = "<table class='ui celled padded table'><thead><tr><th colspan='3'>Messages received so far (until last check) by " + _device(myqtt.userInfo.domainName, myqtt.userInfo.clientId) + ": <div class='ui label'><i class='mail icon'></i> " + b.length + " </div> at domain " + _domain(myqtt.userInfo.domainName) + "</th></tr></thead>"; c.push(d); c.push("<a href='/messages'><button class='ui right labeled icon button'><i class='right refresh icon'></i>Refresh</button></a>");
    c.push("<a href='/stashed/" + myqtt.userInfo.domainName + "/PublishedMessages'><button class='ui right labeled icon button'><i class='right warehouse icon'></i>Show last published</button></a>"); c.push("<a href='/publish/prepare'><button class='ui right labeled icon button primary'><i class='right mail icon'></i>Publish message</button></a>"); c.push("<tbody><tr><td class='single line collapsing'><i class='folder icon'></i> Topic filter</td><td class='collapsing'>QOS</td><td >Payload</td></tr>"); for (var e in b) {
        var d =
            b[e], f = ""; d.dup && (f = "<a class='ui red horizontal label small'>dup</a>"); var g = ""; d.retain && (g = "<a class='ui teal horizontal label small'>retained</a>"); var h = myqtt.Base64.decode(d.payload); c.push("<tr><td class='single line'>" + d.topic + " " + f + " " + g + "</td> <td class='right aligned'>" + d.qos + "</td><td>" + h + "</td>")
    } c.push("</tbody></table>"); a.html(c.join("\n"))
};
myqtt.havePanels = function (a, b, c) { myqtt.post({ url: "/plan/get", data: { domainName: b }, success: function (b) { 0 < b.numPanels && c ? c() : myqtt.upgradeYourSubscription({ appContent: a, currentPlan: b, featureName: "Panels, technical support, more message quota and much more.." }) }, error: function (b) { myqtt.showErrorInPanel("Failed to check if panels are supported", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading panels</button></a>") } }) };
myqtt.upgradeYourSubscription = function (a) {
    function b(a) { for (var b in plans) if (plans[b].s == a) return plans[b]; return { s: a, d: "Plan MQTT " + a, a: !1 } } function c(d) {
        if (window.processTags) {
            d = b(d); myqtt.upgradeYourSubscription.lastSelected = d; var e = "", e = d.a ? "anual" : "month"; $("[name=selected-plan]").html(d.d); $("[name=plan-info]").html("subscription is <strong><span class='pasnode' name='priceof' value='" + d.s + "'></span>\u20ac+TAX/" + e + "</strong> (<strong>" + d.d + "</strong>)"); $("[name=proceed-and-upgrade],[name=proceed-to-change]").removeClass("loading");
            processTags({ pasBaseUrl: "https://pas.aspl.es" }); if (a.onSelectedPlan) a.onSelectedPlan(d)
        } else setTimeout(function () { c(d) }, 1E3)
    } $("[name=header-quota-reached]").remove(); var d = a.appContent, e = a.currentPlan, f = a.featureName; myqtt.upgradeYourSubscription.lastSelected = null; var g = document.createElement("script"); g.src = "https://pas.aspl.es/js/external.pas.js"; document.head.appendChild(g); var g = [], h = !0, l; for (l in plans) {
        var m = plans[l]; if (!m.f || a.enableChangeOrDowngrade) {
            var n = "", n = m.a ? "(annual subscription, 1 year service)" :
                "(monthly subscription, 1 month service)"; labelFirstSelected = ""; h && (labelFirstSelected = " selected ", h = !1); g.push("<option " + h + ' value="' + m.s + '">' + m.d + " " + n + "</option>")
        }
    } g = g.join(""); l = ""; e && e.name && (l = "<strong>" + e.name + "</strong>"); f = a.enableChangeOrDowngrade ? " downgrade or change your plan" : a.cancelRequest ? " cancel your plan" : f ? " and get support for <strong>" + f + "</strong>" : ""; e = "Level up your plan!"; f = "<p>Level up your plan " + l + " " + f + "</p>"; h = "big yellow star icon"; m = "<button class='ui primary loading button' name='proceed-and-upgrade'>Proceed and upgrade to <span name='selected-plan'></span></button> <button class='ui button' name='show-all-plan-features'>Show all plan features</button>";
    n = ""; a.enableChangeOrDowngrade ? (e = "Change or downgarde your plan", f = "<p>The following allows you to change your current " + l + " into the selected one. Change will take effect after current plan period expires. Change will not be immediate. Once you proceed, it will generate a change request that will be reviewed and confirmed, if that the case, through <a href='https://pas.aspl.es'>PAS portal</a> (<a href='https://pas.aspl.es'>https://pas.aspl.es</a>).</p>", h = "angle double down blue icon", m = "<button class='ui primary loading button' name='proceed-to-change'>Request change to <span name='selected-plan'></span></button> <button class='ui button' name='show-all-plan-features'>Show all plan features</button>",
        n = "<div class='field'>  <label>Change description</label>   <textarea name='change_description' placeholder='Change description and any other additional information that should be considered for this change request'></textarea>  </div>") : a.cancelRequest && (e = "Cancel my plan", f = "<p>The following allows you to cancel your plan " + l + " and optionally cancel your PAS and support.asplhosting.com account. Change will not be immediate. Once you proceed, it will generate a cancel request that will be reviewed and applied.</p><div class='field'><div class='ui checkbox'><label>Cancel MyQTTHub (MQTT Service) and delete all data associated</label><input type='checkbox' name='delete_hub'></div></div>",
            f += "<div class='field'><div class='ui checkbox'><label>Cancel PAS account (https://pas.aspl.es)</label><input type='checkbox' name='delete_pas'></div></div>", f += "<div class='field'><div class='ui checkbox'><label>Cancel support.asplhosting.com account</label><input type='checkbox' name='delete_support'></div></div>", h = "bomb red icon", m = "<button class='ui primary red button' name='cancel-request'>Cancel request</button>", n = "<div class='field'>  <label>Cancel description</label>   <textarea name='change_description' placeholder='Cancel request can include additional information that should be considered for this request'></textarea>  </div>");
    a.disableButtons && (m = ""); a.headerTitle && (e = a.headerTitle); a.operationInfo && (f = a.operationInfo); g = '<div class="ui form container">  <div class="ui icon message">     <i class="' + h + '"></i>     <div class="content">       <div class="header">' + e + "       </div>" + f + '       <div class="field">          <select class="ui fluid search dropdown" name="plans">' + g + "         </select>" + n + '       </div>       <p name="plan-info-paragraf">Plan selected: <span name="plan-info">Please, select one plan</span> </p>' +
        m + "     </div>  </div></div>"; $(d).append(g); $(".ui.checkbox", d).checkbox(); a.cancelRequest || $("select", d).dropdown("setting", "onChange", function () { var a = $("[name=plans]", d).dropdown("get value"); c(a) }); $("[name=show-all-plan-features]", d).click(function (a) { a.preventDefault(); window.open("https://myqtthub.com/en/#planes") }); $("[name=cancel]", d).click(function (a) { a.preventDefault(); window.history.back() }); $("[name=proceed-and-upgrade]", d).click(function (a) {
            a.preventDefault(); myqtt.upgradeYourSubscription.getPriceSelected({
                onPrice: function (a,
                    b) { window.open("https://pas.aspl.es/?instant-payment=yes&desc=myqtthub_upgrade_user_" + myqtt.userInfo.clientId + "_domain_" + myqtt.userInfo.domainName + "_sku_" + b.s + "_info_" + b.d + "&cost=" + String(a)) }
            })
        }); $("[name=proceed-to-change]", d).click(function (a) {
            a.preventDefault(); a = $("textarea[name=change_description]").val(); var b = myqtt.upgradeYourSubscription.lastSelected; a = { domainName: myqtt.userInfo.domainName, clientId: myqtt.userInfo.clientId, changeDescription: myqtt.Base64.encode(a), sku: String(b.s), plan: b.d };
            myqtt.post({ url: "/request-change", data: a, success: function (a) { myqtt.showInfo("Change request sent", "We are processing your change request. You will receive response through PAS (https://pas.aspl.es) portal.", function () { window.location = "/domain/view/" + myqtt.userInfo.domainName }) }, error: function (a) { myqtt.showError({ title: "Failed to send change request", content: "Received error response: " + a.statusText + ".<br>" + a.responseText, onClose: function () { } }) } })
        }); $("[name=cancel-request]", d).click(function (a) {
            a.preventDefault();
            a = $("textarea[name=change_description]").val(); var b = { domainName: myqtt.userInfo.domainName, clientId: myqtt.userInfo.clientId, reason: myqtt.Base64.encode(a), deleteHub: myqtt.getCheckboxBool("[name=delete_hub]", d, !1), deletePas: myqtt.getCheckboxBool("[name=delete_pas]", d, !1), deleteSupport: myqtt.getCheckboxBool("[name=delete_support]", d, !1) }; b.deleteHub && (b.deleteHub || b.deleteSupport || b.deletePas) && myqtt.confirmAction({
                icon: "bomb", design: "basic", title: "You are about to delete your HUB", content: "If you continue, this will trigger a process that will delete your HUB and associated items selected. Data removed cannot be recovered (that includes accounts, topics, subscriptions, etc). Do you want to continue?",
                onDeny: function () { }, onApprove: function () { myqtt.post({ url: "/cancel-request", data: b, success: function (a) { myqtt.showInfo("Cancel request sent", "We are processing your cancel request.", function () { myqtt.logout() }) }, error: function (a) { myqtt.showError({ title: "Failed to send cancel request", content: "Received error response: " + a.statusText + ".<br>" + a.responseText, onClose: function () { } }) } }) }
            })
        }); a.cancelRequest ? $("select,[name=plan-info-paragraf]", d).remove() : c(plans[0].s)
};
myqtt.upgradeYourSubscription.getPriceSelected = function (a) { var b = myqtt.upgradeYourSubscription.lastSelected; if (null == b) myqtt.showError({ title: "Failed to select a plan", content: "Please, select a plan to upgrade to before continue" }); else { var c = $("[name=priceof][value=" + b.s + "]"); if (0 < c.length) { if (c = c[0].innerHTML.replace(",", "."), c = Number(c), a && a.onPrice) a.onPrice(myqtt.round2Decimals(1.21 * c), b) } else myqtt.showError({ title: "Failed to get price", content: "Unable to continue, failed to get plan price. Please select it by changing and retry" }) } };
myqtt.showPanels = function (a) { var b = myqtt.getUrlPathItem(1); b || (b = myqtt.userInfo.domainName); myqtt.havePanels(a, b, function () { a.html("<div class='ui text loader centered active top150'>Loading panels</div>"); myqtt.post({ url: "/panel/list", data: { domainName: b }, success: function (c) { myqtt.showPanelsComplete(a, c, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load panels", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading panels</button></a>") } }) }) };
myqtt.showUpgrade = function (a) { myqtt.upgradeYourSubscription({ appContent: a, currentPlan: myqtt.userInfo.plan, featureName: "Panels, technical support, more message quota and much more.." }) }; myqtt.showDowngrade = function (a) { myqtt.upgradeYourSubscription({ appContent: a, enableChangeOrDowngrade: !0 }) }; myqtt.cancelRequest = function (a) { myqtt.upgradeYourSubscription({ appContent: a, cancelRequest: !0 }) };
myqtt.showPanelsComplete = function (a, b, c) {
    var d = [], e = ""; c && (e = " for domain " + _domain(c)); d.push("<table class='ui celled sortable padded table'>"); d.push("<a href='/panels/" + c + "'><button class='ui right labeled icon button'><i class='right refresh icon'></i>Refresh</button></a>"); var f = "/panel/add"; c && (f = f + "/" + c); d.push("<a href='" + f + "'><button class='ui right labeled icon button primary'><i class='right th icon'></i>Add a new panel</button></a>"); f = myqtt.selectAnotherDomain("/domain/list", "domain",
        "name", "/panels/", "to manage panels", "Select another domain"); d.push(f); d.push("<thead><tr><th colspan='6' class='no-sort'>Panels " + e + ": <div class='ui label'><i class='th icon'></i> " + b.length + " </div></th></tr><th class='single line collapsing'><i class='th icon'></i> Panel</th><th class='collapsing'>ID</th><th>Description</th><th class='collapsing'>Status</th><th class='single line collapsing'>Last update</th><th class='collapsing no-sort'>Actions</th></tr></thead>"); d.push("<tbody>"); for (var g in b) {
            var e =
                b[g], f = "<button class='ui icon mini button' name='remove_panel_kljst344' iter='" + g + "' label='" + e.name + "' data-tooltip='Remove panel and all its configuration'><i class='remove icon'></i></button>", h = "", h = e.isActive ? "<a class='ui green horizontal label small'>active</a>" : "<a class='ui horizontal label small'>disabled</a>", e = "<tr><td class='clickable' iter='" + g + "'><a class='ui label single line'>" + e.name + "</a></td><td>" + e.panelId + "</td> <td >" + e.description + "</td><td>" + h + "</td><td class='single line'>" +
                    myqtt.stampToDate(e.stamp) + "</td><td>" + f + "</td>"; d.push(e)
        } d.push("</tbody></table>"); a.html(d.join("\n")); $("table").tablesort(); $("[name=remove_panel_kljst344]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); a = Number($(a).attr("iter")); myqtt.removePanel(b[a], c) }); $("table", a).click(function (a) {
            for (a = a.target; a && !$(a).hasClass("clickable");)a = a.parentNode; a && $(a).hasClass("clickable") && (a = Number($(a).attr("iter")), a = b[a], delete a.content, delete a.contentV1, delete a.contentV2, delete a.contentV3,
                location = "/panel/update/" + c + myqtt.formatParameters(a))
        })
}; myqtt.showPanelById = function (a, b) { myqtt.post({ url: "/panel/list", data: { domainName: a }, success: function (c) { for (var d in c) { var e = c[d]; if (e.panelId == b) { delete e.content; delete e.contentV1; delete e.contentV2; delete e.contentV3; location = "/panel/update/" + a + myqtt.formatParameters(e); break } } }, error: function (a) { myqtt.showErrorInPanel("Failed to find panel by id: " + b, "Received error response: " + a.statusText + ".<br>" + a.responseText, appContent) } }) };
myqtt.removePanel = function (a, b) {
    myqtt.confirmAction({
        icon: "th", design: "basic", title: "Remove panel " + a.name + " and all its associated configuration?", content: "If you continue, you will remove permanently panel (" + a.name + ") and all associated configuration. After panel removal, it cannot be recovered in any way. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/panel/remove", data: { domainName: b, panelId: a.panelId }, success: function (a) { window.location = window.location.href },
                error: function (a) { myqtt.showError({ title: "Failed to remove panel", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }
    })
}; myqtt.runPanel = function (a, b) { b || (b = myqtt.getUrlPathItem(2)); b ? (myqtt.panelTag = b, myqtt.runPanelGet(a, b)) : myqtt.showError({ title: "Failed to get panelTag", content: "Unable to get panelTag from URL" }) };
myqtt.runPanelGet = function (a, b) { myqtt.panelGetContent(b, function (a) { a && (a = myqtt.Base64.decode(a)); a || (a = "<doc><header icon='warning sign'>Panel has no content defined</header></doc>"); a = { content: a, mapping: {}, domNode: $("body"), panelTag: b }; myqtt.parseAndSet(a) }) };
myqtt.showPanelAddForm = function (a, b) { var c = myqtt.getUrlPathItem(2); c || (c = myqtt.userInfo.domainName); var d = myqtt.extractParams(), e = -1; d && 0 < d.panelId && (e = d.panelId); b || -1 == e ? myqtt.showPanelAddFormAux(a, c, b, d, e) : myqtt.panelGetContent(d.panelTag, function (f) { myqtt.showPanelAddFormAux(a, c, b, d, e, f) }) };
myqtt.panelGetContent = function (a, b) { var c = {}; c.panelTag = a; myqtt.post({ url: "/panel/get-content", data: c, success: function (a) { b && b(a.content) }, error: function (a) { myqtt.showError({ title: "Failed to get panel content Operation failed", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) }; myqtt.panelSourceEditor = null;
myqtt.getPanelSource = function (a, b) { if (myqtt.panelSourceEditor) { var c = myqtt.panelSourceEditor.getValue(); b(c) } else myqtt.panelGetContent(a, function (a) { a && 0 < a.length && (a = myqtt.Base64.decode(a)); b(a) }) };
myqtt.showPanelAddFormAux = function (a, b, c, d, e, f) {
    var g = null != d && "undefined" != typeof d, h = []; g && (h.push('<button class="ui left labeled icon button" name="show_panels_lksajdf325"><i class="arrow alternate circle left icon"></i>Show panels</button>'), h.push('<button class="ui right labeled icon button primary" name="add_panel_lkjsadflkj"><i class="right edit icon"></i>Update panel</button>'), h.push('<button class="ui right labeled icon button primary" name="run_panel_kljasg23"><i class="right cogs icon"></i>Run panel</button>'),
        h.push('<button class="ui right labeled icon button" name="panel_link_kljasg23"><i class="arrow alternate circle right icon"></i>Panel link</button>'), h.push("<div class='ui hidden divider'></div>")); h.push('<form class="ui form" >'); g ? (h.push("<div class='ui fluid container'>"), h.push('<div class="ui top tabular menu">'), h.push('  <a class="item active" data-tab="general"><i class="building outline icon"></i>Panel settings</a>'), h.push('  <a class="item" data-tab="source"><i class="cogs icon"></i>Source</a>'),
            h.push('  <a class="item" data-tab="preview"><i class="block layout icon"></i>Preview</a>'), h.push('  <a class="item" data-tab="topics-used"><i class="th icon"></i>Topics used</a>'), h.push("</div>"), h.push('<div class="ui tab active" data-tab="general">'), h.push("  <div class='ui grid'>"), h.push("    <div class='eight wide column'>")) : (h.push("<div class='ui text container'>"), h.push("<div class='ui  container'>")); var l = "<h1 class='ui header'>Add Panel</h1>"; g && (l = "<h1 class='ui header'>Panel settings</h1>");
    h.push(l); l = ""; d && d.name && (l = " value='" + d.name + "'"); h.push('<div class="field"><label>Name</label><input type="text" name="name" placeholder="Panel name (must be unique, label-like: accouting, sensor-data, iot-feed)" ' + l + " ></div>"); var m = l = ""; if (c || d && d.isActive) l = "checked", m = "checked=''"; h.push('<div class="field"><div class="ui toggle ' + l + ' checkbox"><label>Active</label><input type="checkbox" name="is_active" ' + m + " ></div></div>"); l = c = ""; d && d.isPublic && (c = "checked", l = "checked=''"); h.push('<div class="field"><div class="ui toggle ' +
        c + ' checkbox"><label>Public (allow this panel to be accessible without password)</label><input type="checkbox" name="is_public" ' + l + " ></div></div>"); c = ""; d && (d.description && 0 < d.description.length) && (c = d.description); h.push('<div class="field">  <label>Panel description</label>   <textarea name="description" placeholder="Short description to help understand this panel">' + c + "</textarea>  </div> "); g || h.push('<button class="ui right labeled icon button primary" name="add_panel_lkjsadflkj"><i class="right plus icon"></i>Add panel</button>');
    h.push("</div>"); g && (h.push("    <div class='eight wide column'>"), h.push("<h1 class='ui header'>Location</h1>"), h.push('<div class="field"><label>Panel Tag</label><div class="ui action input"><input type="text" name="panelTag" ' + (" value='" + d.panelTag + "'") + ' readonly=""><div class="ui button" name="panellink">Panel link</div></div></div>'), h.push("    </div>"), h.push("  </div>"), h.push("</div>"), h.push('<div class="ui tab" data-tab="source">'), h.push('<button class="ui right labeled icon button" name="add_element_kdFkjdf"><i class="blue plus icon"></i>Add element</button>'),
        h.push('<button class="ui right labeled icon button disabled" name="configure_element_lkjgSDf"><i class="right teal cogs icon"></i><span name="conf-item-label">Conf. item</span></button>'), h.push('<button class="ui right labeled icon button" name="pretty_print_kdFkjdf"><i class="purple eye icon"></i>Pretty</button>'), g = "", f && 0 < f.length && (g = f), g && 0 < g.length && (g = myqtt.Base64.decode(g)), h.push('<div class="field">  <label>Panel source code</label>   <textarea name="content" placeholder="Place here panel source code" rows=30>' +
            g + "</textarea>  </div> "), h.push("</div>"), h.push('<div class="ui tab myqtthubpreview" data-tab="preview">'), h.push("</div>"), h.push('<div class="ui tab" data-tab="topics-used">'), h.push("</div>"), h.push("</div>\x3c!-- class='ui grid' --\x3e")); h.push("</form>"); a.html(h.join("\n")); myqtt.combobox(a); $(".ui.checkbox", a).checkbox(); $(".menu .item", a).tab(); $("[name=configure_element_lkjgSDf]").click(function (a) {
                a.preventDefault(); $("body").toast({
                    title: "Loading panel item configuration", showIcon: "info",
                    message: "Please waiting...", showProgress: "bottom", classProgress: "blue", displayTime: 200
                }); setTimeout(function () { myqtt.panelLastConfItem.onNotifyAccepted = function (a, b, c, d) { var e = myqtt.panelSourceEditor.getValue(); b = e.slice(0, a.cursorFirst); a = e.slice(a.cursorLast + 1, e.length); myqtt.panelSourceEditor.setValue(b + c + a); d && myqtt.triggerRunPreviewPanel() }; myqtt.configurePanelItem(myqtt.panelLastConfItem) }, 50)
            }); $("a[data-tab=general],a[data-tab=source],a[data-tab=topics-used]").click(function () { myqtt.cancelDrawStructure($(".myqtthubpreview")) });
    $("[name=pretty_print_kdFkjdf]").click(function (a) { a.preventDefault(); myqtt.prettyPrintSourceCodeEditor() }); $("[name=add_element_kdFkjdf]").click(function (a) { a.preventDefault(); myqtt.panelAddItem() }); $("[name=panellink],[name=panel_link_kljasg23]", a).click(function (a) { a.preventDefault(); window.open("/panel/show/" + d.panelTag, "_blank") }); $("[name=add_panel_lkjsadflkj]", a).click(function (c) { c.preventDefault(); myqtt.savePanel(a, b, e, function (a) { myqtt.showPanelById(b, a) }) }); $("[name=show_panels_lksajdf325]").click(function (a) {
        a.preventDefault();
        window.location = "/panels"
    }); var n = { domainName: b, panelId: e, appContent: a }; d && (n.panelTag = d.panelTag); $("[name=run_panel_kljasg23]").click(function (c) { c.preventDefault(); d && d.content && 0 < d.content.length && myqtt.Base64.encode(myqtt.panelSourceEditor.getValue()) != d.content ? myqtt.savePanel(a, b, e, function (a) { myqtt.triggerRunPreviewPanel() }) : myqtt.triggerRunPreviewPanel() }); $("a[data-tab=preview]").click(function (a) {
        null == myqtt.panelSourceEditor ? ($("a[data-tab=source]").click(), $("body").toast({
            title: "Loading source code tab",
            message: "Please wait..", showProgress: "bottom", classProgress: "blue", progressUp: !0, displayTime: 100
        }), setTimeout(function () { $("a[data-tab=preview]").click() }, 100)) : myqtt.runPreviewPanel(n)
    }); $("a[data-tab=source]").click(function (c) { myqtt.initPanelSourceEditor(b, e, a, n); myqtt.panelSourceEditor.refresh() }); $("a[data-tab=topics-used]").click(function (c) { myqtt.showPanelTopicsUsed(b, e, d.panelTag, a) })
};
myqtt.showPanelTopicsUsed = function (a, b, c, d, e) {
    myqtt.initPanelSourceEditor(a, b, d, e); var f = { content: myqtt.panelSourceEditor.getValue(), domainName: a, panelId: b, panelTag: c }; myqtt.getPanelData(f, function () {
        function b(c) { c.preventDefault(); c = c.target; "I" == c.nodeName && (c = c.parentNode); c = $(c).attr("iter"); c = d[c]; myqtt.showFastPublishDialog({ domainName: a, topic: c.topic, payload: c.payload, qos: c.qos, onPublished: function () { $("a[data-tab=topics-used]").click() } }) } var c = []; c.push("<a name='refresh'><button class='ui right labeled icon button'><i class='right refresh icon'></i>Refresh</button></a>");
        var d = f.data; c.push("<table class='ui celled striped sortable table'>"); var e = "<thead><tr><th colspan='5' class='no-sort'>Topics used by this panel: <div class='ui label'><i class='th icon'></i> " + myqtt.collectionSize(d) + " </div></th></tr><th class='single line collapsing'><i class='th icon'></i> Topic</th><th class='collapsing'>Qos</th><th class='collapsing single line'>Last Update</th><th>Last Payload</th><th class='collapsing no-sort'>Actions</th></thead>"; c.push(e); c.push("<tbody>"); for (var n in d) {
            var e =
                d[n], s = "<button class='ui icon mini button' name='publish_update_kljst344' iter='" + n + "' data-tooltip='Publish an update to this topic'><i class='pen square icon'></i></button>", r = ""; "object" == typeof e.payload ? r = JSON.stringify(e.payload) : e.payload && (r = e.payload); e = "<tr><td><a class='single line'>" + _topic(e.topic) + "</a></td><td class='single line'>" + myqtt.translateQos(e.qos) + "</td><td class='single line'>" + myqtt.stampToDate(e.lastUpdate) + "</td><td class='clickable' iter='" + n + "'>" + r + "</td><td>" + s + "</td></tr>";
            c.push(e)
        } c.push("</tbody></table>"); $("div[data-tab=topics-used]").html(c.join("\n")); $("div[data-tab=topics-used] table").tablesort(); $("div[data-tab=topics-used] a[name=refresh]").click(function (a) { a.preventDefault(); $("a[data-tab=topics-used]").click() }); $("div[data-tab=topics-used] [name=publish_update_kljst344]").click(b); $("td.clickable").dblclick(b)
    })
};
myqtt.showFastPublishDialog = function (a) {
    function b() {
        var a = $("[name=fast_publish_kljsdf214] [name=fast_publish_payload_lkj87ff]").val(); $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] i").removeClass("check grey"); $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] i").removeClass("red exclamation triangle"); $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] i").removeClass("check green"); $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] .segment").empty(); try {
            var b = JSON.parse(a); $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] i").addClass("check green");
            var c = ["<table class='ui compact table'><thead><tr><th>Attr-Name</th><th>Value</th></tr></thead><tbody>"]; for (key in b) c.push("<tr><td>" + key + "</td><td>" + b[key] + "</td></tr>"); c.push("<tbody></table>"); c = c.join(""); $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] .segment").html("<a class='ui horizontal teal label' href='#'>Correct json detected (parse OK) </a> <br><br>  " + c)
        } catch (g) {
            $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] i").addClass("red exclamation triangle"), $("[data-tab=fast_publish_dup_flag_lkjo8usdf_json] .segment").html("<a class='ui horizontal red label' href='#'>JSON parse error: </a> <br><br>" +
                g.message + "<br><span style='background-color: #c9c9c9'>" + a + "</span>")
        }
    } $("[name=fast_publish_kljsdf214]").modal({ onDeny: function (a) { }, onApprove: function (a) { }, onHide: function (a) { } }).modal("show"); $("[name=fast_publish_kljsdf214] .menu .item").tab(); a.topic ? $("[name=fast_publish_kljsdf214] [name=fast_puslish_topic_lkj87ff]").attr("value", a.topic) : $("[name=fast_publish_kljsdf214] [name=fast_puslish_topic_lkj87ff]").empty(); "undefined" != typeof a.qos && $("[name=fast_publish_kljsdf214] [name=fast_puslish_qos_lkj87ff]").val(a.qos).change();
    $("[name=fast_publish_kljsdf214] [name=fast_publish_payload_lkj87ff]").keyup(b); $("[name=fast_publish_kljsdf214] [name=fast_publish_payload_lkj87ff]").bind("paste", b); if (a.payload) { var c = a.payload; "object" == typeof c && (c = JSON.stringify(c)); $("[name=fast_publish_kljsdf214] [name=fast_publish_payload_lkj87ff]").text(c) } else $("[name=fast_publish_kljsdf214] [name=fast_publish_payload_lkj87ff]").empty(); b(); $("[name=fast_publish_kljsdf214] select").dropdown(); $("[name=fast_publish_kljsdf214] .ui.checkbox").checkbox();
    myqtt.click("[name=fast_publish_now_kljdflk]", function (b) {
        b = $("[name=fast_publish_kljsdf214] [name=fast_puslish_topic_lkj87ff]").attr("value"); var c = $("[name=fast_publish_kljsdf214] [name=fast_puslish_qos_lkj87ff]").val(), f = $("[name=fast_publish_kljsdf214] [name=fast_publish_payload_lkj87ff]").val(); myqtt.publishMessage({
            topic: b, qos: c, payload: f, domainName: a.domainName, dup: $("div[data-tab=topics-used] input[name=fast_publish_dup_flag_lkjo8usdf]").is(":checked"), retain: $("div[data-tab=topics-used] input[name=fast_publish_retain_flag_lkjo8usdf]").is(":checked"),
            onPublished: a.onPublished
        })
    })
};
myqtt.initPanelSourceEditor = function (a, b, c, d) {
    if (!myqtt.panelSourceEditor) {
        var e = $("div.pusher").height() - $("div[data-tab=source]").position().top - 200; 0 < e && $("div[data-tab=source]").css("height", e + "px"); myqtt.panelSourceEditor = CodeMirror.fromTextArea($("textarea[name=content]")[0], { lineNumbers: !0, lineWrapping: !0, mode: "xml", theme: "dracula", keyMap: "emacs", lint: !0, viewportMargin: Infinity, matchTags: !0, styleActiveLine: !0, nonEmpty: !0, foldGutter: !0, gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"] });
        myqtt.panelSourceEditor.addKeyMap({ "Ctrl-P": function (a) { a.setOption("fullScreen", !1); myqtt.triggerRunPreviewPanel() }, "Ctrl-Q": function (a) { a.foldCode(a.getCursor()) }, "Ctrl-S": function (d) { myqtt.savePanel(c, a, b) }, F11: function (a) { a.setOption("fullScreen", !a.getOption("fullScreen")) }, Esc: function (a) { a.getOption("fullScreen") && a.setOption("fullScreen", !1) } }, !0); delete CodeMirror.keyMap.emacs["Ctrl-V"]; delete CodeMirror.keyMap.emacs["Ctrl-X"]; delete CodeMirror.keyMap.emacs["Ctrl-C"]; e -= 60; 0 < e && $(".CodeMirror").css("height",
            e + "px"); e = function (a, b) { myqtt.panelSourceCodePrepareItemEdition(c, d) }; myqtt.panelSourceEditor.on("change", e); myqtt.panelSourceEditor.on("cursorActivity", e); myqtt.panelSourceEditor.on("focus", e); myqtt.panelSourceEditor.on("keyup", e); myqtt.panelSourceEditor.on("blur", function () { $(".CodeMirror-cursors").css("visibility", "visible") }); var f = myqtt.panelSourceEditor.getValue(); (!f || 0 == f.length) && myqtt.addTextIntoSourceCodeEditor("<doc>\n  \x3c!-- Place here your declarations. Use [Add element] button to start adding layout and elements --\x3e\n</doc>");
        myqtt.panelSourceEditor.updateLastItemClicked = e
    }
}; myqtt.addTextIntoSourceCodeEditor = function (a) { if (myqtt.panelSourceEditor) { var b = myqtt.panelSourceEditor.getDoc(), c = myqtt.panelSourceEditor.getCursor(); b.replaceRange(a, c) } };
myqtt.panelAddItem = function () {
    var a = {
        doc: '<doc background-color="blue" name="panel name" description="Panel to show very interesting data"></doc>', grid: '<grid fluid="yes"><column></column></grid>', "grid-4x4": '<grid fluid="yes"><column>Text row 1, column 1</column><column>Text row 1, column 2</column><column>Text row 1, column 3</column><column>Text row 1, column 4</column></grid><grid fluid="yes"><column>Text row 2, column 1</column><column>Text row 2, column 2</column><column>Text row 2, column 3</column><column>Text row 2, column 4</column></grid><grid fluid="yes"><column>Text row 3, column 1</column><column>Text row 3, column 2</column><column>Text row 3, column 3</column><column>Text row 3, column 4</column></grid><grid fluid="yes"><column>Text row 4, column 1</column><column>Text row 4, column 2</column><column>Text row 4, column 3</column><column>Text row 4, column 4</column></grid>', "grid-1x2": '<grid fluid="yes"><column>Text row 1, column 1</column><column>Text row 1, column 2</column></grid>',
        "grid-1x3": '<grid fluid="yes"><column>Text row 1, column 1</column><column>Text row 1, column 2</column><column>Text row 1, column 3</column></grid>', "grid-1x4": '<grid fluid="yes"><column>Text row 1, column 1</column><column>Text row 1, column 2</column><column>Text row 1, column 3</column><column>Text row 1, column 4</column></grid>', "grid-1x5": '<grid fluid="yes"><column>Text row 1, column 1</column><column>Text row 1, column 2</column><column>Text row 1, column 3</column><column>Text row 1, column 4</column><column>Text row 1, column 5</column></grid>',
        "grid-1x6": '<grid fluid="yes"><column>Text row 1, column 1</column><column>Text row 1, column 2</column><column>Text row 1, column 3</column><column>Text row 1, column 4</column><column>Text row 1, column 5</column><column>Text row 1, column 6</column></grid>', column: "<column></column>", button: '<button label="Button label" topic="configure/here/your/topic" payload="Configure your message here"></button>', "rotating-state-button": '<button label="Fan speed" color="grey" toast-icon="tachometer alternate" topic="fans/device001/speed" payload=\'{"conf" : "low"}\' margin="24px" transition="fade up"><check-status topic="fans/device001/speed"><if access-attr="conf" is="very low" set-label="Very low" set-payload=\'{"conf" : "low"}\'></if><if access-attr="conf" is="low" set-label="Low" set-payload=\'{"conf" : "medium"}\'></if><if access-attr="conf" is="medium" set-label="Medium" set-payload=\'{"conf" : "high"}\'></if><if access-attr="conf" is="high" set-label="High" set-payload=\'{"conf" : "very high"}\'></if><if access-attr="conf" is="very high" set-label="Very high" set-payload=\'{"conf" : "low"}\'></if></check-status></button>',
        toggle: '<toggle label="Toggle label" on-topic="topic/when/on" on-payload="message when on" off-topic="topic/when/off" off-payload="message when off"></toggle>', "toggle-with-status-check": '<toggle label="Toggle label" on-topic="publish/to/same/topic" on-payload=\'{"status" : "on"}\' off-topic="publish/to/same/topic" off-payload=\'{"status" : "off"}\'><check-status topic="publish/to/same/topic"><if access-attr="status" is="on" set="checked" ></if><if access-attr="status" is="off" set="unchecked" ></if></check-status></toggle>',
        "refresh-button": '<refresh-button transition="fade up"></refresh-button>', message: '<message icon="comment" header="Message header">Text message inside</message>', stat: '<stat label="Stat label" topic="topic/to/what"  suffix=" Suffix to show"></stat>', paragraph: "<p>This is a text example</p>", header: '<header sub-header="Sub menu example" transition="fade up">Header example</header>', "last-update": '<last-update transition="fade up"></last-update>', image: '<image transition="fade up" src="https://myqtthub.com/assets/images/myqtthub-512x512.png" ></image>',
        icon: '<icon icon="box"></icon>'
    }, b = $("[name=panel_item_add_kljsdf246]").modal({ onDeny: function (a) { }, onApprove: function (a) { }, onHide: function (a) { } }).modal({ autofocus: !1 }).modal("show"); $("[name=panel_item_add_kljsdf246] .menu .item").tab(); $("[name=panel_item_add_kljsdf246] .dropdown").dropdown({ onChange: function (c, d) { b.modal("hide"); c in a && (myqtt.addTextIntoSourceCodeEditor(a[c]), myqtt.prettyPrintSourceCodeEditor(), $("[name=panel_item_add_kljsdf246] .dropdown").dropdown("clear")) } })
};
myqtt.prettyPrintSourceCodeEditor = function () { if (myqtt.panelSourceEditor && myqtt.panelSourceEditor.getValue()) { var a = myqtt.panelSourceEditor.getValue(), b = myqtt.prettyPrintXml(a); if (b && b != a) { var c = myqtt.panelSourceEditor.getCursor(), d = myqtt.panelSourceEditor.getScrollInfo(); myqtt.panelSourceEditor.setValue(b); setTimeout(function () { myqtt.panelSourceEditor.scrollTo(d.left, d.top); myqtt.panelSourceEditor.setCursor(c) }, 100) } } }; myqtt.spaces = function (a) { for (var b = "", c = 0; c < a;)b += " ", c++; return b };
myqtt.prettyPrintXml = function (a, b) { var c = "", d = ""; b = b || "\t"; a.split(/>\s*</).forEach(function (a) { a.match(/^\/\w/) && (d = d.substring(b.length)); c += d + "<" + a + ">\r\n"; a.match(/^<?\w[^>]*[^\/]$/) && (d += b) }); return c.substring(1, c.length - 3) };
myqtt.panelSourceCodePrepareItemEdition = function (a, b) {
    var c, d = myqtt.panelSourceEditor.getCursor(), e = 0; c = myqtt.panelSourceEditor.getValue().split("\n"); for (var f in c) { if (f == d.line) break; e += c[f].length + 1 } c = e + d.ch; d = myqtt.panelSourceEditor.getValue(); f = c; for (var g = !1; 0 <= f;) { if (f != c && ">" == d[f]) { g = !1; break } if ("<" == d[f]) { g = !0; break } f -= 1 } for (var e = c, h = !1; e <= d.length;) { if ("<" == d[e]) { h = !1; break } if (">" == d[e]) { h = !0; break } e += 1 } var l = ""; if (h && g && (l = d.slice(f, e + 1), 1 < l.length && "<" == l[0] && ("!" == l[1] || "/" == l[1]))) h =
        g = !1; if (g && h) {
            g = l.split(" ")[0].split(">")[0].split("/")[0].split("<")[1]; myqtt.panelSourceEditor.getCursor(); myqtt.panelLastConfItem = { nodeName: g, cursorPosition: c, cursorFirst: f, cursorLast: e, content: l }; for (k in b) myqtt.panelLastConfItem[k] = b[k]; "/>" != l.slice(l.length - 2, l.length) ? (c = d.indexOf("<", e + 2), d = d.slice(e + 1, c), myqtt.panelLastConfItem.innerHTML = d) : myqtt.panelLastConfItem.innerHTML = ""; $("[name=configure_element_lkjgSDf]", a).removeClass("disabled"); $("[name=configure_element_lkjgSDf] span[name=conf-item-label]",
                a).html("Conf. item &lt;" + g + " /&gt;")
        } else $("[name=configure_element_lkjgSDf]", a).addClass("disabled"), $("[name=configure_element_lkjgSDf] span[name=conf-item-label]", a).html("Conf. item")
}; myqtt.click = function (a, b, c) { "undefined" != typeof c ? a = $(a, b) : (c = b, a = $(a)); 0 < a.length && (a[0].bound && a.off("click", a[0].bound), a.click(c), a[0].bound = c) };
myqtt.structureDeleteAttr = function (a, b) { if (a && b) { delete a[b]; a.attributes && delete a.attributes[b]; var c = [], d; for (d in a.attrList) { var e = a.attrList[d]; e.name != b && c.push(e) } a.attrList = c } }; myqtt.structureSetAttr = function (a, b, c) { if (a && b) { a[b] = c; a.attributes && (a.attributes[b] = c); for (var d in a.attrList) { var e = a.attrList[d]; e.name == b && (e.value = c) } } };
myqtt.configurePanelItem = function (a) {
    function b(a, b, c) { if (myqtt.isDigit(c)) c = parseFloat(c) + "px"; else if (!c || !myqtt.isDigit(c.replace("pt", "").replace("px", "").replace("em", ""))) { if (!c || !(0 <= myqtt.sizes.indexOf(c))) c = "Default / no size configured"; 0 <= myqtt.sizes.indexOf(c.toLowerCase()) && c.toLowerCase(); c = myqtt.capitalize(c) } $(a + " div.text", b).html(c) } function c(a, b, c) {
        if (!c || !(c in myqtt.colors)) c = "Default / no color configured"; var d = ""; c.toLowerCase() in myqtt.colors && (d = c.toLowerCase()); a += " div.text";
        c = "<div class='ui " + d + " horizontal label'>" + myqtt.capitalize(c) + "</div>"; $(a, b).html(c)
    } function d(a, b, c, d) { a = $(a + " div.text div.label", b)[0].innerHTML.toLowerCase(); a in myqtt.colors ? myqtt.structureSetAttr(c, d, a) : myqtt.structureDeleteAttr(c, d) } function e(a, b) { var c = ["color", "background-color"], d = {}, e; for (e in myqtt.knownStylesToCopy) { var f = myqtt.knownStylesToCopy[e]; 0 <= c.indexOf(f) || (f in b && (d[f] = b[f]), f in a._addedStyle && (d[f] = a._addedStyle[f])) } return d } function f(a, b, c) {
        var d = e(a, b); $("[name=selected_styles_settings_0u78sdfg]").empty();
        for (var g in d) { var h = d[g]; $("[name=selected_styles_settings_0u78sdfg]").append('<a class="ui label" key="' + g + '" value="' + h + '">' + g + ": " + h + '<i key="' + g + '" value="' + h + '" class="delete icon"></i></a>') } myqtt.click("[name=selected_styles_settings_0u78sdfg] a", function (a) { a.preventDefault(); var b = $(a.target).attr("key"); a = $(a.target).attr("value"); b = myqtt.capitalCase(b); $("[name=style_name_kljASDfkljsdfklj]", c).html(b); $("[name=style_value_kljsdgfsdfklj]", c).val(a) }); myqtt.click("[name=selected_styles_settings_0u78sdfg] a i.delete",
            function (d) { d.preventDefault(); var e = $(d.target).attr("key"); $(d.target).attr("value"); myqtt.structureDeleteAttr(b, e); delete a._addedStyle[e]; f(a, b, c) })
    } function g(a, b, c) {
        var f = e(a, b), g; for (g in f) myqtt.structureSetAttr(b, g, f[g]); d("[name=item-color]", p, b, "color"); d("[name=bg-item-color]", p, b, "background-color"); a: if (f = $("[name=item-size] div.text", p)[0].innerHTML.toLowerCase(), !f || 0 == f.length) myqtt.structureDeleteAttr(b, "size"); else {
            if (myqtt.isDigit(f)) f += "px"; else if ((!f || !myqtt.isDigit(f.replace("pt",
                "").replace("px", "").replace("em", ""))) && !(0 <= myqtt.sizes.indexOf(f))) break a; myqtt.structureSetAttr(b, "size", f)
        } n(p, b, a, !0); var h, f = []; f.push("<" + b.name); g = "fullHTML parent name innerHTML children parsedAt attrList innerClosed innerStarted parsedEndAt context onContentInstalled".split(" "); for (h in b) if (!(0 <= g.indexOf(h))) if ("attributes" == h) for (var l in b.attributes) l in b || f.push(l + '="' + b.attributes[l] + '"'); else { var m = b[h]; "object" != typeof m && f.push(h + '="' + m + '"') } h = f.join(" ") + ">"; "/>" == myqtt.end(a.content,
            2) && (h = h.slice(0, h.length - 1) + " />"); c || (c = !1); if (a.onNotifyAccepted) a.onNotifyAccepted(a, b, h, c)
    } function h(a, b, c) {
        a = { doc: ["color", "icon", "size", "header", "message"], grid: ["color", "icon", "size", "header", "message"], image: ["color", "icon", "header", "message", "background-color"], message: ["vertical-centered", "background-color"], icon: ["color", "size", "verical-centered", "background-color", "header"] }; $(".canbedisabled").removeClass("disabled"); if (b.name in a) for (var d in a[b.name]) c = a[b.name][d], c += "-section",
            $("[name=" + c + "]").addClass("disabled")
    } function l(a, b, c, d) { (a = myqtt.stripHtml(myqtt.trim($(a + " div.text")[0].innerHTML))) && 0 < a.length && 0 <= a.indexOf("Default / no ") && 0 <= a.indexOf("configured") ? myqtt.structureDeleteAttr(c, d) : c[d] = myqtt.trim(a.toLowerCase()) } function m(a, b, c, d, e) { c && (c = e(c[d])) && $(a + " div.text", b).html(c) } function n(a, b, c, d) {
        "icon" == b.name ? (l("[name=item-icon]", a, b, "icon"), l("[name=icon-rotation]", a, b, "rotation"), l("[name=icon-border]", a, b, "border"), l("[name=icon-color]", a, b, "color"),
            l("[name=icon-size]", a, b, "size"), b.inverted = $("[name=icon-inverted]", a).is(":checked"), b.inverted || delete b.inverted) : (l("[name=item-icon]", a, b, "icon"), l("[name=icon-rotation]", a, b, "icon-rotation"), l("[name=icon-border]", a, b, "icon-border"), l("[name=icon-color]", a, b, "icon-color"), l("[name=icon-size]", a, b, "icon-size"), b["icon-inverted"] = $("[name=icon-inverted]", a).is(":checked"), b["icon-inverted"] || delete b["icon-inverted"]); c = myqtt.addIcon({ structure: b }); $(".iconpreview", a).html(c); return b
    } function s(a,
        d) {
            function e(a, b, c, d) { m(a, b, c, d, function (a) { return "horizontally flipped" == a ? "<i class='icon exchange'></i> Horizontally flipped</div>" : "vertically flipped" == a ? "<i class='icon clockwise rotated exchange'></i> Vertically flipped</div>" : "clockwise rotated" == a ? "<i class='icon clockwise redo'></i> Clockwise rotated</div>" : "counterclockwise rotated" == a ? "<i class='icon counterclockwise undo'></i> Counter clockwise rotated</div>" : "Default / no rotation configured" }) } function f(a, b, c, d) {
                m(a, b, c, d, function (a) {
                    return "circular" ==
                        a ? "<i class='mini circular circle black icon'></i> Circular</div>" : "bordered" == a ? "<i class='mini bordered circle black icon'></i> Squared</div>" : "Default / no border configured"
                })
            } function g(a, b, c, d) { m(a, b, c, d, function (a) { return a ? '<i class="' + a + '"></i> ' + a : "Default / no icon configured" }) } "icon" == d.name ? (g("[name=item-icon]", a, d, "icon"), e("[name=icon-rotation]", a, d, "rotation"), f("[name=icon-border]", a, d, "border"), c("[name=icon-color]", a, d.color), b("[name=icon-size]", a, d.size), myqtt.setToogleValue("[name=icon-inverted]",
                a, d.inverted)) : (g("[name=item-icon]", a, d, "icon"), e("[name=icon-rotation]", a, d, "icon-rotation"), f("[name=icon-border]", a, d, "icon-border"), c("[name=icon-color]", a, d["icon-color"]), b("[name=icon-size]", a, d["icon-size"]), myqtt.setToogleValue("[name=icon-inverted]", a, d["icon-inverted"]))
    } var r = a.content; "/>" != r.slice(r.length - 2, r.length) && (r = r + "</" + a.nodeName + ">"); var q = myqtt.parseAndSet({ content: r, justParse: !0 }); if (!q || 0 == q.length) myqtt.showError({ title: "Failed to configure selected item", content: "Failed to parse selected structure (internal myqtt.parseAndSet failed like a villan)" });
    else {
        a._addedStyle = {}; $("[name=configure_panel_item_kljsdf214] div.header[name=title]").html("<i class='icon blue th'></i> Configure panel item &lt;" + a.nodeName + " /&gt;"); var p = $("[name=configure_panel_item_kljsdf214]").modal({ onDeny: function (a) { }, onApprove: function (a) { }, onHide: function (a) { } }).modal({ autofocus: !1 }).modal("show"); myqtt.combobox(p); $(".menu .item", p).tab(); $(".ui.checkbox", p).checkbox(); myqtt.click("[name=add_style_setting_button_kljsdf]", p, function (b) {
            b.preventDefault(); b = $("[name=style_name_kljASDfkljsdfklj]",
                p)[0].innerHTML; var c = $("[name=style_value_kljsdgfsdfklj]", p).val(); b && c && (b = b.toLowerCase().trim(), c = c.trim()); b && c && (a._addedStyle[b] = c, f(a, q, p))
        }); $("[name=style_name_kljASDfkljsdfklj]", p).val("Style setting"); $("[name=style_value_kljsdgfsdfklj]", p).empty(); f(a, q, p); $("[data-tab=panel_item_style_kljsdf214] .ui.dropdown[name=item-size]").dropdown({ allowAdditions: !0 }); c("[name=item-color]", p, q.color); c("[name=bg-item-color]", p, q["background-color"]); b("[name=item-size]", p, q.size); s(p, q); h(a, q, p);
        myqtt.click("[name=accept_changes_panel_item_lkjsfkjdk]", p, function (b) { b.preventDefault(); g(a, q) }); myqtt.click("[name=accept_changes_and_preview_panel_item_lkjsfkjdk]", p, function (b) { b.preventDefault(); g(a, q, !0) }); myqtt.click("[name=cancel_dialog_panel_item_kjsdfklj]", p, function (a) { a.preventDefault() }); $("[name=icon-color],[name=icon-border],[name=icon-rotation],[name=item-icon],[name=icon-size]", p).dropdown("setting", "onChange", function () { n(p, q, a) }); $("[name=icon-inverted]").change(function () {
            n(p,
                q, a)
        }); myqtt.click("a[data-tab=panel_item_preview_kljsdf214]", function (b) { var c = a.onNotifyAccepted; a.onNotifyAccepted = function (a, b, d, e) { a.onNotifyAccepted = c; e = myqtt.getRawDocFromSourceEditor(); d += a.innerHTML; d = myqtt.completeXmlNode(d, b.name); a = { content: e + d + "</doc>", domNode: $("div[data-tab=panel_item_preview_kljsdf214]"), panelTag: a.panelTag, panelId: a.panelId, domainName: a.domainName, isPreview: !0 }; myqtt.parseAndSet(a) }; g(a, q, !1); b.preventDefault() }); myqtt.click("a[data-tab=panel_item_source_kljsdf214],a[data-tab=panel_item_icon_kljsdf214],a[data-tab=panel_item_style_kljsdf214]",
            function (a) { $("div[data-tab=panel_item_preview_kljsdf214]").empty(); $("div[data-tab=panel_item_preview_kljsdf214]").prop("style", null) }); myqtt.click("a[data-tab=panel_item_source_kljsdf214]", function (b) {
                var c = $("div[data-tab=panel_item_style_kljsdf214]").height(); $("div[data-tab=panel_item_source_kljsdf214]").css("min-height", c + "px"); var d = a.onNotifyAccepted; a.onNotifyAccepted = function (a, b, c, e) { a.onNotifyAccepted = d; a = c + a.innerHTML; a = myqtt.completeXmlNode(a, b.name); a = a.replace(/</g, "&lt;"); $("div[data-tab=panel_item_source_kljsdf214]").html(a) };
                g(a, q, !1); b.preventDefault()
            }); $("a[data-tab=panel_item_style_kljsdf214]").click(); n(p, q, a)
    }
}; myqtt.completeXmlNode = function (a, b) { a && 0 < a.length && (a = a.trim()); if (!a || 0 == a.length || "/>" == myqtt.end(a, 2)) return a; var c = "</" + b + ">"; return myqtt.end(a, c.length) == c ? a : a + c }; myqtt.getForeGroundColor = function (a) { for (var b = a.parent; b;) { if (["black", "brown"].includes(b["background-color"])) return "white"; b = b.parent } return a.color ? a.color : "" };
myqtt.getRawDocFromSourceEditor = function () { if (myqtt.panelSourceEditor) { var a = myqtt.panelSourceEditor.getValue(); if (0 <= a.indexOf("<doc")) { var b = a.indexOf("<doc"), c = a.indexOf(">", b + 3), a = a.slice(b, c + 1); if (0 <= b && 0 <= c) return a } } return "<doc>" }; myqtt.triggerRunPreviewPanel = function () { $("a[data-tab=preview]").trigger("click") };
myqtt.runPreviewPanel = function (a) {
    var b = a.appContent, c = a.panelTag, d = a.panelId, e = a.domainName; myqtt.getPanelSource(a.panelTag, function (a) { var g = $("div[data-tab=preview]", b); a = { content: a, mapping: {}, domNode: $(g), panelTag: c, panelId: d, domainName: e, isPreview: !0, saveLastStructure: !0 }; $(g).css("height", $("body").height() - $(g).offset().top - 45 + "px"); myqtt.parseAndSet(a) }); 0 < $("div[data-tab=preview]").length && ($("div[data-tab=preview]").contextmenu(function (a) {
        a.preventDefault(); 3 == a.which && ($(".data-tab-preview.popup").remove(),
            $("body").append('<div class="ui data-tab-preview popup hidden"><div class="ui vertical menu"> <a class="item" name="configure_item_in_preview_kl978wef"><i class="icon cogs teal"></i> Configure item</a><a class="item" name="goto_item_in_source_kl978wef"><i class="icon code blue"></i> Goto item in code</a><a class="item" name="publish_to_topic_87ghfed"><i class="icon mail blue"></i> Publish to topic</a></div></div>'), $("[name=configure_item_in_preview_kl978wef]").click(a, function (a) {
                a.preventDefault();
                myqtt.selectItemFromPreview(a, function () { $("[name=configure_element_lkjgSDf]").click() })
            }), $("[name=goto_item_in_source_kl978wef]").click(a, function (a) { a.preventDefault(); myqtt.selectItemFromPreview(a, function (a) { $("a[data-tab=source]").click(); setTimeout(function () { myqtt.panelSourceEditor.focus(); setTimeout(function () { myqtt.panelSourceEditor.scrollIntoView(a) }, 50) }, 50) }) }), $("[name=publish_to_topic_87ghfed]").click(a, function (a) {
                a.target.count ? a.target.count++ : a.target.count = 1; a.preventDefault();
                4 < a.target.count ? myqtt.showInfo("Item select has no topic configured or cannot send messages", "For that reason, it cannot send any message for that reason", null, !0) : myqtt.selectItemFromPreview(a, function (b, f) {
                    if (f) if (!f.topic || 0 == f.topic.trim().length) myqtt.showInfo("Selected item has no topic configured", "Item selected must hava a topic='' attribute defined in order to activate publish to function. ", null, !0); else {
                        var m = { content: myqtt.panelSourceEditor.getValue(), domainName: e, panelId: d, panelTag: c };
                        myqtt.getPanelData(m, function () { var b = { domainName: e, onPublished: function () { setTimeout(function () { $("a[data-tab=preview]").click() }, 100) } }; f.topic && (b.topic = f.topic); m.data && "undefined" != typeof m.data[b.topic] && (b.payload = m.data[b.topic].payload, b.qos = m.data[b.topic].qos); b.topic && (a.target.count = 0, myqtt.showFastPublishDialog(b)) })
                    } else myqtt.showError({ title: "Internal panel selection error (0x90015948)", content: "Internal method myqtt.selectItemFromPreview reported empty structure after searching for options. Please report to MyQttHub support with this screenshot" })
                },
                    function () { myqtt.showInfo("Failed to find element structure from preview", "Unable selected item structure from preview to locate topic to publish (0x90014233)", null, !0) })
            }), $(a.target).popup({ popup: $(".data-tab-preview.popup"), position: "bottom center", hoverable: !0, on: "manual" }).popup("show"), $(a.target).removeClass("myqttHubPreviewHover"))
    }), $("div[data-tab=preview]").on("mouseover", function (a) { $(a.target).addClass("myqttHubPreviewHover") }), $("div[data-tab=preview]").on("mouseout", function (a) { $(a.target).removeClass("myqttHubPreviewHover") }))
};
myqtt.selectItemFromPreview = function (a, b, c) {
    a.preventDefault(); var d = a.data.target; a = $(d).attr("class"); if (!a || !a.includes("myqttPanelItem")) myqtt.showInfo("Hover until it glows!", "Selected item has no properties. Please, hover mouse over preview until you see glowing the element you want to interact with (0x90023432)<br><div class='ui center aligned segment basic'><img src='/assets/images/hover-until-it-glows-en.png' ></div>", null, !0); else {
        for (a = 0; 20 > a;) {
            var e = d.id; if (String(e).includes("panel-item-")) {
                structure =
                myqtt.findStructureById(myqtt.lastStructure, e); if (null == structure) { myqtt.showInfo("Failed to find any structure with the provided id", "Unable to find any panel item with id [" + e + "]. Unable to launch inline configuration editor", null, !0); return } if (null == myqtt.panelSourceEditor) { myqtt.showInfo("Source code panel not loaded", "Click on source code tab to load component before continue with inline edition", null, !0); return } d = myqtt.panelSourceEditor.getValue(); e = structure.parsedAt + 1; if (0 <= e) {
                    var f = c = 0; for (a =
                        0; a < e + 1;)"\n" == d[a] ? (f = 0, c++) : "\r" == d[a] && "\n" == d[a + 1] ? (f = 0, c++) : f++, a++; c = { line: c, ch: f }; myqtt.panelSourceEditor.focus(); myqtt.panelSourceEditor.setCursor(c); setTimeout(function () { myqtt.panelSourceEditor.updateLastItemClicked(null, null) }, 50); b && b(c, structure); return
                } c && c(); return
            } a++
        } c && c()
    }
}; myqtt.findStructureById = function (a, b) { if (a.id == b) return a; for (var c in a.children) { var d = myqtt.findStructureById(a.children[c], b); if (null != d) return d } return null };
myqtt.parseXml = function (a, b, c) {
    var d = !1; "undefined" == typeof b && (d = !0, b = { tags: [] }); if (b.error) return null; var e = { context: b }, f = 0; 0 < b.iterator && (f = b.iterator); if (!a) return null; b.iterator = f; if (f >= a.length) return null; for (var g = 3, h = -1; f < a.length;) {
        if (h == f && (g--, 0 >= g)) return myqtt.reportXmlError(b, "myqtt.parseXml :: Reached same iterator protection limit at iterator=" + f), e; var h = f, l = a[f]; if (!myqtt.parseXml.isWhiteSpace(l)) {
            if ("<" == l && "!" == a[f + 1] && "-" == a[f + 2] && "-" == a[f + 3]) {
                c = {
                    isComment: !0, context: b, children: [],
                    attributes: {}, attrList: []
                }; c.parsedAt = f; f += 4; for (c.innerStarted = f; f < a.length - 3 && "--\x3e" != a.substring(f, f + 3);)f++; if ("--\x3e" == a.substring(f, f + 3)) return c.innerClosed = f, c.innerHTML = a.substring(c.innerStarted, c.innerClosed), c.parsedEndAt = f + 2, c.fullHTML = a.substring(c.parsedAt, c.parsedEndAt + 1), f++, b.iterator = f, c; myqtt.reportXmlError(b, "myqtt.parseXml :: found comment started at=" + c.parsedAt + ", but failed to find comment terminator"); return null
            } if ("<" == l && "/" == a[f + 1]) {
                d = f; f += 2; for (g = f + 1; g < a.length &&
                    ">" != a[g];)g++; f = a.substring(f, g); if (0 == b.tags.length) return myqtt.reportXmlError(b, "myqtt.parseXml :: expected to find open tag for <" + f + "> but found closing tag for </" + f + ">"), null; if (b.tags[0] != f) return myqtt.reportXmlError(b, "myqtt.parseXml :: found open tag for <" + b.tags[0] + "> for closing tag </" + f + ">"), null; b.tags.shift(); b.iterator = g + 1; delete b.iterator2; if (c && c.name == f) return c.innerClosed = d, c.innerHTML = a.substring(c.innerStarted, c.innerClosed), null; myqtt.reportXmlError(b, "myqtt.parseXml :: found closing node declaration when expected to find open tag at: " +
                        f); return null
            } if ("<" == l) { for (g = f + 1; g < a.length && !(" " == a[g] || "/" == a[g] || ">" == a[g]);)g++; e.name = a.substring(f + 1, g); e.parsedAt = f; b.tags.unshift(e.name); b.iterator = f; b.iterator2 = g; if (0 == e.name.length) return myqtt.reportXmlError(b, "myqtt.parseXml :: Parse error (0x90008920) :: expected to find node name but empty content was found"), null; if (!myqtt.parseXmlNode(a, e, b)) return null; f = b.iterator; break }
        } f++
    } b.iterator = f; d && (b.error && (e.error = b.error, e.errorFound = b.errorFound), myqtt.deleteContext(e), delete e.context,
        e.context = {}); return e
}; myqtt.deleteContext = function (a) { if (a) { delete a.context; for (var b in a.children) myqtt.deleteContext(a.children[b]) } }; myqtt.parseXml.isWhiteSpace = function (a) { return a && 0 < a.length && (" " == a || "\t" == a || "\n" == a || "\r" == a) ? !0 : !1 };
myqtt.parseXmlNode = function (a, b, c) {
    var d = c.iterator, e = c.iterator2; b.attributes = {}; b.attrList = []; b.children = []; for (var f = 3, g = -1; e < a.length;) {
        if (g == e && (f--, 0 >= f)) return myqtt.reportXmlError(c, "myqtt.parseXmlNode :: 0x80009011 :: Reached same iterator protection limit at iterator2=" + e), !1; var g = e, h = a[e]; if (myqtt.parseXml.isWhiteSpace(h)) e++; else {
            if ("/" == h && ">" == a[e + 1]) return b.parsedEndAt = e + 1, b.fullHTML = a.substring(b.parsedAt, b.parsedEndAt + 1), b.innerHTML = "", b.selfClosing = !0, b.innerStarted = b.parsedEndAt +
                1, b.innerClosed = b.innerStarted, c.tags.shift(), c.iterator = e + 2, delete c.iterator2, !0; if (">" == h) { b.innerStarted = e + 1; c.iterator = e + 1; delete c.iterator2; for (child = myqtt.parseXml(a, c, b); null != child;) { if (child.error) return !1; b.children.push(child); child.parent = b; c.parent = b; child = myqtt.parseXml(a, c, b) } e = c.iterator; b.innerHTML || (b.innerHTML = ""); break } if ("<" == h && "/" == a[e + 1]) {
                    d = e; e++; for (e++; e < a.length;) {
                        h = a[e]; if (">" == h) {
                            d = a.substring(d + 2, e); if (d != b.name) return myqtt.reportXmlError(c, "myqtt.parseXmlNode :: 0x80009012 :: Expected to find termination tag: </" +
                                b.name + "> but found </" + d + ">"), !1; break
                        } e++
                    }
                } c.iterator = e; if (myqtt.parseXmlAttr(b, a, c)) e = c.iterator; else break
        }
    } b.parsedEndAt = e - 1; b.fullHTML = a.substring(b.parsedAt, b.parsedEndAt + 1); c.iterator = e; delete c.iterator2; return !0
};
myqtt.parseXmlAttr = function (a, b, c) { for (var d = c.iterator, e = d; d < b.length && "=" != b[d];)d++; e = b.substring(e, d - 1 + 1); d++; var f = b[d]; '"' != f && "'" != f ? f = " " : d++; for (var g = d; d < b.length && b[d] != f;)d++; b = b.substring(g, d); ('"' == f || "'" == f) && d++; c.iterator = d; a.attributes[e] = b; a.attrList.push({ name: e, value: b }); return !0 }; myqtt.reportXmlError = function (a, b) { a.error = !0; "undefined" == typeof a.errorFound && (a.errorFound = []); console.error(b); a.errorFound.push(b) };
myqtt.countXmlNodes = function (a, b) { if (a) { if (0 == a.children.length) return 1; var c = 1, d; for (d in a.children) c += myqtt.countXmlNodes(a.children[d], b); return c } return 0 };
myqtt.getNodeXmlPath = function (a, b) {
    function c(a, b) { if (null == a) return null; if (1 == b.length && b[0].split("[")[0] == a.name || 1 == b.length && "comment()" == b[0].split("[")[0] && a.isComment) return a; if (1 != b.length && 0 < b.length && b[0].split("[")[0] == a.name) { b.shift(); var d = b[0].split("[")[0], h; h = b[0]; h = h.includes("[") ? Number(h.split("[")[1].split("]")[0]) : -1; for (var l in a.children) if (a.children[l].name == d || "comment()" == d && a.children[l].isComment) if (0 < h) h--; else { if (-1 == h || 0 == h) return c(a.children[l], b); break } } return null }
    var d = b.split("/").slice(1); return c(a, d)
};
myqtt.savePanel = function (a, b, c, d) {
    $("[name=add_panel_lkjsadflkj]", a).addClass("loading"); var e = {}; e.domainName = b; e.name = $("[name=name]", a).val(); e.description = $("[name=description]", a).val(); e.isActive = $("input[name=is_active]", a).is(":checked"); e.isPublic = $("input[name=is_public]", a).is(":checked"); e.panelId = c; myqtt.post({
        url: "/panel/add", data: e, success: function (a) {
            a && 0 < a.code && (c = a.code); -1 == c ? window.location = "/panels/" + b : null == myqtt.panelSourceEditor ? ($("[name=add_panel_lkjsadflkj]").removeClass("loading"),
                d && d(c)) : (a = {}, a.panelId = c, a.content = myqtt.Base64.encode(myqtt.panelSourceEditor.getValue()), a.domainName = b, a.panelTopics = myqtt.getPanelTopicsByContent(myqtt.panelSourceEditor.getValue()), myqtt.post({ url: "/panel/save-content", data: a, success: function (a) { $("[name=add_panel_lkjsadflkj]").removeClass("loading"); d && d() }, error: function (a) { myqtt.showError({ title: "Failed to save panel content", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }); $("[name=add_panel_lkjsadflkj]").removeClass("loading") } }))
        },
        error: function (a) { var b = []; a.responseText.includes("[10037]") && b.push({ label: "Upgrade my plan", icon: "blue angle double up", handler: function () { window.location = "/upgrade" } }); myqtt.showError({ title: "Operation failed", content: "Received error response: " + a.statusText + ".<br>" + a.responseText, buttons: b }) }
    })
};
myqtt.getPanelTopicsByContent = function (a) { function b(a, c, f) { c.topic && (a = c.topic, -1 == f.indexOf(a) && f.push(a)); for (var g in c.children) b(c, c.children[g], f); return f } a = myqtt.parseAndSet({ content: a, justParse: !0 }); if (!a) return []; var c = []; b(null, a, c); return c };
myqtt.panelChangeName = function (a, b, c, d) { myqtt.post({ url: "/panel/change-name", data: { domainName: a, name: b, newName: c }, success: function (a) { d && d() }, error: function (a) { myqtt.showError({ title: "Failed to change panel name", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.showStashes = function (a) { a.html("<div class='ui text loader centered active top150'>Loading stashes</div>"); var b = myqtt.getUrlPathItem(1); b || (b = myqtt.userInfo.domainName); myqtt.post({ url: "/stashes", data: { domainName: b }, success: function (c) { myqtt.showStashesComplete(a, c, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load stashes", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading stashes</button></a>") } }) };
myqtt.showStashesComplete = function (a, b, c) {
    var d = [], e = ""; c && (e = " for domain " + _domain(c)); d.push("<table class='ui celled sortable padded table'>"); d.push("<a href='/stashes/" + c + "'><button class='ui right labeled icon button'><i class='right refresh icon'></i>Refresh</button></a>"); var f = "/stash/add"; c && (f = f + "/" + c); d.push("<a href='" + f + "'><button class='ui right labeled icon button primary'><i class='right warehouse icon'></i>Add a new stash</button></a>"); f = myqtt.selectAnotherDomain("/domain/list",
        "domain", "name", "/stashes/", "to manage stashes", "Select another domain"); d.push(f); d.push("<thead><tr><th colspan='9' class='no-sort'>Stashes (message warehouses)" + e + ": <div class='ui label'><i class='warehouse icon'></i> " + b.length + " </div></th></tr><tr><th class='single line collapsing'><i class='warehouse icon'></i> Stash</th><th class='collapsing'>Msgs</th><th class='collapsing'>Stashing</th><th class='collapsing'>Msg. Rot. Count</th><th class='collapsing'>Msg. Rot. Size</th><th class='collapsing'>Msg. count</th><th class='collapsing'>Msg. quota</th><th>Description</th><th class='collapsing no-sort'>Actions</th></tr></thead><tbody>");
    for (var g in b) {
        var e = b[g], f = "<button class='ui icon mini button' name='remove_stash_kljst344' iter='" + g + "' label='" + e.name + "' data-tooltip='Remove stash and all its messages from domain'><i class='remove icon'></i></button>", h = ""; e.skipStashing && (h = "<a class='ui black horizontal label small'>skip</a>"); e = "<tr><td class='clickable' iter='" + g + "'><a class='ui label single line'>" + e.name + "</a></td> <td class='msgs collapsing'><button class='ui icon mini button' name='show_msgs_in_stash_k12kjsd' iter='" +
            g + "' label='" + e.name + "' data-tooltip='Show messages in stash " + e.name + "'><i class='envelope icon'></i></button></td> <td>" + h + "</td><td>" + e.msgRotationCount + "</td><td>" + e.msgRotationSize + "</td><td>" + e.msgCount + "</td><td>" + myqtt.sizeToHuman(e.quota) + "</td><td >" + e.description + "</td><td>" + f + "</td>"; d.push(e)
    } d.push("</tbody></table>"); a.html(d.join("\n")); $("table").tablesort(); $("[name=remove_stash_kljst344]", a).click(function (a) {
        a = a.target; "I" == a.nodeName && (a = a.parentNode); a = Number($(a).attr("iter"));
        myqtt.removeStash(b[a], c)
    }); $("[name=show_msgs_in_stash_k12kjsd]", a).click(function (a) { a.preventDefault(); a = a.target; "I" == a.nodeName && (a = a.parentNode); a = Number($(a).attr("iter")); window.location = "/stashed/" + c + "/" + b[a].name }); $("table", a).click(function (a) { for (a = a.target; a && !$(a).hasClass("clickable");)a = a.parentNode; a && $(a).hasClass("clickable") && (a = Number($(a).attr("iter")), location = "/stash/add/" + c + myqtt.formatParameters(b[a])) })
};
myqtt.removeStash = function (a, b) {
    myqtt.confirmAction({
        icon: "warehouse", design: "basic", title: "Remove stash " + a.name + " and all its associated messages?", content: "If you continue, you will remove permanently stash (" + a.name + ") and all stashed messages inside, holding messages for domain (" + b + "). After stash removal, it cannot be recovered in any way. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/stash/remove", data: { domainName: b, name: a.name }, success: function (a) {
                    window.location =
                    window.location.href
                }, error: function (a) { myqtt.showError({ title: "Failed to remove stash", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }
    })
};
myqtt.showStashAddForm = function (a) {
    var b = myqtt.getUrlPathItem(2); b || (b = myqtt.userInfo.domainName); var c = myqtt.extractParams(), d = null != c && "undefined" != typeof c, e = []; e.push("<div class='ui text container'>"); var f = "<h1 class='ui header'>Add Stash</h1>"; d && (f = "<h1 class='ui header'>Update Stash</h1>"); e.push(f); e.push('<form class="ui form" >'); f = ""; c && c.name && (f = "readonly='' value='" + c.name + "'"); e.push('<div class="field"><label>Name</label><input type="text" name="name" placeholder="Stash name (must be unique, label-like: accouting, sensor-data, iot-feed)" ' +
        f + " ></div>"); e.push("<div class='ui message'><div class='header'>Stash names cannot be changed</div><p>Choose your stash names in a consistent manner. They cannot be changed.</p></div>"); e.push('<div class="three fields">'); f = ""; c && c.msgRotationCount && (f = " value='" + c.msgRotationCount + "'"); e.push('<div class="field"><label>Message rotation count</label><input name="msg_rotation_count" type="text" name="topic" placeholder="Message rotation count" ' + f + "></div>"); f = ""; c && c.msgRotationSize && (f = " value='" +
            c.msgRotationSize + "'"); e.push('<div class="field"><label>Message rotation size</label><input name="msg_rotation_size"  type="text" name="topic" placeholder="Message rotation size" ' + f + "></div>"); var g = f = ""; c && c.skipStashing && (f = "checked", g = "checked=''"); e.push('<div class="field" name="skip_stashing_tooltip"><label>Skip stashing</label><div class="ui toggle checkbox ' + f + '"><input type="checkbox" name="skip_stashing" ' + g + " ></div></div>"); e.push("</div>"); f = ""; c && (c.description && 0 < c.description.length) &&
                (f = c.description); e.push('<div class="field">  <label>Stash Description</label>   <textarea name="description" placeholder="Short description to help understand what\'s inside this Stash">' + f + "</textarea>  </div> "); e.push('<button class="ui right labeled icon button primary" name="add_stash_lkjsadflkj"><i class="right ' + (d ? "edit" : "plus") + ' icon"></i>' + (d ? "Update" : "Add") + " stash</button>"); d && e.push('<button class="ui right labeled icon button" name="show_stashed_messages_lk3wef"><i class="right warehouse icon"></i>Show stashed messages</button>');
    e.push("</form>"); e.push("</div>"); a.html(e.join("\n")); $("[name=msg_rotation_count]", a).attr("data-html", "Allows to configure a max number to keep messages rotated.<br><br>If this value is reached, only the last number of messages defined here will be kept.<br><br>Leave it empty to avoid rotation.").popup(); $("[name=msg_rotation_size]", a).attr("data-html", "Allows to configure a max size to keep messages rotated.<br><br>If this value is reached, only last messages fitting max size defined here will be kept.<br><br>Leave it empty to avoid rotation.").popup();
    $("[name=skip_stashing_tooltip]", a).attr("data-html", "Temporally disables stashing function for this stash.").popup(); myqtt.combobox(a); $(".ui.checkbox", a).checkbox(); $(".menu .item", a).tab(); $("[name=show_stashed_messages_lk3wef]", a).click(function (a) { a.preventDefault(); window.location = "/stashed/" + b + "/" + c.name }); $("[name=add_stash_lkjsadflkj]", a).click(function (c) {
        c.preventDefault(); c = {}; c.domainName = b; c.name = $("[name=name]", a).val(); c.description = $("[name=description]", a).val(); c.msgRotationCount =
            myqtt.getNum("[name=msg_rotation_count]", a, -1); c.msgRotationSize = myqtt.getNum("[name=msg_rotation_size]", a, -1); c.skipStashing = myqtt.getCheckboxBool("[name=skip_stashing]", a, !1); myqtt.post({ url: "/stash/add", data: c, success: function (a) { window.history.back() }, error: function (a) { myqtt.showError({ title: d ? "Failed to update filter" : "Failed to add filter", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } })
    })
};
myqtt.getStashAndRedirect = function (a) {
    a.html("<div class='ui text loader centered active top150'>Loading stash</div>"); var b = myqtt.getUrlPathItem(2); if (b) {
        var c = myqtt.getUrlPathItem(3); if (c) {
            var d = {}; d.domainName = b; d.stashName = c; myqtt.post({
                url: "/stash/view", data: d, success: function (c) {
                    if (0 == c.length) myqtt.showErrorInPanel("Failed to load stash", "Stash does not exists or you are not authorized to view/handle it", a); else {
                        var d = myqtt.extractParams(); d && d.tabactive && (c[0].tabactive = d.tabactive); c = "/stash/add/" +
                            b + myqtt.formatParameters(c[0]); window.location.replace(c)
                    }
                }, error: function (b) { myqtt.showErrorInPanel("Failed to load stash", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading stash</button></a>") }
            })
        } else myqtt.showErrorInPanel("Failed to load stash", "No stash name value was received (0x90008002)", a)
    } else myqtt.showErrorInPanel("Failed to load stash", "No domain name was received (0x90008002)",
        a)
};
myqtt.showStashed = function (a, b, c, d, e) {
    a = $(a); a.html("<div class='ui text loader centered active top150'>Loading stashed messages</div>"); c || (c = myqtt.getUrlPathItem(1)); c ? (d || (d = myqtt.getUrlPathItem(2)), d ? (b || (b = "24h"), myqtt.post({
        url: "/stashed", data: { domainName: c, stashName: d, downloadFrame: b }, success: function (f) { myqtt.showStashedComplete(a, f, c, d, b, e) }, error: function (b) {
            myqtt.showErrorInPanel("Failed to load stashed messages", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href +
                "'><button class='ui primary button'>Retry loading stashed messages</button></a>")
        }
    })) : myqtt.showErrorInPanel("Failed to load stashed messages", "Stash name not defined. Malformed url", a)) : myqtt.showErrorInPanel("Failed to load stashed messages", "Domain not defined. Malformed url", a)
};
myqtt.disableCode = function (a, b) { myqtt.isJson(a) && (a = a.replace(/","/g, '",\n"'), a = a.replace(/", "/g, '",\n"')); a && 0 <= a.indexOf("<") && (a = a.replace(/</g, "&lt;")); a && 0 <= a.indexOf("\n") && (a = a.replace(/\n/g, "<br>")); a && 0 <= a.indexOf(" ") && (a = a.replace(/ /g, "&nbsp;")); 50 < a.length && !b && (a = a.slice(0, 50) + "[...]"); return a };
myqtt.showStashedComplete = function (a, b, c, d, e, f) {
    var g = []; if (!f) { var h = "<h1 class='ui header'>Stashed messages at <a href='" + window.location.href + "' class='ui label single line'>" + d + "</a>, for domain " + _domain(c) + "</h1>"; g.push(h) } g.push("<a href='" + window.location.href + "'><button class='ui right labeled icon button primary'><i class='right refresh  icon'></i>Refresh</button></a>"); h = "Last 24 hours"; "24h" == e && (h = "Last 24 hours"); "7days" == e && (h = "Last 7 days"); "all" == e && (h = "Complete stash"); g.push('<div class="ui floating dropdown labeled search icon button" id="stashed_show_frame_klj235"><i class="warehouse icon"></i><span class="text">' +
        h + '</span><div class="menu" ><div class="item" data-value="24h" selected>Last 24 hours</div><div class="item" data-value="7days">Last 7 days</div><div class="item" data-value="all">Complete stash</div></div></div>'); g.push("<a href='#' name='download_stash_987f'><button class='ui right labeled icon button'><i class='right download icon'></i>Download Stash</button></a>"); g.push("<a href='#' name='manage_stash_987f'><button class='ui right labeled icon button'><i class='right warehouse icon'></i>Manage Stash</button></a>");
    g.push("<a href='#' name='clear_stash_987f'><button class='ui right labeled icon button'><i class='right erase icon'></i>Clear Stash</button></a>"); g.push("<table class='ui compact selectable celled sortable striped table'>"); g.push("<thead><tr><th colspan='8' class='no-sort'>Stashed messages <div class='ui label'>  <i class='warehouse icon'></i> " + b.length + "</div></th></tr><tr><th class='collapsing'>ClientId</th><th class='collapsing'>User name</th><th class='collapsing'>Qos</th><th class='collapsing'>Retain</th><th class='collapsing'>Dup</th><th class='collapsing'>Remote address / Date</th><th><i class='warehouse icon'></i> Topic / Payload</th><th class='collapsing single line no-sort'>Actions</th></tr></thead>");
    g.push("<tbody>"); for (var l in b) {
        var h = b[l], m = "", m = h.retain ? "<a class='ui teal horizontal label small single line'>retain</a>" : "<span class='ui single line'>-</span>", n = "", n = h.dup ? "<a class='ui teal horizontal label small single line'>dup</a>" : "<span class='ui single line'>-</span>", s = "<button class='ui icon mini button' name='remove_stash_msg_klj897d' iter='" + l + "' label='" + h.label + "' data-tooltip='Remove stashed message from domain'><i class='remove icon'></i></button>", r = "<button class='ui icon mini button' name='play_stash_k9fSdfklj' iter='" +
            l + "' label='" + h.name + "' data-tooltip='Resend this message to this domain " + c + "'><i class='play icon'></i></button>", q = "<button class='ui icon mini button' name='unhide_stash_code_k9fSdfklj' iter='" + l + "' data-tooltip='Shows mesage payload'><i class='unhide icon'></i> " + myqtt.disableCode(h.payload) + "</button>", p = "<a class='ui horizontal label mini single line'>" + h.date + "</a>", h = "<tr class='top aligned'><td class='clickable single line' iter='" + l + "'>" + _device(c, h.clientId) + "</td><td class='single line'>" +
                h.userName + "</td><td>" + h.qos + "</td><td>" + m + "</td><td>" + n + "</td><td class='single line'>" + _ip(h.remoteAddr) + "<br>" + p + "</span></td><td>" + _topic(h.topic, c) + "<br>" + q + "</td><td class='single line' >" + r + s + "</td>"; g.push(h)
    } g.push("</tbody></table>"); a.html(g.join("\n")); $("table").tablesort(); $("#stashed_show_frame_klj235", a).dropdown("set selected", e).dropdown("setting", "onChange", function () { var b = $("#stashed_show_frame_klj235").dropdown("get value"); myqtt.showStashed(a, b, c, d, f) }); $("[name=play_stash_k9fSdfklj]",
        a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); a = Number($(a).attr("iter")); myqtt.replayStash(b[a], c, d) }); $("[name=unhide_stash_code_k9fSdfklj]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); a = Number($(a).attr("iter")); myqtt.showCode(b[a], c, d) }); $("[name=remove_stash_msg_klj897d]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); a = Number($(a).attr("iter")); myqtt.removeStashMsg(b[a], c, d) }); $("[name=manage_stash_987f]", a).click(function (a) {
            a.preventDefault();
            window.location = "/stash/view/" + c + "/" + d
        }); $("[name=clear_stash_987f]", a).click(function (f) { f.preventDefault(); myqtt.clearStash(a, b, c, d, e) }); $("table", a).click(function (a) { for (a = a.target; a && !$(a).hasClass("clickable");)a = a.parentNode; a && $(a).hasClass("clickable") && $(a).attr("iter") }); $("[name='download_stash_987f']", a).click(function (b) {
            $("[name='download_stash_987f'] button", a).addClass("loading"); b.preventDefault(); setTimeout(function () {
                function a() {
                    var e = $("select#download_format_klj1233", b).val(),
                    f = $("select#download_frame_klj1233", b).val(); myqtt.calculateStashQuota(b, c, d, e, f, function (a) { $("#confirmdownload_lkjsfkj", b).removeClass("disabled"); var c = myqtt.sizeToHuman(a.size); $("#download_size_klj1233").val(String(c.split(" ")[0])); $("#download_size_units_klj1233").html(String(c.split(" ")[1])); $("#download_quota_klj1233").val(String(a.qta)) })
                } var b = $("[name=configurestashdownload_kljsdf214]").modal({
                    onDeny: function (a) { $("[name='download_stash_987f'] button").removeClass("loading") }, onApprove: function (a) {
                        a =
                        $("select#download_format_klj1233", b).val(); var e = $("select#download_frame_klj1233", b).val(); myqtt.post({ url: "/stashed/download", data: { domainName: c, stashName: d, downloadAs: a, downloadFrame: e }, dataType: "download", success: function (a) { }, error: function (a) { myqtt.showError({ title: "Failed to download stashed messages", content: "Received error response: " + a.status + " " + a.statusText + ": " + a.responseText }) } })
                    }, onHide: function (a) { $("[name='download_stash_987f'] button").removeClass("loading") }
                }).modal("show"); myqtt.combobox(b);
                $(".dropdown", b).dropdown("setting", "onChange", function () { a() }); a()
            }, 100)
        }); myqtt.resolveIps()
};
myqtt.showCode = function (a, b, c) {
    var d = myqtt.disableCode(a.payload, !0), e = "", f = ""; try { e = JSON.parse(d), e = "<a class='ui horizontal teal label' href='#'>Correct json detected (parse OK) </a>" } catch (g) { e = "<a class='ui horizontal red label' href='#' name='show-json-parse-error'>JSON parse error: </a>", f = g.message } myqtt.showInfo(e + ": payload content ", d, null, !0, "normal"); $("[name=infomessage] [name=show-json-parse-error").click(function () {
        myqtt.showInfo("Json parse error information", e + f + " for input: <span style='background-color: #c9c9c9'>" +
            d + "</span>", null, !0, "normal")
    })
};
myqtt.clearStash = function (a, b, c, d, e) {
    setTimeout(function () {
        var a = $("[name=clear_stash_kljsdf214]").modal({ onDeny: function (a) { }, onApprove: function (b) { b = $("select#clear_frame_klj123324", a).val(); myqtt.post({ url: "/stashed/clear", data: { domainName: c, stashName: d, keepFrame: b }, success: function (a) { location = location.href }, error: function (a) { myqtt.showError({ title: "Failed to clear stashed messages", content: "Received error response: " + a.status + " " + a.statusText + ": " + a.responseText }) } }) }, onHide: function (a) { } }).modal("show");
        myqtt.combobox(a)
    }, 100)
}; myqtt.calculateStashQuota = function (a, b, c, d, e, f) { myqtt.post({ url: "/calculate/stashed/download", data: { domainName: b, stashName: c, downloadAs: d, downloadFrame: e }, success: function (b) { $("[name='confirmdownload']", a).removeClass("disabled"); f && f(b) }, error: function (a) { myqtt.showError({ title: "Failed to calculate stash download size", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.replayStash = function (a, b, c) {
    myqtt.confirmAction({
        icon: "play", design: "basic", title: "Replay/resend stashed message?", content: "If you continue, you will resend/replay selected stashed message with stamp (" + a.stamp + ") from stash (" + c + "), as if it were received by a MQTT participant. Any subscriber matching topic will receive again this message. This replayed message will not be stashed as it is a copy. Do you want to continue?", okLabel: "Resend/replay this message now", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/stashed/message/replay",
                data: { domainName: b, stashName: c, stamp: a.stamp }, success: function (a) { window.location = window.location.href }, error: function (a) { myqtt.showError({ title: "Failed to replay stash message", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }
    })
};
myqtt.removeStashMsg = function (a, b, c) {
    myqtt.confirmAction({
        icon: "warehouse", design: "basic", title: "Remove stash message?", content: "If you continue, you will remove permanently stashed messaged with stamp (" + a.stamp + ") from stash (" + c + "), holding messages for domain (" + b + "). After removing message it cannot be recovered in any way. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/stashed/message/remove", data: { domainName: b, stashName: c, stamp: a.stamp }, success: function (a) {
                    window.location =
                    window.location.href
                }, error: function (a) { myqtt.showError({ title: "Failed to remove stash message", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }
    })
};
myqtt.showDomainSubscribeAddForm = function (a) {
    var b = [], c = myqtt.getUrlPathItem(3), d = "<h1 class='ui header'>Subscribe to a topic for device in " + _domain(c) + "(<a class='ui horizontal label' href='/devices/" + c + "'>Devices in " + c + "</a>)</h1>"; b.push(d); b.push('<form class="ui form" >'); d = myqtt.loadComboBox(a, "device", "Devices", "", "/device/list", "clientId", { domainName: c }); b.push(d); b.push('<div class="field"><label>Topic Filter</label><input type="text" name="topicfilter" placeholder="Topic filter"></div>');
    b.push('<div class="field"><select class="ui search dropdown" name="qos"><option value="">Select Qos</option><option selected value="0">Qos0 (Fire and forget)</option><option value="1">Qos1 (at least once)</option><option value="2">Qos2 (one and only one)</option></select></div>'); b.push('<button class="ui right labeled icon button primary" name="subscribe"><i class="right plus icon"></i>Subscribe</button>'); b.push("</form>"); $(a).html(b.join("\n")); $("select", a).dropdown(); $("[name=subscribe]").click(function (a) {
        a.preventDefault();
        a = {}; var b = $("[name=device]").val(), d = $("[name=topicfilter]").val(), h = Number($("[name=qos]").val()); a.subscriptions = [[d, h]]; a.domainName = c; a.clientId = b; myqtt.post({ url: "/subscribe", data: a, success: function (a) { window.history.back() }, error: function (a) { myqtt.showError({ title: "Failed to subscribe", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } })
    })
};
myqtt.showSubscribeAddForm = function (a) {
    var b = [], c = myqtt.getUrlPathItem(2), d = myqtt.getUrlPathItem(3), e = "<h1 class='ui header'>Subscribe to a topic</h1>"; c && (0 < c.length && d && 0 < d.length) && (e = "<h1 class='ui header'>Subscribe to a topic for " + _domain(c) + ":" + _device(c, d) + "</h1>"); b.push(e); b.push('<form class="ui form" >'); b.push('<div class="field"><label>Topic Filter</label><input type="text" name="topicfilter" placeholder="Topic filter"></div>'); b.push('<div class="field"><select class="ui search dropdown" name="qos"><option value="">Select Qos</option><option value="0">Qos0 (Fire and forget)</option><option value="1">Qos1 (at least once)</option><option value="2">Qos2 (one and only one)</option></select></div>');
    b.push('<button class="ui right labeled icon button primary" name="subscribe"><i class="right plus icon"></i>Subscribe</button>'); b.push("</form>"); a.html(b.join("\n")); $("select", a).dropdown(); $("[name=subscribe]").click(function (a) {
        a.preventDefault(); a = {}; var b = $("[name=topicfilter]").val(), e = Number($("[name=qos]").val()); a.subscriptions = [[b, e]]; c && (0 < c.length && d && 0 < d.length) && (a.domainName = c, a.clientId = d); myqtt.post({
            url: "/subscribe", data: a, success: function (a) {
                window.location = c && 0 < c.length && d &&
                    0 < d.length ? "/subscriptions/" + c + "/" + d : "/subscriptions"
            }, error: function (a) { myqtt.showError({ title: "Failed to subscribe", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
        })
    })
};
myqtt.showDomains = function (a) { a.html("<div class='ui text loader centered active top150'>Loading Domains</div>"); myqtt.post({ url: "/domain/list", success: function (b) { myqtt.showDomainsComplete(a, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load domains", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='/domains'><button class='ui primary button'>Retry loading domains</button></a>") } }) };
myqtt.showDomainsComplete = function (a, b) {
    var c = []; c.push("<h1 class='ui header'>MyQtt domains</h1>"); myqtt.userInfo.isAdmin && c.push("<a href='/domain/add'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Add domain</button></a>"); c.push("<table class='ui celled striped table'><thead><tr><th colspan='4'>MQTT Domains</th></tr></thead>"); c.push("<tbody><tr><td><i class='building outline icon'></i> Domain</td><td>Plan</td><td class='collapsing'>Status</td><td class='collapsing'>Actions</td></tr>");
    for (var d in b) { var e = b[d], f = e.domain, g = e.plan, e = (e = e.isActive) ? "<a class='ui green horizontal label small'>active</a>" : "<a class='ui horizontal label small'>disabled</a>", h = ""; myqtt.userInfo.isAdmin && (h = "<button class='ui icon mini button' name='removedomain' domain='" + f + "' data-tooltip='Remove domain and all devices associated to it'><i class='remove icon'></i></button>"); c.push("<tr><td class='clickable' iter='" + d + "'></i>" + f + "</td><td>" + g + "</td><td>" + e + "</td> <td>" + h + "</td>") } c.push("</tbody></table>");
    a.html(c.join("\n")); $("[name=removedomain]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); myqtt.removeDomain($(a).attr("domain")) }); $("table", a).click(function (a) { if ((a = a.target) && $(a).hasClass("clickable")) a = Number($(a).attr("iter")), location = "/domain/add/" + myqtt.formatParameters(b[a]) })
};
myqtt.removeDomain = function (a) {
    myqtt.confirmAction({
        icon: "building outline", design: "basic", title: "Do you want to remove domain " + a + " and all its associated messages?", content: "If you continue, you will remove permanently domain (" + a + ") and all associated messages inside it. After domain removal, it cannot be recovered in any way. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.addLoading("Removing domain (" + a + "), please wait..."); setTimeout(function () {
                myqtt.post({
                    url: "/domain/remove",
                    data: { domain: a }, success: function (a) { window.location = "/domains" }, error: function (a) { myqtt.showError({ title: "Failed to remove domain", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
                })
            }, 100)
        }
    })
};
myqtt.showAddDomainForm = function (a) {
    var b = myqtt.extractParams(), c = null != b && "undefined" != typeof b, d = []; d.push("<div class='ui doubling container'>"); c && (d.push('<div class="ui top tabular menu">'), d.push('  <a class="item active" data-tab="general"><i class="building outline icon"></i>Domain</a>'), d.push('  <a class="item" data-tab="devices"><i class="microchip icon"></i>Devices</a>'), d.push('  <a class="item" data-tab="bootstrap"><i class="bezier curve icon"></i>Bootstrap</a>'), d.push('  <a class="item" data-tab="subscriptions"><i class="block layout icon"></i>Subscriptions</a>'),
        d.push('  <a class="item" data-tab="stats_and_quota"><i class="bar chart icon"></i>Quota</a>'), d.push('  <a class="item" data-tab="last_msgs_published"><i class="envelope icon"></i>Last</a>'), d.push('  <a class="item" data-tab="connection_history"><i class="list icon"></i>Conn. history</a>'), d.push('  <a class="item" data-tab="unconfirmed_messages"><i class="comment alternate icon"></i>Unconfirmed</a>'), d.push('  <a class="item" data-tab="errors"><i class="warning icon"></i>Errors</a>'), d.push("</div>"),
        d.push('<div class="ui tab active" data-tab="general">')); d.push("<div class='ui stackable grid'>"); d.push("<div class='ten wide column'>"); var e = "<h1 class='ui header'>Add domain</h1>"; c && (e = myqtt.userInfo.isAdmin ? "<h1 class='ui header'>Update domain</h1>" : "<h1 class='ui header'>Domain info</h1>"); d.push(e); d.push('<form class="ui form" >'); e = ""; b && b.domain && (e = "value='" + b.domain + "'"); d.push('<div class="field"><label>Domain name</label><input type="text" name="domain" placeholder="Domain name" ' +
            e + " ></div>"); e = ""; b && b.plan && (e = b.plan); var f = "", f = myqtt.userInfo.isAdmin ? myqtt.loadComboBox(a, "plan", "Domain Plan", e, "/plans/list", "name") : '<div class="field"><label>Domain Plan</label><input type="text" name="plan" value="' + e + '" readonly></div>'; d.push(f); myqtt.userInfo.isAdmin && c && (f = e = "", b && b.isActive && (e = "checked", f = "checked=''"), d.push('<div class="field"><div class="ui toggle ' + e + ' checkbox"><label>Active</label><input type="checkbox" name="is_active" ' + f + " ></div></div>")); myqtt.userInfo.isAdmin &&
                d.push('<button class="ui right labeled icon button primary" name="adddomain_908sgjfk"><i class="right ' + (c ? "edit" : "plus") + ' icon"></i>' + (c ? "Update" : "Add") + "</button>"); if (c && (e = "Publish to domain", myqtt.userInfo.isAdmin && (e = "Publish"), d.push('<button class="ui right labeled icon button secondary" name="publish_12sdfkj"><i class="right mail icon"></i>' + e + "</button>"), myqtt.userInfo.isAdmin || myqtt.userInfo.hasDomainAdmin)) d.push('<button class="ui right labeled icon button " name="filters_12sdfkj"><i class="right filter icon"></i>Filters</button>'),
                    d.push('<button class="ui right labeled icon button " name="stashes_12sdfkj"><i class="right warehouse icon"></i>Stashes</button>'), d.push('<button class="ui right labeled icon button " name="panels_12sdfkj"><i class="right th icon"></i>Panels</button>'); d.push("</form>"); d.push("</div>"); if (b && b.domain && (d.push("<div class='one wide column'><div class='ui vertical divider computer only'> <i class='angle right icon'></i> </div></div>"), d.push("<div class='five wide column'>"), d.push("<h1 class='ui header'>Options</h1>"),
                        d.push("<a href='/devices/" + b.domain + "'><button class='ui right labeled icon button  '><i class='right building outline icon'></i> Show devices</button></a>"), d.push("<br>"), d.push("<br>"), d.push("<a href='/device/add/" + b.domain + "'><button class='ui right labeled icon button secondary  '><i class='right building outline icon'></i> Add device</button></a>"), d.push("<br>"), d.push("<br>"), d.push('<button class="ui right labeled icon blue button " name="upgrade_12sdfkj"><i class="angle double up icon"></i>Upgrade my plan</button>'),
                        d.push("<br>"), d.push("<br>"), d.push('<button class="ui right labeled icon button " name="downgrade_plan_12sdfkj"><i class="angle double down icon"></i>Change my plan</button>'), d.push("<br>"), d.push("<br>"), d.push('<button class="ui right labeled icon button " name="cancel_plan_12sdfkj"><i class="bomb red icon"></i>Cancel my plan</button>'), (myqtt.userInfo.isAdmin || myqtt.userInfo.hasDomainAdmin) && b && b.domain)) d.push("<br>"), d.push("<br>"), d.push('<button class="ui right labeled icon button " name="stop_context_12sdfkj"><i class="exclamation triangle icon"></i>Restart context</button>');
    d.push("</div>"); d.push("</div>"); d.push("</div>"); c && (d.push('<div class="ui tab" data-tab="devices">'), d.push("</div>"), d.push('<div class="ui tab" data-tab="bootstrap">'), d.push("</div>"), d.push('<div class="ui tab" data-tab="subscriptions">'), d.push("</div>"), d.push('<div class="ui tab" data-tab="stats_and_quota">'), d.push("</div>"), d.push('<div class="ui tab" data-tab="last_msgs_published">'), d.push("</div>"), d.push('<div class="ui tab" data-tab="connection_history">'), d.push("</div>"), d.push('<div class="ui tab" data-tab="unconfirmed_messages">'),
        d.push("</div>"), d.push('<div class="ui tab" data-tab="errors">'), d.push("Showing errors..."), d.push("</div>")); a.html(d.join("\n")); myqtt.combobox(a); $(".ui.checkbox", a).checkbox(); $(".ui.menu .item", a).tab(); $("[name=adddomain_908sgjfk]").click(function (b) {
            b.preventDefault(); b = {}; b.domain = $("[name=domain]", a).val(); b.plan = $("[name=plan]", a).val(); c && (b.isActive = $("input[name=is_active]", a).is(":checked")); myqtt.post({
                url: c ? "/domain/update" : "/domain/add", data: b, success: function (a) {
                    window.location =
                    "/domains"
                }, error: function (a) { myqtt.showError({ title: c ? "Failed to update domain" : "Failed to add domain", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }); $("[name=publish_12sdfkj").click(function (a) { a.preventDefault(); window.location = "/publish/prepare/" + b.domain }); $("[name=filters_12sdfkj").click(function (a) { a.preventDefault(); window.location = "/filters/" + b.domain }); $("[name=stashes_12sdfkj").click(function (a) { a.preventDefault(); window.location = "/stashes/" + b.domain }); $("[name=panels_12sdfkj").click(function (a) {
            a.preventDefault();
            window.location = "/panels/" + b.domain
        }); $("[name=upgrade_12sdfkj").click(function (a) { a.preventDefault(); window.location = "/upgrade" }); $("[name=downgrade_plan_12sdfkj").click(function (a) { a.preventDefault(); window.location = "/change-or-downgrade" }); $("[name=cancel_plan_12sdfkj").click(function (a) { a.preventDefault(); window.location = "/cancel-request" }); $("[name=stop_context_12sdfkj]").click(function (a) { a.preventDefault(); myqtt.restartMyQttHubContext(b.domain) }); c && ($("a[data-tab='devices']", a).click(function (c) {
            "devices" !=
            b.tabactive ? (b.tabactive = "devices", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='devices']", a)[0], myqtt.showDevices(c, b.domain))
        }), $("a[data-tab='bootstrap']", a).click(function (c) { "bootstrap" != b.tabactive ? (b.tabactive = "bootstrap", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='bootstrap']", a)[0], myqtt.showBootstrapAuths(c, b.domain)) }), $("a[data-tab='subscriptions']", a).click(function (c) {
            "subscriptions" != b.tabactive ? (b.tabactive = "subscriptions", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='subscriptions']",
                a)[0], myqtt.showDomainSubscriptions(c, b.domain))
        }), $("a[data-tab='stats_and_quota']", a).click(function (c) { "stats_and_quota" != b.tabactive ? (b.tabactive = "stats_and_quota", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='stats_and_quota']", a)[0], myqtt.showStatsAndQuota(b.domain, null, -2, c)) }), $("a[data-tab='last_msgs_published']", a).click(function (c) {
            "last_msgs_published" != b.tabactive ? (b.tabactive = "last_msgs_published", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='last_msgs_published']", a)[0], myqtt.showStashed(c,
                "all", b.domain, "PublishedMessages", !0, !0))
        }), $("a[data-tab='connection_history']", a).click(function (c) { "connection_history" != b.tabactive ? (b.tabactive = "connection_history", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='connection_history']", a)[0], myqtt.showConnectionHistory(b.domain, null, -2, c)) }), $("a[data-tab='unconfirmed_messages']", a).click(function (c) {
            "unconfirmed_messages" != b.tabactive ? (b.tabactive = "unconfirmed_messages", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='unconfirmed_messages']", a)[0],
                myqtt.showUnconfirmedMessagesStat(b.domain, null, !0, c))
        }), $("a[data-tab='errors']", a).click(function (c) { "errors" != b.tabactive ? (b.tabactive = "errors", myqtt.reloadWithParams(b)) : (c = $("div[data-tab='errors']", a)[0], myqtt.showLastErrors(b.domain, null, c)) }), b && b.tabactive && $("a[data-tab='" + b.tabactive + "']", a).trigger("click"))
};
myqtt.restartMyQttHubContext = function (a) {
    myqtt.confirmAction({
        icon: "exclamation triangle", design: "basic", title: "Do you want to restart your HUB's context?", content: "If you continue, context engine associated to domain HUB (" + a + ") will be restarted. All users and devices will be disconnected after that. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/domain/context/stop", data: { domain: a }, success: function (b) {
                    (b = b.responseText) || (b = "domain context stopped."); myqtt.showInfo("Domain context for [" +
                        a + "] stopped", "Response received: " + b + "<br><br><i class='info circle inverted blue icon'></i>Now you will be redirecting to refresh your session to continue.", function () { window.location = window.location.href }, !0)
                }, error: function (a) { myqtt.showError({ title: "Failed to stop context", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }
    })
};
myqtt.showNewDomainForm = function (a) {
    if (myqtt.userInfo.hasDomainAdmin) {
        var b = []; b.push("<div class='ui text container'>"); b.push("<div class='ui stackable grid'>"); b.push("<div class='column'>"); b.push("<h1 class='ui header'>Add another MQTT HUB</h1>"); b.push('<form class="ui form" >'); b.push('<div class="ui message"><div class="header">About adding a new MQTT HUB</div>The following process allows you to activate a new MQTT HUB and associate its management to your admin user (' + myqtt.userInfo.clientId +
            ")</div>"); b.push('<div class="field"><label>1. MQTT HUB name</label><input type="text" name="domain" placeholder="HUB name. Use domain-name.com format or hub-domain-name.com" ></div>'); b.push('<div class="field"><label>2. Select plan for new HUB</label><span name="plan_selection_lj9768sedf"></span></div>'); b.push('<button class="ui right labeled icon button disabled" name="add_new_hub_908sgjfk"><i class="right plus icon"></i>Add new MQTT Hub</button>'); b.push("</form>"); b.push("</div>"); b.push("</div>");
        b.push("</div>"); a.html(b.join("\n")); myqtt.upgradeYourSubscription({ appContent: $("[name=plan_selection_lj9768sedf]"), featureName: "Select plan for new MQTT HUB", disableButtons: !0, headerTitle: "Select plan for new MQTT HUB", operationInfo: "Select the plan you want to associate to the new MQTT HUB", onSelectedPlan: function (a) { $("[name=add_new_hub_908sgjfk]").addClass("primary"); $("[name=add_new_hub_908sgjfk]").removeClass("disabled") } }); $("[name=add_new_hub_908sgjfk]").click(function (a) {
            a.preventDefault();
            var b = $("input[name=domain]").val(); b && (b = myqtt.trim(b.replace(" ", ""))); !b || 0 == b.length || !myqtt.isDomain(b) ? myqtt.showError({ title: "Please, define hub value", content: "Use domain-name.com format or hub- + domainname.com" }) : (a = myqtt.upgradeYourSubscription.lastSelected, !a || !a.s || !a.d ? myqtt.showError({ title: "Please, select HUB plan", content: "You have to select a HUB plan before continue" }) : myqtt.upgradeYourSubscription.getPriceSelected({
                onPrice: function (a, c) {
                    window.open("https://pas.aspl.es/?instant-payment=yes&desc=myqtthub_add_new_hub__" +
                        b + "__by_domain_admin__" + myqtt.userInfo.clientId + "+" + myqtt.userInfo.domainName + "__sku__" + c.s + "__info__" + c.d + "&cost=" + String(a))
                }
            }))
        })
    } else myqtt.showErrorInPanel("Add new HUB function not available for your user", "You need to be domain administrator to request adding a new MQTT HUB", a)
};
myqtt.ensureCommon = function (a) { a || (a = {}); var b = { size: "", color: "", inverted: !1, centered: !1, "warning-threshold": 90, "warning-color": "yellow", "critical-threshold": 95, "critical-color": "red" }, c; for (c in b) c in a || (a[c] = b[c]); return a }; myqtt.column = function (a) { a = myqtt.ensureCommon(a); return myqtt.pushAndReturn(a, '<div class="' + (a.cented ? "center aligned" : "") + ' column">NaN') };
myqtt.segment = function (a) { a = myqtt.ensureCommon(a); return myqtt.pushAndReturn(a, '<div class="ui ' + (a.cented ? "inverted" : "") + " " + a.color + ' segment">' + a.content + "</div>") }; myqtt.findValueByAttr = function (a, b) { for (var c in a) { var d = a[c]; if ("object" == typeof d) return myqtt.findValueByAttr(d, b); if (c == b) return d.toString() } return "" }; myqtt.getFirstAttr = function (a) { for (var b in a) { var c = a[b]; if ("string" == typeof c) return c; if ("number" == typeof c) return c.toString() } return "" };
myqtt.getTopicPayload = function (a, b, c, d) { if (a && b && b[a] && "undefined" != typeof b[a].payload) { a = b[a].payload; if (!c && !d) return "object" == typeof a ? myqtt.getFirstAttr(a) : a.toString(); if (!c && d) return "object" == typeof a ? myqtt.findValueByAttr(a, d) : a.toString(); c = c.split("."); for (d = 0; d < c.length;) { b = c[d]; if (!(b in a)) break; if ((a = a[b]) && c.length == d + 1) return a; d += 1 } } return "" }; myqtt.getTopicValueAux = function (a, b, c, d, e) { if (b = myqtt.getTopicPayload(b, c, d, e)) return b; a || (a = "@no-value@"); return a };
myqtt._applyStaticDataMappings = function (a, b) { if (a.mapping) for (var c in a.mapping) b = b.replace(RegExp("@" + c + "@", "g"), a.mapping[c]); return b }; myqtt.applySuffix = function (a, b) { var c = b; a && (b && a.structure && a.structure.suffix) && (c += a.structure.suffix); a && (b && a.structure && a.structure.prefix) && (c = a.structure.prefix + c); return c };
myqtt.applyDateFormat = function (a, b, c) { try { return a.replace(/dd/g, b.getDate().pad(2)).replace(/MM/g, (b.getMonth() + 1).pad(2)).replace(/yyyy/g, 1900 + b.getYear()).replace(/hh/g, b.getHours().pad(2)).replace(/mm/g, b.getMinutes().pad(2)).replace(/ss/g, b.getSeconds().pad(2)) } catch (d) { return c } };
myqtt.getTopicValue = function (a) {
    function b(b) { if (a && a.structure && a.structure.attributes && a.structure.attributes["date-format"]) { var c = b, f = a.structure.attributes["date-format"], g = null; try { g = myqtt.isNumeric(b) ? new Date(1E3 * b) : new Date(Date.parse(b)) } catch (h) { } g && (b = myqtt.applyDateFormat(f, g, c)) } return b } if (a && (a["access-attr"] || a["attr-name"]) && a.data && a.topic) return b(myqtt.getTopicValue({ structure: { topic: a.topic }, params: { data: a.data } })); if (a && a.structure && a.structure.value && 0 <= a.structure.value.indexOf("@")) {
        var c =
            a.structure.value, c = myqtt._applyStaticDataMappings(a.params, c); return b(c)
    } c = "@no-value@"; a && (a.structure && a.params) && (c = myqtt.getTopicValueAux(a.value, a.structure.topic, a.params.data, a.structure["access-attr"], a.structure["attr-name"])); return "@no-value@" != c ? b(c) : a && a.structure && a.structure.value ? b(a.structure.value) : ""
};
myqtt.addImage = function (a) { var b = myqtt.ensureCommon(a.structure), c = "<img " + myqtt.getStyle(a) + ' id="' + b.id + '" class="ui ' + _b(b, "centered") + _g(b, "size") + ' image " src="' + b.src + '" >', c = myqtt.addGridColumn(b, c); return myqtt.pushAndReturn(a, c) };
myqtt.addMessage = function (a) { var b = myqtt.ensureCommon(a.structure), c = ""; b.icon && (c = " icon "); var d = ""; b.header && (d = '<div class="header">' + b.header + "</div>"); b = '<div id="' + b.id + '" class="ui ' + _g(b, ["color", "size"]) + c + ' message">' + myqtt.addIcon(a, !0) + '     <div class="content">' + d + "     <p>" + b.innerHTML + "</p>     </div></div>"; return myqtt.pushAndReturn(a, b) };
myqtt.addIcon = function (a, b) {
    var c = a.structure; "counter clockwise rotated" == c["icon-rotation"] && (c["icon-rotation"] = "counterclockwise rotated"); "squared" == c["icon-border"] && myqtt.structureSetAttr(c, "icon-border", "bordered"); "squared" == c.border && myqtt.structureSetAttr(c, "border", "bordered"); var d = "", d = "icon" == c.name ? '<i class="icon ' + _g(c, ["icon", "size", "color", "rotation", "border"]) + " " + _if(c, "inverted", "inverted") + ' " ></i>' : '<i class="icon ' + _g(c, ["icon", "icon-size", "icon-color", "icon-rotation", "icon-border"]) +
        " " + _if(c, "icon-inverted", "inverted") + ' " ></i>'; return b ? d : myqtt.pushAndReturn(a, d)
}; myqtt.lastUpdate = function (a) { var b = myqtt.ensureCommon(a.structure), b = '<div id="' + b.id + '" class="ui ' + _g(b, ["color", "icon", "size"]) + ' label">Generated: ' + myqtt.stampToDate(Date.now()) + "</div>"; return myqtt.pushAndReturn(a, b) }; myqtt.isDateFormated = function (a) { return a && a.structure && a.structure.attributes && a.structure.attributes["date-format"] };
myqtt.addStat = function (a) {
    var b = myqtt.ensureCommon(a.structure), c = a.push, d = "blue"; b.color && (d = b.color); var e = myqtt.getTopicValue(a), f = myqtt.getStyle(a), g = "", h = 0; if (0 <= e.indexOf("/") && !myqtt.isDateFormated(a)) {
        var l = e.split("/"), m; for (m in l) l[m] = String(myqtt.humanToSize(l[m])); m = l.join("/"); l = Number(m.split("/")[0]); m = Number(m.split("/")[1].split(" ")[0]); 0 < m ? (h = Math.round(100 * (l / m)), g = "", g = 0 < h ? " data-percent='" + String(h) + "' " : " data-value='0' data-total='100' ", d = myqtt.getColorThreshOld(e, h, b, d),
            l = myqtt.getForeGroundColor(b), g = "<div class='ui " + d + " progress tiny' " + g + "><div class='bar'></div><div class='label " + l + "'>" + String(h) + "%</div></div>") : e = e.split("/")[0]
    } d = myqtt.getColorThreshOld(e, h, b, d); l = h = ""; b.href && (h = "<a href='" + b.href + "'>", l = "</a>"); m = ""; b.label && (m = b.label); e = myqtt.applySuffix(a, e); a = myqtt.addGridColumn(b, '<div id="' + b.id + '" class="ui inverted ' + d + ' segment" ' + f + ">" + h + '<div class="ui inverted statistic ' + b.size + '"><div class="value">' + myqtt.addIcon({ structure: b }) + " " + String(e) +
        '</div><div class="label">' + String(m) + "</div></div>" + l + "</div>" + g); c.push(a)
}; myqtt.addGridColumn = function (a, b) { return "grid" == a.parent.name ? '<div class="center aligned column">' + b + "</div>" : b };
myqtt.getColorThreshOld = function (a, b, c, d) { "critical-above-value" in c && (0 < a && a > c["critical-above-value"]) && (b = c["critical-threshold"]); "warning-above-value" in c && (0 < a && a > c["warning-above-value"]) && (b = c["warning-threshold"]); return 0 < b && b >= c["critical-threshold"] ? (d = "red", "critical-color" in c && (d = c["critical-color"]), d + " error") : 0 < b && b >= c["warning-threshold"] ? (d = "yellow", "warning-color" in c && (d = c["warning-color"]), d + " warning") : !d ? "grey" : d }; myqtt.icon = function (a) { return !a ? "" : "<i class='icon " + a + " ' ></i>" };
myqtt.label = function (a) { var b = a.color; b || (b = ""); var c = a.size; c || (c = ""); var d = a.href; d || (d = ""); (a = a.label) || (a = "undefined"); return "<a class='ui horizontal " + b + " label " + c + "' " + d + ">" + a + "</a>" }; myqtt.addColumn = function (a, b) { a.push('<div class="center aligned column">' + b + "</div>") };
myqtt.header = function (a) {
    var b = myqtt.addIcon(a, !0), c = a.structure["sub-header"]; c || (c = ""); c && (c = '<div class="sub header ' + _g(a.structure, ["color"]) + '">' + c + "</div>"); var c = '<div class="content">' + a.content + c + "</div>", d = _g(a.structure, ["size"]), e = ""; if (d && (0 <= d.indexOf("px") || 0 <= d.indexOf("pt") || 0 <= d.indexOf("em"))) e = 'style="font-size: ' + d + '"', d = ""; c = "<h3 " + e + ' class="ui header ' + _g(a.structure, ["color"]) + " " + d + ' ">' + c + "</h3>"; b && 0 < b.length ? c = "<table id='" + a.structure.id + "'><tr><td>" + b + "</td><td>" + c +
        "</td></tr></table>" : c.replace("h3 ", "h3 id='" + a.structure.id + "'"); return myqtt.pushAndReturn(a, c)
}; myqtt.unhandledDeclaration = function (a) { var b = a.structure.fullHTML; "div" == a.structure.name && (b = ""); return myqtt.pushAndReturn(a, b) }; myqtt.knownStylesToCopy = "height width background-color padding padding-top padding-right padding-left padding-bottom margin margin-top margin-right margin-left margin-bottom border border-top border-left border-right border-bottom".split(" ");
myqtt.camelCase = function (a) { return !a ? a : a.replace(/_/g, "-").replace(/(?:^\w|[A-Z]|\b\w)/g, function (a, c) { return 0 == c ? a.toLowerCase() : a.toUpperCase() }).replace(/\s+/g, "").replace(/-/g, "") }; myqtt.capitalCase = function (a) { if (!a) return a; a = a.split("-"); var b = [], c; for (c in a) c = a[c], b.push(myqtt.capitalize(c)); return b.join("-") };
myqtt.getStyle = function (a, b) { var c = null, c = a.structure ? a.structure : a, d = ""; a.structure.style && (d = a.structure.style + "; "); b || (b = {}); for (var e in myqtt.knownStylesToCopy) e = myqtt.knownStylesToCopy[e], e in c && (b[e] = c[e]); b["background-color"] && b["background-color"] in myqtt.colors && (b["background-color"] = myqtt.colors[b["background-color"]]); c = ""; for (e in b) c = c + " " + e + ": " + b[e] + "; "; d += c; return 0 < d.length ? " style='" + d + "' " : "" };
myqtt.startGrid = function (a) {
    a.columns = a.structure && a.structure.children ? myqtt.numToName(myqtt.filterComments(a.structure.children).length) : myqtt.numToName(0); var b = {}; a && (a.structure && "vertical-centered" in a.structure && a.structure["vertical-centered"]) && (b = { height: "100%" }); b = myqtt.getStyle(a, b); b = "<div id='" + a.structure.id + "' class='ui stackable " + _if(a.structure, "fluid", " fluid ") + _if(a.structure, "padded", " padded ") + _if(a.structure, "very-padded", " very padded ") + _if(a.structure, "vertical-centered",
        "middle aligned") + a.columns + " column grid " + _ifn(a.structure, "fluid", " container ") + "' " + b + ">"; return myqtt.pushAndReturn(a, b)
}; myqtt.filterComments = function (a) { var b = [], c; for (c in a) { var d = a[c]; d.isComment || b.push(d) } return b }; myqtt.translateColor = function (a, b) { return "background-color" == a && b in myqtt.colors ? myqtt.colors[b] : b };
myqtt.doc = function (a) { var b = $("body")[0]; a.params.isPreview && (b = $(a.params.domNode)[0]); $(b).attr("id", a.structure.id); if (a && a.structure) { $(b).css("background-color", ""); for (var c in myqtt.knownStylesToCopy) { var d = myqtt.knownStylesToCopy[c]; if (d in a.structure) { var e = myqtt.camelCase(d), f = a.structure[d], f = myqtt.translateColor(d, f); $(b).css(e, f) } } } return myqtt.pushAndReturn(a, "") };
myqtt.refreshButton = function (a) { myqtt.getStyle(a); var b = a.structure, c = "", c = b.icon ? "<button id='" + b.id + "' name='refresh-button' class='ui right labeled " + _g(b, ["color", "size"]) + " icon button'> <i class='right " + _g(b, "icon") + " icon'></i>Refresh</button>" : "<button id='" + b.id + "' name='refresh-button' class='ui button " + _g(b, ["color", "size"]) + "'>Refresh</button>"; return myqtt.pushAndReturn(a, c) };
myqtt.addButton = function (a) { var b = myqtt.ensureCommon(a.structure), c = myqtt.getStyle(a), d = _g(b, "label"); d || (d = "Label"); content = b.icon ? "<button id='" + b.id + "' class='ui right labeled " + _g(b, ["color", "size"]) + " icon button' " + c + "> <i class='" + _g(b, "icon") + " icon'></i>" + d + "</button>" : "<button id='" + b.id + "' class='ui button " + _g(b, ["color", "size"]) + "' " + c + " >" + d + "</button>"; return myqtt.pushAndReturn(a, content) };
myqtt.addToggle = function (a) { var b = myqtt.ensureCommon(a.structure), c = myqtt.getStyle(a), d = _g(b, "label"); d || (d = "Label"); var e = ""; b.parent && "column" == b.parent.name && "white" != b.parent.color && (e = " style='color: white !important; font-weight: bold' "); var f = "", g = ""; myqtt.isPresent(b, function (a) { a.checkbox("is checked") && (f = "checked", g = "checked=''") }); return myqtt.pushAndReturn(a, '<div id="' + b.id + '" class="ui toggle checkbox ' + f + '" ' + c + '>  <input type="checkbox" name="public" ' + g + ">  <label " + e + ">" + d + "</label></div>") };
myqtt.handleCheckStatusProcess = function (a, b, c, d) { b = ["access-attr", "attr-name"]; var e = c.parent, f = c.topic; if (f) for (var g in c.children) { var h = c.children[g], l = { topic: f, data: a.data }, m; for (m in b) { var n = b[m]; n in h && (l[n] = h[n]) } l = myqtt.getTopicValue(l); h.is && h.is == l && (myqtt.ruleHasSet(h) && d) && myqtt.handleCheckStatusLaunch(d, e, h.set, h, c) } }; myqtt.ruleHasSet = function (a) { var b = "set set-color set-label set-payload set-toast-icon set-topic".split(" "), c; for (c in b) if (b[c] in a) return !0; return !1 };
myqtt.handleCheckStatusLaunch = function (a, b, c, d, e) { setTimeout(function () { a(b, c, d, e) }, 10) }; myqtt.handleCheckStatus = function (a, b, c) { myqtt.handleCheckStatusProcess(a, b, c, function (a, b, c, g) { myqtt.setColor(a, c); myqtt.setLabel(a, c); myqtt.setTopic(a, c); myqtt.setPayload(a, c); myqtt.setIcon(a, c); switch (a.name) { case "toggle": b = myqtt.parseBoolean(b), $("#" + a.id).checkbox("is checked") != b && (b ? $("#" + a.id).checkbox("set checked", !0) : $("#" + a.id).checkbox("set unchecked", !0)) } }) };
myqtt.implementTransition = function (a, b, c) { c.transition && !c.transitionHandled && ($("#" + c.id).transition("hide").transition({ animation: c.transition, duration: "2s", onComplete: function () { c && "doc" == c.name && myqtt.isDrawCanceled($("#" + c.id)) && myqtt.cancelDrawStructure($("#" + c.id)) } }), c.transitionHandled = !0) }; myqtt.implementHref = function (a, b, c) { c.href && ($("#" + c.id).css("cursor", "pointer"), $("#" + c.id).click(function (a) { a.preventDefault(); window.location = c.href })) };
myqtt.addButtonHandle = function (a, b, c) { $("#" + c.id, b).click(function (a) { a.preventDefault(); c.topic && (c.onPublished = function () { myqtt.trackPanelTopicsStatus.intervalPeriod = 1E3; myqtt.trackPanelTopicsStatus.restart() }, myqtt.publishMessage(c)) }) };
myqtt.addToggleHandle = function (a, b, c) {
    $("#" + c.id, b).click(function (a) {
        setTimeout(function () {
            if (c["on-topic"] || c["off-topic"]) $("#" + c.id).checkbox("is checked") ? (c.topic = c["on-topic"], c.payload = c["on-payload"], c.qos = c["on-qos"], c["on-toast-title"] && (c.toastTitle = c["on-toast-title"]), c["on-toast-message"] && (c.toastMessage = c["on-toast-message"])) : (c.topic = c["off-topic"], c.payload = c["off-payload"], c.qos = c["off-qos"], c["off-toast-title"] && (c.toastTitle = c["off-toast-title"]), c["off-toast-message"] && (c.toastMessage =
                c["off-toast-message"])), myqtt.publishMessage(c)
        }, 1)
    })
};
myqtt.publishMessage = function (a) {
    var b = "topic payload qos retain dup domainName disableToast disable-toast toastDuration toast-duration toastIcon toast-icon toastTitle toast-title toastMessage toast-message".split(" "), c = {}, d; for (d in b) { var e = b[d]; e in a && (c[e] = a[e]) } var f = a; a = c; a.payload || (a.payload = ""); a.payload = myqtt.Base64.encode(a.payload); ![0, 1, 2].includes(a.qos) && ![0, 1, 2].includes(Number(a.qos)) && (a.qos = 0); a.qos = Number(a.qos); a.retain || (a.retain = !1); a.dup || (a.dup = !1); a.disableToast || (a.disableToast =
        !1); a["disable-toast"] && (a.disableToast = !0); a.disableToast || (myqtt.trackPanelTopicsStatus.stop(), b = 1400, a["toast-duration"] && (b = a["toast-duration"]), a.toastDuration && (b = a.toastDuration), c = "info circle blue big", a["toast-icon"] && (c = a["toast-icon"]), a.toastIcon && (c = a.toastIcon), d = "Message sent", a["toast-title"] && (d = a["toast-title"]), a.toastTitle && (d = a.toastTitle), e = "Message sent to: <br>" + a.topic, a["toast-message"] && (e = a["toast-message"]), a.toastMessage && (e = a.toastMessage), $("body").toast({
            title: d,
            showIcon: c, message: e, showProgress: "bottom", classProgress: "blue", displayTime: b, progressUp: !0
        }), setTimeout(function () { myqtt.trackPanelTopicsStatus.restart() }, b + 1)); myqtt.panelShow && (myqtt.panelTag && null == myqtt.cookieGet("tokenId")) && (a.panelTag = myqtt.panelTag); b = "/publish"; a.domainName && a.domainName != myqtt.userInfo.domainName && (b = "/publish-to", a.skipMatching = !1); a.domainName && a.domainName == myqtt.userInfo.domainName && delete a.domainName; myqtt.post({
            url: b, data: a, success: function (a) { if (f.onPublished) f.onPublished() },
            error: function (a) { myqtt.showError({ title: "Failed to PUBLISH", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
        })
}; myqtt.startColumn = function (a) { if ("grid" == a.structure.parent.name) { var b = myqtt.getStyle(a), b = '<div id="' + a.structure.id + '" class="center aligned column ' + _g(a.structure, "color") + ' " ' + b + ">", c = a.structure; 0 == c.children.length && 0 < c.innerHTML.length && (b = b + "<div id='" + a.structure.id + "'  class='ui basic segment'>" + c.innerHTML + "</div>"); return myqtt.pushAndReturn(a, b) } };
myqtt.pushAndReturn = function (a, b) { a.push && a.push.push(b); return b }; myqtt.numToName = function (a) { switch (a) { case 0: return "zero"; case 1: return "one"; case 2: return "two"; case 3: return "three"; case 4: return "four"; case 5: return "five"; case 6: return "six"; case 7: return "seven"; case 8: return "eight"; case 9: return "nine"; case 10: return "ten"; case 11: return "eleven"; case 12: return "twelve"; default: return "" } };
myqtt.runProtected = function (a, b) { a.structure && (a.structure.rebuild = function () { return b({ structure: a.structure }) }); try { b(a) } catch (c) { return myqtt.pushAndReturn(a, "<div class='ui message' style='text-align: left;'><div class='header'>Failed to draw declaration</div><p>drawStructure failed while processing: <br><strong> " + a.structure.fullHTML.replace(/</g, "&lt;") + "</strong>.<br> Full error was: " + c.message + "</p><p>Detailed error: " + c.stack.toString().replace(/ at/g, "<br> at") + "</div>") } };
myqtt.refreshButtonHandle = function (a, b, c) { $("[name='refresh-button']", b).click(function (b) { b.preventDefault(); a.isPreview ? myqtt.triggerRunPreviewPanel() : window.location = location.href }) }; myqtt.sizes = "tiny mini small medium large big huge massive".split(" "); myqtt.colors = { red: "#d01919", orange: "#f2711c", yellow: "#fbbd08", olive: "#b5cc18", green: "#21ba45", teal: "#00b5ad", blue: "#2185d0", violet: "#6435c9", purple: "#a333c8", pink: "#e03997", brown: "#a5673f", grey: "#767676", black: "#1b1c1d", white: "#ffffff" };
myqtt.removeColors = function (a) { for (var b in myqtt.colors) $("#" + a.id).removeClass(b) }; myqtt.setColor = function (a, b) { "set-color" in b && (myqtt.removeColors(a), a.color = b["set-color"], $("#" + a.id).addClass(b["set-color"])) }; myqtt.setLabel = function (a, b) { if ("set-label" in b) { a.label = b["set-label"]; var c = $("#" + a.id); if (0 < c.length) switch (c[0].nodeName.toLowerCase()) { case "button": c[0].innerHTML = a.label } } };
myqtt.removeIcon = function (a) { if (a.icon) { var b = a.icon.split(" "), c; for (c in b) { var d = b[c]; d && (d = d.trim()); "icon" != d && d && $("#" + a.id + "i").removeClass(d) } } }; myqtt.setIcon = function (a, b) { "set-icon" in b && (myqtt.removeIcon(a), a.icon = b["set-icon"], myqtt.rebuildStructure(a)) }; myqtt.rebuildStructure = function (a) { $("#" + a.id).replaceWith(a.rebuild); if (a.onContentInstalled) for (var b in a.onContentInstalled) { var c = a.onContentInstalled[b]; c.method && c.data && c.method(c.params, c.params.domNode, c.data) } };
myqtt.setPayload = function (a, b) { "set-payload" in b && (a.payload = b["set-payload"]) }; myqtt.setTopic = function (a, b) { "set-topic" in b && (a.topic = b["set-topic"]) };
myqtt.drawStructure = function (a, b, c) {
    a.id || (a.id = "panel-item-" + myqtt.drawStructure.id, myqtt.drawStructure.id += 1); var d = { structure: a, params: b, push: c }; switch (a.name) {
        case "doc": myqtt.runProtected(d, myqtt.doc); break; case "header": d.icon = a.icon; d.content = a.innerHTML; myqtt.runProtected(d, myqtt.header); break; case "stat": myqtt.runProtected(d, myqtt.addStat); break; case "image": myqtt.runProtected(d, myqtt.addImage); break; case "message": myqtt.runProtected(d, myqtt.addMessage); break; case "icon": myqtt.runProtected(d,
            myqtt.addIcon); break; case "button": myqtt.runProtected(d, myqtt.addButton); break; case "toggle": myqtt.runProtected(d, myqtt.addToggle); break; case "last-update": myqtt.runProtected(d, myqtt.lastUpdate); break; case "refresh-button": myqtt.runProtected(d, myqtt.refreshButton); break; case "grid": myqtt.runProtected(d, myqtt.startGrid); break; case "column": myqtt.runProtected(d, myqtt.startColumn); break; default: myqtt.unhandledDeclaration({ structure: a, params: b, push: c })
    }for (var e in a.children) myqtt.drawStructure(a.children[e],
        b, c); switch (a.name) {
            case "doc": c.push("\x3c!-- end body/doc id=" + a.id + " --\x3e"); break; case "grid": c.push("</div>\x3c!-- end grid id=" + a.id + " --\x3e"); break; case "column": c.push("</div>\x3c!-- end column id=" + a.id + " --\x3e"); break; case "refresh-button": myqtt.registerOnContentInstalled(b, myqtt.refreshButtonHandle, a); break; case "button": myqtt.registerOnContentInstalled(b, myqtt.addButtonHandle, a); break; case "toggle": myqtt.registerOnContentInstalled(b, myqtt.addToggleHandle, a); break; case "check-status": myqtt.registerOnContentInstalled(b,
                myqtt.handleCheckStatus, a)
        }a.transition && myqtt.registerOnContentInstalled(b, myqtt.implementTransition, a); a.href && a.id && myqtt.registerOnContentInstalled(b, myqtt.implementHref, a)
}; myqtt.drawStructure.id = 1;
myqtt.parseXmlStructure = function (a) { a.onContentInstalled = []; for (var b = 0; b < a.children.length; b++)myqtt.parseXmlStructure(a.children[b]); for (var c in a.attributes) if (b = a.attributes[c], c in myqtt.parseXmlStructure.knownAttributes) switch (myqtt.parseXmlStructure.knownAttributes[c]) { case "int": a[c] = Number(b); break; case "boolean": a[c] = myqtt.parseBoolean(b); break; default: a[c] = b } };
myqtt.parseXmlStructure.knownAttributes = {
    header: "string", "sub-header": "string", prefix: "string", suffix: "string", topic: "string", "off-topic": "string", "off-payload": "string", "on-payload": "string", "on-topic": "string", payload: "string", qos: "int", "off-qos": "int", "on-qos": "int", retain: "boolean", dup: "boolean", "access-attr": "string", "attr-name": "string", "date-format": "string", src: "string", size: "string", height: "string", width: "string", icon: "string", label: "string", value: "string", color: "string", "icon-color": "string",
    "icon-size": "string", "icon-rotation": "string", "icon-border": "string", "icon-inverted": "string", "background-color": "string", inverted: "boolean", is: "string", set: "string", "set-label": "string", "set-color": "string", "set-payload": "string", "set-topic": "string", "set-toast-icon": "string", "set-icon": "string", "toast-duration": "int", "disable-toast": "boolean", "toast-icon": "string", "toast-title": "string", "toast-message": "string", "on-toast-message": "string", "on-toast-title": "string", "off-toast-message": "string", "off-toast-title": "string",
    padding: "string", "padding-top": "string", "padding-bottom": "string", "padding-right": "string", "padding-left": "string", padded: "boolean", "very-padded": "boolean", fluid: "boolean", margin: "string", "margin-top": "string", "margin-bottom": "string", "margin-right": "string", "margin-left": "string", border: "string", "border-left": "string", "border-right": "string", "border-top": "string", "border-bottom": "string", style: "string", "vertical-centered": "boolean", centered: "boolean", "warning-threshold": "int", "warning-color": "string",
    "warning-above-value": "int", "critical-threshold": "int", "critical-color": "string", "critical-above-value": "int", href: "string", transition: "string"
}; myqtt.parseXmlStructure.knownNodes = ["header", "stat", "image", "message"]; myqtt.parseBoolean = function (a) { switch (a) { case !0: case "yes": case "true": case "on": case "1": case "active": case "enabled": case "checked": return !0; default: return !1 } };
myqtt.parseAndSet = function (a) { a.content = myqtt._applyStaticDataMappings(a, a.content); var b = myqtt.parseXml(a.content); if (b.error) { var c; c = b.error ? b.errorFound.join("\n") : null; a.content || (a.content = ""); $(a.domNode).html(c + "<br>" + a.content.replace(/</g, "&lt;").replace(/\\n/g, "<br>")); return null } myqtt.parseXmlStructure(b); if (a.justParse) return b; myqtt.getPanelData(a, function () { myqtt.internalDrawParsedStructure(a, b) }); a.saveLastStructure && (myqtt.lastStructure = b); return b };
myqtt.getPanelData = function (a, b) {
    a.data = {}; var c = myqtt.getPanelTopicsByContent(a.content); if (0 == c.length) b && b(); else {
        var d = "", e = {}; if (a.isPreview && 0 < c.length || !a.panelTag) { if (d = "/panel/get-data/by-topics", e.topics = c, e.domainName = a.domainName, e.panelId = a.panelId, !e.domainName || !e.panelId) return } else d = "/panel/get-data/by-tag", e.panelTag = a.panelTag; myqtt.post({
            url: d, data: e, success: function (c) {
                var d = {}, e; for (e in c.data) {
                    var l = c.data[e]; d[l.topic] = l; if (l.payload && 0 < l.payload.length && (myqtt.isJson(l.payload) ||
                        myqtt.isJson(l.payload.replace(/'/g, '"')))) { var m = l.payload; 0 <= m.indexOf("{'") && (m = m.replace(/'/g, '"')); try { var n = JSON.parse(m); l.payload = n } catch (s) { l.jsonParseError = s } }
                } a.data = d; a.generated = c.generated; a.received = c.received; b && (b(), myqtt.trackPanelTopicsStatus(a, b))
            }, error: function (a) {
                var b = "Received error response: " + a.statusText + ".<br>" + a.responseText; a.responseText.indexOf("has no panels support") && (b = "Received error response: " + a.statusText + ". Current domain has no panels support. Please upgrade your subscription to include Panels support.");
                var c = "Failed to get panel content: Operation failed"; a.responseText.indexOf("has no panels support") && (c = "Your MyQttHub has no panels support: please upgrade to continue"); myqtt.showError({ title: c, content: b, onClose: function () { window.location = location.href }, buttons: [{ label: "Show me upgrade options", icon: "angle double up blue", preped: !0, handler: function () { window.location = "/upgrade" } }] })
            }
        })
    }
};
myqtt.trackPanelTopicsStatus = function (a, b) {
    if (a) {
        if (!a.panelTag && (myqtt.trackPanelTopicsStatus.data && (myqtt.trackPanelTopicsStatus.data.params && myqtt.trackPanelTopicsStatus.data.params.panelTag) && (a.panelTag = myqtt.trackPanelTopicsStatus.data.params.panelTag), !a.panelTag)) { myqtt.showError({ title: "No panelTag received to trace panel status", content: "Malformed url or no panelTag found (0x90003351)" }); return } var c = a.panelTag; myqtt.trackPanelTopicsStatus.data = { params: a, onDataUpdated: b }; myqtt.trackPanelTopicsStatus.interval &&
            clearInterval(myqtt.trackPanelTopicsStatus.interval); myqtt.trackPanelTopicsStatus.interval = setInterval(function () {
                myqtt.post({
                    url: "/panel/get-data/check-updates", data: { panelTag: c }, success: function (c) {
                        1E4 > myqtt.trackPanelTopicsStatus.intervalPeriod && (myqtt.trackPanelTopicsStatus.intervalPeriod += 100); if (c && c.lastUpdate && c.lastUpdate > myqtt.trackPanelTopicsStatus.lastUpdate) {
                            myqtt.trackPanelTopicsStatus.intervalPeriod = 1E3; var e = -1 == myqtt.trackPanelTopicsStatus.lastUpdate; myqtt.trackPanelTopicsStatus.lastUpdate =
                                c.lastUpdate; e || myqtt.getPanelData(a, b)
                        } myqtt.trackPanelTopicsStatus(a, b)
                    }, error: function (a) { }
                })
            }, myqtt.trackPanelTopicsStatus.intervalPeriod)
    } else myqtt.showError({ title: "No params received to trace panel status", content: "Malformed url or no params found (0x9000334)" })
}; myqtt.trackPanelTopicsStatus.restart = function () { var a = myqtt.trackPanelTopicsStatus.data; myqtt.trackPanelTopicsStatus.data = null; a && (a.params && a.onDataUpdated) && myqtt.trackPanelTopicsStatus(a.params, a.onDataUpdated) };
myqtt.trackPanelTopicsStatus.stop = function () { clearInterval(myqtt.trackPanelTopicsStatus.interval); myqtt.trackPanelTopicsStatus.interval = null }; myqtt.trackPanelTopicsStatus.interval = null; myqtt.trackPanelTopicsStatus.lastUpdate = -1; myqtt.trackPanelTopicsStatus.data = {}; myqtt.trackPanelTopicsStatus.intervalPeriod = 1E3;
myqtt.registerOnContentInstalled = function (a, b, c) { a.onContentInstalled || (a.onContentInstalled = []); a.onContentInstalled.push({ method: b, data: c }); c.onContentInstalled || (c.onContentInstalled = []); c.onContentInstalled.push({ method: b, data: c, params: a }) }; myqtt.isDrawCanceled = function (a) { return (a = $(a)) && 0 < a.length && a[0].cancelDraw }; myqtt.enableDraw = function (a) { (a = $(a)) && 0 < a.length && delete a[0].cancelDraw };
myqtt.cancelDrawStructure = function (a) { if ((a = $(a)) && 0 < a.length) a[0].cancelDraw = !0, a.empty(), a.prop("style", null), a.prop("style", null), a.removeClass("visible") };
myqtt.internalDrawParsedStructure = function (a, b) {
    var c = []; myqtt.drawStructure(b, a, c); if (a.domNode) {
        c = c.join("\n"); c = myqtt._applyStaticDataMappings(a, c); myqtt.enableDraw(a.domNode); $(a.domNode).html(c); $(".progress", a.domNode).progress({ autoSuccess: !1 }); $(".progress", a.domNode).progress("increment"); $("[id]").each(function (a, b) { $(b).attr("id").includes("panel-item") && $(b).addClass("myqttPanelItem") }); for (var d in a.onContentInstalled) c = a.onContentInstalled[d], c.method(a, a.domNode, c.data); a.onContentInstalled =
            null
    }
};
myqtt.showStatsAndQuota = function (a, b, c, d) {
    myqtt.post({
        url: "/domain/stats", data: { domain: a }, success: function (b) {
            var c = myqtt.proposeUpgrade(b), g = ""; null != c && (g = "<grid fluid='yes' padding-bottom='20px'>  <column>    <header margin-top='30px' icon='microchip'>" + c.hint + " (95%) reached, want to upgrade your plan?</header>    <button color='blue' icon='angle double up' label='Upgrade your plan' href='/upgrade' transition='fade up'></button>  </column></grid>"); c = "<doc>" + g + "<header icon='envelope'>Message stats and limits (@generated@)</header><grid>  <stat label='Messages last minute' value='@msgs-last-minute@/@max-msgs-minute@' size='mini' icon='envelope' color='blue' />  <stat label='Messages last hour' value='@msgs-last-hour@/@max-msgs-hour@' size='mini' icon='envelope' />  <stat label='Messages today' value='@msgs-today@/@max-msgs-day@' size='mini' icon='envelope' />  <stat label='Discarded today' value='@msgs-discarded-today@' size='mini' icon='envelope' color='blue' warning-above-value='-1' warning-color='red'  />  <stat label='Month messages' value='@msgs-month@/@max-msgs-month@' size='mini' icon='envelope' /></grid><header icon='hdd'>Storage quota and status</header><grid>  <stat label='Total Quota' value='@total-quota-used@/@max-storage-quota@' size='mini' icon='hdd outline' />  <stat label='Connection history' value='@conn-history-quota@' size='mini' icon='hdd outline' href='@connection-history-url@' />  <stat label='Stashed messages' value='@stashed-msgs-quota@' size='mini' icon='hdd outline' href='@stashed-messages-url@' />  <stat label='Unconfirmed messages' value='@unconfirmed-msgs-quota@' size='mini' icon='comment alternate' href='@unconfirmed-messages-url@' /></grid><header icon='microchip'>Connected devices, limits and offline sessions</header><grid>  <stat label='Connected devices' value='@connected-devices@/@max-connected-devices@' size='mini' icon='microchip' href='/connected/devices?filterDomain=" + a +
                "'  />  <stat label='Offline session' value='@offline-sessions@' size='mini' icon='microchip' />  <stat label='Devices' value='@devices@/@max-devices@' size='mini' icon='microchip' href='/devices/" + a + "' />  <stat label='Domain subs.' value='@domain-subscriptions@/@max-domain-subscriptions@' size='mini' icon='block layout' href='/domain/subscriptions/" + a + "' />  <stat label='Device subs.' value='@max-device-subscriptions@' size='mini' icon='block layout' /></grid></doc>"; myqtt.extractParams(); b = {
                    generated: "<a class='ui horizontal label small'>Stats generated at " +
                        myqtt.stampToDate(b.generated) + ", quota storage took: " + b.storageStats.quotaCalculationTime + "ms</a>", "msgs-last-minute": b.msgStats.lastMinute, "max-msgs-minute": b.msgStats.maxMinute, "msgs-last-hour": b.msgStats.lastHour, "max-msgs-hour": b.msgStats.maxHour, "msgs-today": b.msgStats.today, "max-msgs-day": b.msgStats.maxDay, "msgs-discarded-today": b.msgStats.discardedToday, "msgs-month": b.msgStats.currentMonth, "max-msgs-month": b.msgStats.maxMonth, "connection-history-url": "/domain/view/" + a + "?tabactive=connection_history",
                    "unconfirmed-messages-url": "/domain/view/" + a + "?tabactive=unconfirmed_messages", "devices-url": "/devices/" + a, "stashed-messages-url": "/stashes/" + a, "total-quota-used": myqtt.sizeToHuman(b.storageStats.totalInUse, "B"), "max-storage-quota": myqtt.sizeToHuman(b.storageStats.maxQuota, "MB"), "conn-history-quota": myqtt.sizeToHuman(b.storageStats.connectionHistoryQuota, "B"), "stashed-msgs-quota": myqtt.sizeToHuman(b.storageStats.stashedMessagesQuota, "B"), "unconfirmed-msgs-quota": myqtt.sizeToHuman(b.storageStats.unconfirmedMessagesQuota,
                        "B"), "connected-devices": b.deviceStats.connected, "max-connected-devices": b.deviceStats.maxConnected, "offline-sessions": b.deviceStats.offlineSessions, devices: b.deviceStats.devices, "max-devices": b.deviceStats.max, "domain-subscriptions": b.subscribeStats.domainSubscriptions, "max-domain-subscriptions": b.subscribeStats.maxDomainSubscriptions, "max-device-subscriptions": b.subscribeStats.maxDeviceSubscriptions
                }; myqtt.parseAndSet({ content: c, mapping: b, domNode: d })
        }, error: function (b) {
            myqtt.showErrorInPanel("Failed to get stats for " +
                a, "Service [" + b.url + "] reported error: " + b.statusText + ".<br>" + b.responseText, d)
        }
    })
};
myqtt.proposeUpgrade = function (a) {
    a.storageStats || (a.storageStats = {}); a.deviceStats || (a.deviceStats = {}); a.subscribeStats || (a.subscribeStats = {}); a = [{ use: a.msgStats.lastMinute, limit: a.msgStats.maxMinute, hint: "Max messages by minute", hint2: "Your HUB cannot receive and forward more MQTT messages until current minute has passed. This affects panels too. <a href='/upgrade'><i class='star green icon'></i>Maybe its time for an upgrade?</a><br><a href='#' name='hub-restart'>You can also restart your HUB</a>. That will reset your minute quota (keeping day quota)." }, {
        use: a.msgStats.lastHour,
        limit: a.msgStats.maxHour, hint: "Max messages by hour", hint2: "Your HUB cannot receive and forward more MQTT messages until current hour has passed. This affects panels too. <a href='/upgrade'><i class='star green icon'></i>Maybe its time for an upgrade?</a><br><a href='#' name='hub-restart'>You can also restart your HUB</a>. That will reset your minute quota (keeping day quota)."
    }, { use: a.msgStats.today, limit: a.msgStats.maxDay, hint: "Max messages by day", hint2: "Your HUB cannot receive and forward more MQTT messages until tomorrow. This affects panels too. <a href='/upgrade'><i class='star green icon'></i>Maybe its time for an upgrade?</a>" },
    { use: a.msgStats.currentMonth, limit: a.msgStats.maxMonth, hint: "Max messages by month", hint2: "Your HUB cannot receive and forward more MQTT messages until next month. This affects panels too. <a href='/upgrade'><i class='star green icon'></i>Maybe its time for an upgrade?</a>" }, { use: a.storageStats.totalInUse, limit: 1048576 * a.storageStats.maxQuota, hint: "Max storage", hint2: "Your HUB cannot store more messages for stashes and unconfirmed (QoS1 and QoS2)." }, {
        use: a.deviceStats.connected, limit: a.deviceStats.maxConnected,
        hint: "Max device connected", hint2: "You HUB cannot receive more connections."
    }, { use: a.deviceStats.devices, limit: a.deviceStats.max, hint: "Max devices", hint2: "You HUB cannot create more MQTT devices." }, { use: a.subscribeStats.domainSubscriptions, limit: a.subscribeStats.maxDomainSubscriptions, hint: "Max domain subscriptions", hint2: "You HUB cannot receive more SUBSCRIBE request for your devices." }]; for (var b in a) { var c = a[b]; if (0 < c.limit && c.use >= 0.95 * c.limit) return c } return null
};
myqtt.showConnectedDevices = function (a) {
    a.html("<div class='ui text loader centered active top150'>Loading connected devices</div>"); myqtt.post({
        url: "/devices/connected", success: function (b) { myqtt.showConnectedDevicesComplete(a, b) }, error: function (b) {
            myqtt.showErrorInPanel("Failed to load connected devices", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<button class='ui primary button'>Retry loading connected devices</button>"); $("button.primary").click(function () {
                window.location =
                "/connected/devices"
            })
        }
    })
};
myqtt.showConnectedDevicesComplete = function (a, b) {
    var c = [], d = "in your domain"; myqtt.userInfo && myqtt.userInfo.domainName && (d = myqtt.userInfo.domainName); c.push("<h1 class='ui header'>Devices connected</h1>"); c.push("<a href='" + location.href + "'><button class='ui right labeled icon button primary'><i class='right refresh icon'></i>Refresh</button></a>"); c.push("<button class='ui right labeled icon button' name='closeconnections_1785'><i class='right unlink icon'></i>Close connections</button></a>"); var e =
        myqtt.getUrlParam("filterDomain"), f = myqtt.getUrlParam("filterDevice"); e && 0 < e.length && c.push(f && 0 < f.length ? "<button class='ui right labeled icon button' name='clear_filter_09344'><i class='right times icon'></i>Clear filter: show " + f + "+" + e + " connections</button></a>" : "<button class='ui right labeled icon button' name='clear_filter_09344'><i class='right times icon'></i>Clear filter: show " + e + " connections</button></a>"); c.push("<table class='ui celled striped sortable table'>"); c.push("<thead><tr><th colspan='11' class='no-sort'>Devices connected: <span name='devices-connected-count'></span> </th></tr>");
    c.push("<tr><th>domainName</th><th><i class='building outline icon'></i>ClientId</th><th>userName</th><th class='collapsing single line'>Clean Session</th><th class='collapsing single line'>Trace Bytes</th><th>Remote Address</th><th class='collapsing single line'>Protocol</th><th class='collapsing single line'>Bridge</th><th>Connected at</th><th class='collapsing single line'>Num. topics</th><th class='collapsing no-sort'>Actions</th></tr></thead>"); c.push("<tbody>"); var g = 0, h; for (h in b) {
        var l = b[h],
        d = l.domainName, m = l.clientId; if (!e || !(0 < e.length && e != d)) if (!f || !(0 < f.length && f != m)) {
            g++; var n = null == l.userName ? "" : l.userName, s = l.cleanSession, s = s ? "<a class='ui horizontal label small single line'>Clean Session</a>" : "<a class='ui green horizontal label small single line'>Keep session</a>", r = l.traceBytes, r = r ? "<a class='ui green horizontal label small single line'>Trace On</a>" : "", q = l.remoteAddress, p = l.protocol, t = l.isBridge, t = t ? "<a class='ui horizontal green label small single line'>mqtt bridge</a>" :
                "", u = l.bootStrapped, u = u ? "<a class='ui horizontal violet label small single line'>bootstrapped</a>" : "", x = l.numTopics, l = myqtt.stampToDate(l.connectedAt), v = "<a class='ui horizontal label' href='/connected/devices?filterDomain=" + d + "'>></a>"; e && 0 < e.length && (v = ""); var w = "<a class='ui horizontal label' href='/connected/devices?filterDomain=" + d + "&filterDevice=" + m + "'>></a>"; f && 0 < f.length && (w = ""); var y = "<button class='ui icon mini button' name='closeconnection_787' domain='" + d + "' clientId='" + m + "' data-tooltip='Close connection'><i class='unlink icon'></i></button>",
                    d = "<tr><td class='single line'>" + _domain(d) + v + "</td><td class='single line'>" + _device(d, m) + " " + u + w + "</td><td>" + n + "</td><td class='collapsing'>" + s + "</td><td class='collapsing'>" + r + "</td><td>" + _ip(q) + "</td><td class='collapsing single line'>" + p + "</td><td class='collapsing single line'>" + t + "</td><td>" + l + "</td><td class='collapsing'>" + x + "</td><td>" + y + "</td></tr>"; c.push(d)
        }
    } c.push("</tbody></table>"); a.html(c.join("\n")); $("table").tablesort(); g == b.length ? $("[name=devices-connected-count]").html(String(b.length)) :
        $("[name=devices-connected-count]").html(String(g) + " <span class='ui grey text'>(filtered)</span> "); $("[name=closeconnection_787]", a).click(function (b) { b = b.target; "I" == b.nodeName && (b = b.parentNode); myqtt.closeConnection($(b).attr("domain"), $(b).attr("clientId"), a, function () { window.location = location.href }) }); $("[name=closeconnections_1785]", a).click(function (c) { myqtt.closeConnections(b, a) }); $("[name=clear_filter_09344]", a).click(function (a) { window.location = "/connected/devices" }); myqtt.resolveIps()
};
myqtt.closeConnections = function (a, b) {
    myqtt.closeConnections.lastSelection = void 0; var c = [], d = [], e; for (e in a) { var f = a[e]; -1 == c.indexOf(f.domainName) && c.push(f.domainName); f = f.clientId; -1 == d.indexOf(f) && d.push(f) } var g = $("[name=close_connections_kljsdf214]").modal({
        onDeny: function (a) { }, onApprove: function (b) {
            if (myqtt.closeConnections.lastSelection) {
                var c, d, e; 1 == myqtt.closeConnections.lastSelection && (c = $("[name=domain_combobox_lkjsdf32] [name=domain]").val()); 2 == myqtt.closeConnections.lastSelection &&
                    (d = $("[name=clientId_combobox_lkjsdf32] [name=client-id]").val()); 3 == myqtt.closeConnections.lastSelection && (e = !0); for (var f in a) b = a[f], c && b.domainName == c ? myqtt.closeConnection(b.domainName, b.clientId, null, null, !0) : d && b.clientId == d ? myqtt.closeConnection(b.domainName, b.clientId, null, null, !0) : e && myqtt.closeConnection(b.domainName, b.clientId, null, null, !0); location = location.href
            } else myqtt.showError({ title: "No option was selected", content: "Please select an option" })
        }
    }).modal("show"); myqtt.combobox(g);
    $("[name=close_by_domain]", g).click(function (a) {
        $(".buttons .button", g).removeClass("positive"); $("[name=close_by_domain]", g).addClass("positive"); a.preventDefault(); $(".selection-area").addClass("myhidden"); $("[name=domain_combobox_lkjsdf32]").removeClass("myhidden"); $("#confirm_close_connection_lkjsfkj").removeClass("disabled"); a = myqtt.loadComboBoxFromData(b, "domain", "Domain", "Select domain", c); $("[name=domain_combobox_lkjsdf32] .selection-content").html(a); myqtt.combobox($(" [name=domain_combobox_lkjsdf32] .selection-content"));
        myqtt.closeConnections.lastSelection = 1
    }); $("[name=close_by_client_id]", g).click(function (a) {
        $(".buttons .button", g).removeClass("positive"); $("[name=close_by_client_id]", g).addClass("positive"); a.preventDefault(); $(".selection-area").addClass("myhidden"); $("[name=clientId_combobox_lkjsdf32]").removeClass("myhidden"); $("#confirm_close_connection_lkjsfkj").removeClass("disabled"); a = myqtt.loadComboBoxFromData(b, "client-id", "Client-Id", "Select client-Id", d); $("[name=clientId_combobox_lkjsdf32] .selection-content").html(a);
        myqtt.combobox($("[name=clientId_combobox_lkjsdf32] .selection-content")); myqtt.closeConnections.lastSelection = 2
    }); $("[name=close_all_connections]", g).click(function (a) { $(".buttons .button", g).removeClass("positive"); $("[name=close_all_connections]", g).addClass("positive"); a.preventDefault(); myqtt.closeConnections.lastSelection = 3 })
};
myqtt.closeConnection = function (a, b, c, d, e) { myqtt.post({ url: "/device/disconnect", data: { domainName: a, clientId: b }, success: function (a) { d && d() }, error: function (a) { e || myqtt.showError({ title: "Failed to disconnect device", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.showWillInspector = function (a) { var b = myqtt.getUrlPathItem(2); myqtt.addLoading("Loading will inspector for HUB (" + b + ")"); myqtt.post({ url: "/will/inspector", data: { domainName: b }, success: function (c) { myqtt.removeLoading(); myqtt.showWillInspectorComplete(b, c, a) }, error: function (b) { myqtt.removeLoading(); myqtt.showErrorInPanel("Failed to load will messages", "Received error response: " + b.statusText + ".<br>" + b.responseText, a) } }) };
myqtt.showWillInspectorComplete = function (a, b, c) {
    var d = [], e = "<h1 class='ui header'><i class='exclamation icon'></i> Devices with will configured for (" + _domain(a) + ") </h1>"; d.push(e); if (0 == b.length) d.push("<p>Found no connected device with LWT configured at this point.</p>"), $(c).html(d.join("\n")); else {
        d.push("<table class='ui celled sortable striped table'>"); d.push("<thead><tr><th colspan='10' class='no-sort'><i class='exclamation alternate icon'></i> Devices with LWT configured <span class='ui label'> " +
            b.length + " </span></th></tr><tr><th class='right aligned collapsing'></i> Client ID</th><th class='right aligned'>Will Topic</th><th class='right aligned collapsing'>Will QoS</th><th class='right aligned collapsing'>Will Retain</th><th class='right aligned collapsing'>Username</th><th class='right aligned collapsing'>Remote Addr</th><th class='right aligned collapsing'>Protocol</th><th class='right aligned collapsing'>Bridge</th><th class='right aligned collapsing'>Boostrap</th><th class='right aligned '>Will Msg</th></tr></thead><tbody>");
        b = b.sort(function (a, b) { return a.numMessages + a.totalSize > b.numMessages + b.totalSize ? -1 : 1 }); for (var f in b) {
            var g = b[f], e = g.clientId, h = g.willTopic, l = g.willQos, m = g.willRetain, n = g.userName, s = g.remoteAddr, r = g.protocol, q = g.isBridge, p = g.bootStrapped, g = g.willMsg, m = m ? "<a class='ui teal horizontal label small'>retain</a>" : "", q = q ? "<a class='ui horizontal green label small single line'>mqtt bridge</a>" : "", p = p ? "<a class='ui horizontal violet label small single line'>bootstrapped</a>" : "", e = "<tr><td class='clickable right aligned collapsing' iter='" +
                f + "'>" + _device(a, e) + "</td><td class='right aligned collapsing'>" + h + "</td><td class='right aligned collapsing'>" + l + "</td><td class='right aligned collapsing'>" + m + "</td><td class='right aligned collapsing'>" + n + "</td><td class='right aligned collapsing'>" + s + "</td><td class='right aligned collapsing'>" + r + "</td><td class='right aligned collapsing'>" + q + "</td><td class='right aligned collapsing'>" + p + "</td><td class='right aligned'>" + g + "</td></tr>"; d.push(e)
        } d.push("</tbody></table>"); $(c).html(d.join("\n"));
        $("table").tablesort()
    }
}; myqtt.showGlobalUnconfirmedMessages = function (a) { myqtt.addLoading("Getting global unconfirmed messages scan, please wait..."); myqtt.post({ url: "/get/global/unconfirmed-messages", success: function (b) { myqtt.showGlobalUnconfirmedMessagesComplete(a, b); myqtt.removeLoading() }, error: function (b) { myqtt.removeLoading(); myqtt.showErrorInPanel("Failed to load unconfirmed messages", "Received error response: " + b.statusText + ".<br>" + b.responseText, a) } }) };
myqtt.showGlobalUnconfirmedMessagesComplete = function (a, b) {
    var c = []; c.push("<h1 class='ui header'><i class='comment alternate icon'></i> Platform unconfirmed messages grouped by domainName+clientId </h1>"); c.push("<table class='ui celled sortable striped table'>"); c.push("<thead><tr><th colspan='5' class='no-sort'><i class='comment alternate icon'></i> Group of unconfirmed messages <span class='ui label'> " + b.length + " </span></th></tr><tr><th class='right aligned collapsing'></i> Domain name</th><th class='right aligned'>Client ID</th><th class='collapsing' >Total Messages</th><th class='right aligned collapsing'>Total size</th><th class='right aligned collapsing no-sort'>Actions</th></tr></thead><tbody>");
    var d = b.sort(function (a, b) { return a.numMessages + a.totalSize > b.numMessages + b.totalSize ? -1 : 1 }), e; for (e in d) {
        var f = d[e], g = f.domainName, h = f.clientId, l = f.numMessages, f = f.totalSize, m = "<button class='ui icon mini button' name='remove-unconfirmed-messages' domain-name='" + g + "' client-id='" + h + "' data-tooltip='Remove unconfirmed messages'><i class='remove icon'></i></button>", g = "<tr><td class='clickable right aligned collapsing' iter='" + e + "'>" + _domain(g) + "</td><td class='right aligned'>" + _device(g, h) + "</td><td class='right aligned collapsing'>" +
            l + "</td><td class='right aligned single line'>" + f + "</td><td class='right aligned single line collapsing'>" + m + "</td></tr>"; c.push(g)
    } c.push("</tbody></table>"); $(a).html(c.join("\n")); $("table").tablesort(); $("[name=remove-unconfirmed-messages]", a).click(function (b) { var c = b.target; "I" == c.nodeName && (c = c.parentNode); b = $(c).attr("domain-name"); c = $(c).attr("client-id"); myqtt.clearUnconfirmedMessages(a, b, c) })
};
myqtt.showDevices = function (a, b) {
    b || (b = window.location.href.split("/devices/")[1]); b || (b = myqtt.userInfo.domainName); $(a).append("<div class='ui text loader centered active top150'>Loading devices for " + _domain(b, "big") + "</div>"); myqtt.post({
        url: "/device/list", data: { domainName: b }, success: function (c) { myqtt.showDevicesComplete(b, a, c) }, error: function (c) {
            myqtt.showErrorInPanel("Failed to load devices", "Received error response: " + c.statusText + ".<br>" + c.responseText, a); $(a).append("<button class='ui primary button'>Retry loading devices</button>");
            $("button.primary").click(function () { window.location = "/devices/" + b })
        }
    })
};
myqtt.showBootstrapAuths = function (a, b) {
    b || (b = window.location.href.split("/bootstrap/auths/")[1]); b || (b = myqtt.userInfo.domainName); $(a).append("<div class='ui text loader centered active top150'>Loading bootstrap auths for " + _domain(b, "big") + "</div>"); myqtt.post({
        url: "/bootstrap/auth/list", data: { domainName: b }, success: function (c) { myqtt.showBootstrapAuthsComplete(b, a, c) }, error: function (b) {
            myqtt.showErrorInPanel("Failed to bootstrap auths", "Received error response: " + b.statusText + ".<br>" + b.responseText,
                a); $(a).append("<button class='ui primary button'>Retry loading bootstrap auths</button>"); $("button.primary").click(function () { window.location = window.location.href })
        }
    })
};
myqtt.showBootstrapAuthsComplete = function (a, b, c) {
    var d = [], e = myqtt.extractParams(); if (!e || !(e.tabactive && 0 < e.tabactive.length)) e = "<h1 class='ui header'><i class='bezier curve icon'></i> Bootstrap auths for domain " + _domain(a, "big") + " </h1>", d.push(e); d.push('<div class="ui icon message"><i class="bezier curve icon"></i>  <div class="content">    <div class="header">Bootstraping authentication credentials      </div>    <p>These credentials allows you to create a generic authentication pair (userName+password) that allows several different devices (with different, possibly bootstrapped clientIds) to authenticate and get into the platform without having a device created before head. <a href="https://support.asplhosting.com/t/using-mqtt-bootstrap-auth-to-authenticate-devices-without-knowin-clientid-beforehand/317">See additional help explaining how you can use these here</a>.</p>  </div> </div>'); d.push("<a href='/bootstrap/auth/add/" +
        a + "'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Add bootstrap auth credentials</button></a>"); d.push("<table class='ui celled sortable striped table'>"); d.push("<thead><tr><th colspan='4' class='no-sort'><i class='bezier curve icon'></i> Bootstrap auths <span class='ui label'> " + c.length + " </span></th></tr><tr><th></i> Username</th><th class='collapsing'>Active</th><th class='collapsing' >Register device</th><th class='right aligned collapsing no-sort'>Actions</th></tr></thead><tbody>");
    for (var f in c) {
        var g = c[f], e = "", e = g.isActive ? "<a class='ui green horizontal label'>active</a>" : "<a class='ui horizontal label small'>disabled</a>", h = "", h = g.registerDevice ? "<a class='ui violet horizontal label'>register device</a>" : ""; (g = g.userName) || (g = ""); d.push("<tr><td class='clickable' iter='" + f + "'>" + g + "</td><td class='right aligned collapsing'>" + e + "</td><td class='right aligned collapsing'>" + h + "</td><td class='right aligned single line'>" + ("<button class='ui icon mini button' name='removebootstrapauth' user-name='" +
            g + "' data-tooltip='Remove bootstrap auth'><i class='remove icon'></i></button>") + "</td></tr>")
    } d.push("</tbody></table>"); $(b).html(d.join("\n")); $("table").tablesort(); $("[name=removebootstrapauth]", b).click(function (b) { b = b.target; "I" == b.nodeName && (b = b.parentNode); myqtt.removeBootstrapAuth(a, $(b).attr("user-name"), function () { window.location = window.location.href }) }); $("table", b).click(function (b) {
        if ((b = b.target) && $(b).hasClass("clickable")) b = Number($(b).attr("iter")), location = "/bootstrap/auth/add/" +
            a + myqtt.formatParameters(c[b])
    })
}; myqtt.removeBootstrapAuth = function (a, b, c) { myqtt.post({ url: "/bootstrap/auth/remove", data: { domainName: a, userName: b }, success: function (a) { c && c() }, error: function (a) { myqtt.showError({ title: "Failed to remove bootstrap authentication credentials", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.showAddBootstrapAuthForm = function (a) {
    var b = myqtt.getUrlPathItem(3); b || (b = myqtt.userInfo.domainName); var c = myqtt.extractParams(), d = null != c && "undefined" != typeof c, e = []; e.push("<div class='ui doubling container'>"); e.push("<div class='ui stackable grid'>"); e.push("<div class='ten wide column'>"); var f = "<h1 class='ui header'>Add bootstrap auth to domain: " + b + " </h1>"; d && (f = "<h1 class='ui header'>Updating domain bootstrap auth (for " + _domain(b, "big") + ")</h1>"); e.push(f); e.push('<form class="ui form" >');
    e.push('<h4 class="ui dividing header">Bootstrap Auth credentials identification</h4>'); f = ""; c && c.userName && (f = "value='" + c.userName + "'"); var g = ""; d && (g = " readonly "); e.push('<div class="field"><label>Username</label><input type="text" name="Bootstrap_userName" ' + g + ' placeholder="Username" ' + f + "></div>"); f = "Bootstrap auth password"; d && (f = "Leave password empty to keep it. Provide a password to change it."); e.push('<div class="field"><label>Password</label><input type="password" name="Bootstrap_password" placeholder="' +
        f + '"></div>'); e.push('<h4 class="ui dividing header">Bootstrap auth credentials flags</h4>'); f = "checked"; g = "checked=''"; c && !c.isActive && (g = f = ""); e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label>Is Active (devices can log into the platform with these credentials)</label><input type="checkbox" name="Bootstrap_is_active" ' + g + " ></div></div>"); g = f = ""; c && c.registerDevice && (f = "checked", g = "checked=''"); e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label><a class="ui violet horizontal label">register device</a> (in case a MQTT device successfully authenticate using these credentials, make the platform to register that device with provided clientId so it becomes a permanent and administratable device independant from these bootstrap credentials)</label><input type="checkbox" name="Bootstrap_registerDevice" ' +
            g + " ></div></div>"); e.push("<br>"); e.push("<br>"); e.push('<div class="ui divider"></div>'); e.push('<button class="ui right labeled icon button primary" name="Bootstrap_addauth"><i class="right ' + (d ? "edit" : "plus") + ' icon"></i>' + (d ? "Update" : "Add") + " bootstrap auth credentials</button>"); e.push("</form>"); e.push("</div>"); e.push("</div>"); e.push("</div>"); e.push("</div>"); a.html(e.join("\n")); $("select", a).dropdown(); $(".ui.checkbox", a).checkbox(); $(".ui.menu .item", a).tab(); $("[name=Bootstrap_userName]").focus();
    $("[name=Bootstrap_addauth]", a).click(function (c) {
        c.preventDefault(); c = { auth: { domainName: b, userName: myqtt.trim($("[name=Bootstrap_userName]", a).val()), isActive: $("[name=Bootstrap_is_active]", a).is(":checked"), registerDevice: $("[name=Bootstrap_registerDevice]", a).is(":checked") }, password: myqtt.trim($("[name=Bootstrap_password]", a).val()) }; myqtt.post({
            url: d ? "/bootstrap/auth/update" : "/bootstrap/auth/add", data: c, success: function (a) { window.history.back() }, error: function (a) {
                myqtt.showError({
                    title: "Failed to add device to domain",
                    content: "Received error response: " + a.statusText + ".<br>" + a.responseText
                })
            }
        })
    })
}; myqtt.addDivider = function (a) { a.append('<div class="ui hidden divider"></div>') };
myqtt.addOtherOptions = function (a) {
    a.append("<div name='otherOptionsContainer' class='ui fluid'></div>"); a = $("[name=otherOptionsContainer]", a); a.append("<h1 class='ui header'>Other admin options available</h1>"); a.append("<a href='/show-admin-devices'><button class='ui right labeled icon button' ><i class='right labeled users icon'></i>Show admin devices</button></a>"); a.append("<a href='/show-domain-admin-devices'><button class='ui right labeled icon button' ><i class='right labeled users icon'></i>Show domain admin devices</button></a>");
    a.append("<a href='/show-admin-devices'><button class='ui right labeled icon button' ><i class='right labeled shield icon'></i>Show ip login limits</button></a>")
}; myqtt.selectAnotherDomain = function (a, b, c, d, e, f) { return !myqtt.userInfo.isAdmin && !myqtt.userInfo.hasDomainAdmin ? "" : "<a href='/selector" + myqtt.formatParameters({ listService: a, itemType: b, nodeAttr: c, redirectUrl: d, infoOp: e }) + "'><button class='ui right labeled icon button'><i class='right exchange icon'></i>" + f + "</button></a>" };
myqtt.selector = function (a, b, c, d, e, f, g) {
    myqtt.post({
        url: c, success: function (h) {
            if (1 == h.length) window.location = h[0][e] ? f + h[0][e] : h[0][0] ? f + h[0][0] : f; else if (0 == h.length) myqtt.showInfoInPanel("No " + d + " was found", "Service [" + c + "] failed, unable to " + g + " because it was found no domain", a); else {
                var l = []; l.push('<form class="ui form">'); l.push('<div class="field"><label>Select ' + d + " " + g + '</label><select class="ui search dropdown" name="selectorSelect"><option value="">Select ' + d + " " + g + "</option>"); for (var m in h) {
                    var n =
                        h[m].domain; l.push('<option value="' + n + '">' + n + "</option>")
                } l.push("</select></div>"); h = '<button class="ui right labeled icon button primary" name="item_selector_lkjsefklj"><i class="right edit outline icon"></i>' + myqtt.capitalize(g) + "</button>"; l.push(h); l.push("</form>"); b.append(l.join("\n")); myqtt.combobox(a); $("[name=item_selector_lkjsefklj]").click(function (a) { a.preventDefault(); a = $("[name=selectorSelect]").val(); window.location = f + a }); $("select", b).change(function (a) {
                    a.preventDefault(); a = $("[name=selectorSelect]").val();
                    window.location = f + a
                })
            }
        }, error: function (b) { myqtt.showErrorInPanel("Failed to load " + d + " selector " + g, "Service [" + c + "] reported error: " + b.statusText + ".<br>" + b.responseText, a); a.append("<button class='ui primary button'>Retry loading " + d + "(s) using service " + c + "</button>"); $("button.primary").click(function () { window.location = window.location.pathname }) }
    })
};
myqtt.showDevicesComplete = function (a, b, c) {
    var d = [], e = myqtt.extractParams(), e = e && e.tabactive && 0 < e.tabactive.length; if (!e) { var f = "<h1 class='ui header'><i class='microchip icon'></i> Devices for domain " + _domain(a, "big") + " </h1>"; d.push(f) } d.push("<a href='/device/add/" + a + "'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Add device</button></a>"); e || (d.push("<a href='/domain/view/" + a + "'><button class='ui right labeled icon button'><i class='right building outline icon'></i>Manage domain</button></a>"),
        d.push("<a href='/domain/view/" + a + "?tabactive=stats_and_quota'><button class='ui right labeled icon button'><i class='right bar chart icon'></i>Stats and quota</button></a>"), f = myqtt.selectAnotherDomain("/domain/list", "domain", "name", "/devices/", "to manage devices", "Select another domain"), d.push(f), myqtt.userInfo.hasDomainAdmin && d.push("<a href='/domain/new'><button class='ui right labeled icon button teal'><i class='right plus icon'></i>Add Hub</button></a>")); e && (d.push("<a href='/devices/" + a +
            "'><button class='ui right labeled icon button '><i class='right microchip icon'></i>Show devices expand</button></a>"), d.push("<a href='/will/inspector/" + a + "'><button class='ui right labeled icon button '><i class='right exclamation icon'></i>Will inspector</button></a>")); d.push("<table class='ui celled sortable striped table'>"); d.push("<thead><tr><th colspan='7' class='no-sort'>Devices <span class='ui label'> " + c.length + " </span></th></tr><tr><th><i class='microchip icon'></i> clientId</th><th >User name</th><th class='collapsing'>Status</th><th class='collapsing'>Freeze Subs.</th><th class='collapsing'>Skip Replace</th><th class='collapsing'>SCI Auth</th><th class='right aligned collapsing no-sort'>Actions</th></tr></thead><tbody>");
    for (var g in c) {
        var e = c[g], f = "", f = e.isActive ? "<a class='ui green horizontal label small'>active</a>" : "<a class='ui horizontal label small'>disabled</a>", h = ""; e.isDomainAdmin && (h = myqtt.splitTag + "<a class='ui green horizontal label small'>is domain admin</a>"); var l = "", l = e.skipReplace ? "<a class='ui teal horizontal label small'>keep</a>" : "<a class='ui horizontal label small'>replace</a>", m = "", m = e.freezeSubscriptions ? "<a class='ui violet horizontal label small'>freeze</a>" : "", n = "", n = e.sciAuthEnabled ?
            "<a class='ui single line black horizontal label small'>sci-auth</a>" : "", s = " <button class='ui icon mini button' name='removedevice' device='" + e.clientId + "' data-tooltip='Remove device'><i class='remove icon'></i></button> ", r = ""; myqtt.userInfo.isAdmin && (r = " <button class='ui icon mini button' name='makeadmindevice' domain='" + a + "' device='" + e.clientId + "' data-tooltip='Flag this device as Admin Device'><i class='users icon'></i></button> "); var q = ""; myqtt.userInfo.isAdmin && (e.isDomainAdmin || (q = " <button class='ui icon mini button' name='makedomainadmindevice' domain='" +
                a + "' device='" + e.clientId + "' data-tooltip='Flag this device as Domain Admin device'><i class='user icon'></i></button> ")); var p = e.userName; p || (p = ""); e = "<tr><td class='clickable' iter='" + g + "'  isDomainAdmin__Value='" + e.isDomainAdmin + "'>" + _device(a, e.clientId) + " " + h + "</td> <td >" + p + "</td><td class='right aligned'>" + f + "</td><td class='right aligned'>" + m + "</td><td class='right aligned'>" + l + "</td><td class='right aligned'>" + n + "</td><td class='right aligned single line'>" + s + r + q + "</td></tr>"; d.push(e)
    } d.push("</tbody></table>");
    $(b).html(d.join("\n")); $("table").tablesort(); $("[name=removedevice]", b).click(function (b) { b = b.target; "I" == b.nodeName && (b = b.parentNode); myqtt.removeDevice(a, $(b).attr("device")) }); $("[name=makeadmindevice]", b).click(function (b) { b = b.target; "I" == b.nodeName && (b = b.parentNode); myqtt.makeAdminDevice(a, $(b).attr("device")) }); $("[name=makedomainadmindevice]", b).click(function (b) { b = b.target; "I" == b.nodeName && (b = b.parentNode); myqtt.makeDomainAdminDevice(a, $(b).attr("device"), a) }); $("table", b).click(function (b) {
        if ((b =
            b.target) && $(b).hasClass("clickable")) b = Number($(b).attr("iter")), location = "/device/add/" + a + myqtt.formatParameters(c[b])
    })
}; myqtt.makeAdminDevice = function (a, b) { myqtt.post({ url: "/admin/add", data: { domainName: a, clientId: b }, success: function (a) { window.location = "/show-admin-devices" }, error: function (a) { myqtt.showError({ title: "Failed to configure admin device", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.makeDomainAdminDevice = function (a, b, c) { myqtt.post({ url: "/domain/admin/add", data: { domainName: a, clientId: b, requestedDomain: c }, success: function (a) { window.location = window.location.href }, error: function (a) { myqtt.showError({ title: "Failed to configure admin device", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.showAddDeviceForm = function (a) {
    var b = myqtt.getUrlPathItem(2); b || (b = myqtt.userInfo.domainName); var c = myqtt.extractParams(), d = null != c && "undefined" != typeof c, e = []; e.push("<div class='ui doubling container'>"); d && (e.push('<div class="ui top tabular menu">'), e.push('  <a class="item active" data-tab="general"><i class="microchip icon"></i>Device settings</a>'), e.push('  <a class="item" data-tab="connection_history"><i class="list icon"></i>Connection history</a>'), e.push('  <a class="item" data-tab="unconfirmed_messages"><i class="comment alternate icon"></i>Unconfirmed Messages</a>'),
        e.push('  <a class="item" data-tab="errors"><i class="warning icon"></i>Errors</a>'), e.push("</div>"), e.push('<div class="ui tab active" data-tab="general">')); e.push("<div class='ui stackable grid'>"); e.push("<div class='ten wide column'>"); var f = "<h1 class='ui header'>Add device to domain: " + b + " </h1>"; d && (f = "<h1 class='ui header'>Updating device (from " + _domain(b, "big") + ")</h1>"); e.push(f); e.push('<form class="ui form" >'); e.push('<h4 class="ui dividing header">Device identification</h4>'); f = "";
    c && c.clientId && (f = "value='" + c.clientId + "'"); e.push('<div class="field"><label>Client Id</label><input type="text" name="AddDevice_clientId" placeholder="Client Id" ' + f + "></div>"); f = ""; c && c.userName && (f = "value='" + c.userName + "'"); e.push('<div class="field"><label>Username</label><input type="text" name="AddDevice_userName" placeholder="User name" ' + f + "></div>"); e.push('<div class="field"><label>Password</label><input type="password" name="AddDevice_password" placeholder="Device password"></div>'); if (d) {
        e.push('<h4 class="ui dividing header">Device flags</h4>');
        var g = f = ""; c && c.isActive && (f = "checked", g = "checked=''"); e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label>Is Active (device can log into the platform)</label><input type="checkbox" name="AddDevice_is_active" ' + g + " ></div></div>"); g = f = ""; c && c.freezeSubscriptions && (f = "checked", g = "checked=''"); e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label><a class="ui violet horizontal label">Freeze subscriptions</a> (any change to unsubscribe or subscribe for this device will be discarded. It also forces cleanSession=False, causing login failure otherwise)</label><input type="checkbox" name="AddDevice_freeze_subscriptions" ' +
            g + " ></div></div>"); g = f = ""; c && c.skipReplace && (f = "checked", g = "checked=''"); e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label><a class="ui teal horizontal label">Enable skip connection replace</a> (second login for this device will not disconnect previous connections. Cannot be used together with FreezeSubscriptions)</label><input type="checkbox" name="AddDevice_skip_replace" ' + g + " ></div></div>"); var h = g = f = ""; c && c.sciAuthEnabled && (f = "checked", g = "checked=''", h = ". Use the following credential as clientId to authenticate as this device: <a class='ui black horizontal label' href='javascript:void(0)' name='get-auth-sci'>Get SCI Auth String</a>");
        e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label><a class="ui black horizontal label">Enable SCI Auth</a> (Allows to enable Simple Client-ID Autentication. See this for more information)' + h + '</label><input type="checkbox" name="AddDevice_sci_auth_enabled" ' + g + " ></div></div>"); g = f = ""; c && c.skipSessionIpEnforce && (f = "checked", g = "checked=''"); e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label><a class="ui red horizontal label">Skip Session Ip Enforce</a> (by default, HTTP API checks original source IP when session was created to avoid hijacking. You might want to disable this check for networks that changes IP frequently for online sessions, like VPNs and mobile connections)</label><input type="checkbox" name="Skip_Session_Ip_Enforce" ' +
            g + " ></div></div>")
    } myqtt.userInfo.isAdmin && (g = f = "", c && c.isDomainAdmin && (f = "checked", g = "checked=''"), e.push('<div class="field"><div class="ui toggle ' + f + ' checkbox"><label>Admin device (flag this device as domain admin)</label><input type="checkbox" name="AddDevice_is_admin_device" ' + g + " ></div></div>")); e.push("<br>"); e.push("<br>"); e.push('<div class="ui divider"></div>'); f = d ? "edit" : "plus"; e.push('<button class="ui right labeled icon button primary" name="AddDevice_adddevice"><i class="right ' +
        f + ' icon"></i>' + (d ? "Update" : "Add") + " device</button>"); d && (c.clientId && b) && (e.push('<button class="ui right labeled icon button secondary" name="AddDevice_showSubscriptions_120389"><i class="right ' + f + ' icon"></i>Show subscriptions</button>'), e.push('<button class="ui right labeled icon button " name="Publish-to_120389sdk"><i class="right mail icon"></i>Publish to device</button>')); e.push("</form>"); e.push("</div>"); d && (e.push("<div class='one wide column'><div class='ui vertical divider computer only'> <i class='angle right icon'></i> </div></div>"),
            e.push("<div class='five wide column'>"), e.push("<h1 class='ui header'>Options</h1>"), myqtt.userInfo.isAdmin && (e.push("<a href='/device/enabletrace/" + b + "/" + c.clientId + "'><button class='ui right labeled icon button  '><i class='right circle icon'></i> Byte trace on</button></a>"), e.push("<br>"), e.push("<br>"), e.push("<a href='/device/disabletrace/" + b + "/" + c.clientId + "'><button class='ui right labeled icon button  '><i class='right pause icon'></i> Stop byte trace </button></a>"), e.push("<br>"), e.push("<br>")),
            e.push("<a href='/ip/allowed/" + b + "/" + c.clientId + "'><button class='ui right labeled icon button  '><i class='shield icon'></i></i> Allowed IPs</button></a>")); e.push("</div>"); e.push("</div>"); e.push("</div>"); d && (e.push('<div class="ui tab" data-tab="connection_history">'), e.push("</div>"), e.push('<div class="ui tab" data-tab="unconfirmed_messages">'), e.push("</div>"), e.push('<div class="ui tab" data-tab="errors">'), e.push("Showing errors..."), e.push("</div>")); a.html(e.join("\n")); $("select", a).dropdown();
    $(".ui.checkbox", a).checkbox(); $(".ui.menu .item", a).tab(); $("[name=AddDevice_clientId]").focus(); $("[name=AddDevice_showSubscriptions_120389").click(function (a) { a.preventDefault(); window.location = "/subscriptions/" + b + "/" + c.clientId }); $("[name=Publish-to_120389sdk").click(function (a) { a.preventDefault(); window.location = "/publish/prepare/" + b + "/" + c.clientId }); $("[name=AddDevice_adddevice]", a).click(function (c) {
        c.preventDefault(); var e = {}; e.domainName = b; e.password = myqtt.trim($("[name=AddDevice_password]",
            a).val()); e.clientId = myqtt.trim($("[name=AddDevice_clientId]", a).val()); e.userName = myqtt.trim($("[name=AddDevice_userName]", a).val()); e.isActive = $("[name=AddDevice_is_active]", a).is(":checked"); e.freezeSubscriptions = $("[name=AddDevice_freeze_subscriptions]", a).is(":checked"); e.skipReplace = $("[name=AddDevice_skip_replace]", a).is(":checked"); e.sciAuthEnabled = $("[name=AddDevice_sci_auth_enabled]", a).is(":checked"); e.skipSessionIpEnforce = $("[name=Skip_Session_Ip_Enforce]", a).is(":checked"); myqtt.userInfo.isAdmin &&
                (e.isAdminDevice = $("input[name=AddDevice_is_admin_device]", a).is(":checked")); 128 < e.clientId.length ? myqtt.showError({ title: "ClientID too big", content: "Unable to add/modify a device with a clientId bigger than 128 chars" }) : 128 < e.userName.length ? myqtt.showError({ title: "Username too big", content: "Unable to add/modify a device with a userName bigger than 128 chars" }) : myqtt.post({
                    url: d ? "/device/update" : "/device/add", data: e, success: function (a) {
                        myqtt.userInfo.isAdmin ? (e.requestedDomain = e.domainName, myqtt.post({
                            url: e.isAdminDevice ?
                                "/domain/admin/add" : "/domain/admin/remove", data: e, success: function (a) { window.history.back() }
                        })) : window.history.back()
                    }, error: function (a) { myqtt.showError({ title: "Failed to add device to domain", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
                })
    }); d && ($("[name='get-auth-sci']").click(function () {
        myqtt.showInfo("SCI Auth ClientId string", "Use the following Simple Client-Id authentication string to get your device authenticated as <strong>" + c.clientId + "</strong> inside domain <strong>" +
            b + "</strong>:<br><br>" + c.sciAuth, null, !0)
    }), $("a[data-tab='connection_history']").click(function (d) { d = $("div[data-tab='connection_history']", a)[0]; myqtt.showConnectionHistory(b, c.clientId, c.connectionHistory, d) }), $("a[data-tab='unconfirmed_messages']").click(function (d) { d = $("div[data-tab='unconfirmed_messages']", a)[0]; myqtt.showUnconfirmedMessagesStat(b, c.clientId, !1, d) }), $("a[data-tab='errors']").click(function (d) { d = $("div[data-tab='errors']", a)[0]; myqtt.showLastErrors(b, c.clientId, d) }))
};
myqtt.showUnconfirmedMessagesStat = function (a, b, c, d) {
    $(d).empty(); var e = [], f = "Unconfirmed messages"; b && (f = "Unconfirmed messages for " + b); e.push('<div class="ui icon message"><i class="comment alternate icon"></i>  <div class="content">    <div class="header">' + f + "</div> <p>QoS1 and Qos2 unconfirmed messages pending to be delivered to unconnected devices or messages that are in the process of being delivered.</p>  </div> </div>"); e.push('<div class="ui right labeled icon button" name="refresh"><i class="right refresh icon"></i>Refresh</div>');
    e.push('<div class="ui right labeled icon button " name="clear-messages"><i class="right icon eraser"></i>Clear Unconfirmed messages</div>'); myqtt.addsep(e); e.push('<div class="ui placeholder" name="placeholder"></div>'); $(d).html(e.join("\n")); myqtt.sep(d); var g = $("[name='placeholder']", d); $("[name='refresh']", d).click(function (e) { myqtt.showUnconfirmedMessagesStat(a, b, c, d) }); $("[name='clear-messages']", d).click(function (c) { myqtt.clearUnconfirmedMessages(g, a, b) }); myqtt.getUnconfirmedMessagesStats(a,
        b, g, c)
};
myqtt.getUnconfirmedMessagesStats = function (a, b, c, d) { $(c).empty(); var e = {}; e.domainName = a; b && (e.clientId = b); myqtt.addLoading("Loading unconfirmed messages (" + a + "), please wait..."); myqtt.post({ url: "/unconfirmed-messages/stats/get", data: e, success: function (e) { myqtt.removeLoading(); myqtt.getUnconfirmedMessagesStatsComplete(c, a, b, e, d) }, error: function (a) { myqtt.removeLoading(); myqtt.showErrorInPanel("Failed to load unconfirmed messages", "Received error response: " + a.statusText + ".<br>" + a.responseText, c) } }) };
myqtt.getUnconfirmedMessagesStatsComplete = function (a, b, c, d, e) {
    var f = [], g = _domain(b); c && 0 < c.length && (g = _domain(b) + ":" + _device(b, c)); c = "Unconfirmed messages for:"; e && (c = "Unconfirmed messages for all devices at:"); f.push("<table class='ui striped sortable table'>"); f.push("<thead><tr><th colspan='4'>" + c + " " + g + " (" + String(d.length) + " records)</th></tr>"); f.push("<tr><th>clientId</th><th>Total size</th><th>Messages</th><th class='right aligned collapsing no-sort'>Actions</th></tr></thead>"); f.push("<tbody>");
    for (var h in d) e = d[h], g = "<button class='ui icon mini button' name='clear_unconfirmed_device' iter='" + h + "' data-tooltip='Clear unconfirmed messages for this device'><i class='erase icon'></i></button> ", e = "<tr><td  class='single line'>" + _device(b, e.clientId) + "</td><td  class='single line'>" + myqtt.sizeToHuman(e.size) + "</td><td>" + e.totalMessages + "</td><td>" + g + "</td></tr>", f.push(e); f.push("</tbody></table>"); $(a).append(f.join("\n")); $("table").tablesort(); $("[name=clear_unconfirmed_device]", a).click(function (c) {
        c =
        c.target; "I" == c.nodeName && (c = c.parentNode); c = $(c).attr("iter"); myqtt.clearUnconfirmedMessages(a, b, d[c].clientId)
    }); $(a).removeClass("placeholder")
};
myqtt.clearUnconfirmedMessages = function (a, b, c) {
    a = "Clear unconfirmed messages for " + c + " in domain " + b + "?"; c || (a = "Clear all unconfirmed messages for domain " + b + "?"); var d = "If you continue, you will remove permanently all unconfirmed messages for (" + c + ") at domain (" + b + "). After removal, these messages cannot be recovered. Do you want to continue?"; c || (d = "If you continue, you will remove permanently all unconfirmed messages for domain (" + b + "). After removal, these messages cannot be recovered. Do you want to continue?");
    myqtt.confirmAction({ icon: "erase", design: "basic", title: a, content: d, onDeny: function () { }, onApprove: function () { myqtt.post({ url: "/unconfirmed-messages/clean", data: { domainName: b, clientId: c }, success: function (a) { window.location = window.location.href }, error: function (a) { myqtt.showError({ title: "Failed to clear unconfirmed messages", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) } })
};
myqtt.showLastErrors = function (a, b, c) {
    $(c).empty(); var d = []; d.push('<div class="ui right labeled icon button " name="refresh"><i class="right refresh icon"></i>Refresh</div>'); d.push('<div class="ui right labeled icon button " name="clear-logs"><i class="right eraser icon"></i>Clear logs</div>'); myqtt.addsep(d); d.push('<div class="ui placeholder" name="placeholder"></div>'); $(c).html(d.join("\n")); myqtt.sep(c); var e = $("[name='placeholder']", c); $("[name='refresh']", c).click(function (c) {
        myqtt.getLastErrors(a,
            b, e)
    }); $("[name='clear-logs']", c).click(function (c) { myqtt.clearLastErrors(a, b, e) }); myqtt.getLastErrors(a, b, e)
}; myqtt.clearLastErrors = function (a, b, c) { var d = {}; d.domainName = a; d.status = status; b && (d.clientId = b); myqtt.post({ url: "/last-errors/clear", data: d, success: function (d) { myqtt.getLastErrors(a, b, c) }, error: function (a) { myqtt.showErrorInPanel("Failed to clear last errors", "Received error response: " + a.statusText + ".<br>" + a.responseText, c) } }) };
myqtt.getLastErrors = function (a, b, c) { $(c).empty(); var d = {}; d.domainName = a; b && (d.clientId = b); myqtt.post({ url: "/last-errors/get", data: d, success: function (d) { myqtt.getLastErrorsComplete(c, a, b, d) }, error: function (a) { myqtt.showErrorInPanel("Failed to load last errors", "Received error response: " + a.statusText + ".<br>" + a.responseText, c) } }) };
myqtt.getLastErrorsComplete = function (a, b, c, d) {
    var e = []; !b && (myqtt.userInfo && myqtt.userInfo.domainName) && (b = myqtt.userInfo.domainName); var f = _domain(b); c && 0 < c.length && (f = _domain(b) + ":" + _device(b, c)); e.push("<table class='ui striped sortable table'>"); e.push("<thead><tr><th colspan='4' class='no-sort'>Last errors for: " + f + " (" + String(d.length) + " records)</th></tr>"); e.push("<tr><th>ClientId</th><th>Stamp</th><th>IP</th><th>Message</th></tr></thead>"); e.push("<tbody>"); for (var g in d) c = d[g], f = myqtt.stampToDate(c.stamp),
        c = "<tr><td class='single line'>" + _device(b, c.clientId) + "</td><td class='single line'>" + f + "</td><td>" + _ip(c.ip) + "</td><td>" + _prepare_log_msg(c.error) + "</td></tr>", e.push(c); e.push("</tbody></table>"); $(a).append(e.join("\n")); $("table").tablesort(); $(a).removeClass("placeholder")
};
myqtt.showConnectionHistory = function (a, b, c, d) {
    var e = -2 == c; e ? c = !0 : "undefined" != typeof myqtt.showConnectionHistory.lastStatus && (c = myqtt.showConnectionHistory.lastStatus); $(d).empty(); var f = []; c ? (e && f.push('<div class="ui icon message"><i class="inbox icon"></i>  <div class="content">    <div class="header">      Registering connection history    </div>    <p>Note connection history record must be enabled at the required device.</p>  </div> </div>'), f.push('<div class="ui right labeled icon button" name="refresh"><i class="right refresh icon"></i>Refresh</div>')) :
        (f.push('<div class="ui icon message"><i class="inbox icon"></i>  <div class="content">    <div class="header">      Registering connection history    </div>    <p>Connection history is disabled by default. You can enable it to start recording connection history (connect, attempts and disconnects). Note connection history counts for storage quota. Each connection history is around 200 bytes aprox. You can store 5.242 records aprox in 1MB storage.</p>  </div> </div>'), f.push('<div class="ui button primary" name="enable-connection-history">Enable connection history tracking</div>'));
    f.push('<div class="ui right labeled icon button " name="clear-logs"><i class="right icon eraser"></i>Clear logs</div>'); c && (e ? f.push('<div class="ui button " name="disable-connection-history">Disable connection history tracking at all devices</div>') : f.push('<div class="ui button " name="disable-connection-history">Disable connection history tracking</div>')); myqtt.addsep(f); f.push('<div class="ui placeholder" name="placeholder"></div>'); $(d).html(f.join("\n")); myqtt.sep(d); var g = $("[name='placeholder']",
        d); $("[name='enable-connection-history']", d).click(function (c) { myqtt.configureConnectionHistory(a, b, d, !0, function (c) { myqtt.showConnectionHistory.lastStatus = c; myqtt.showConnectionHistory(a, b, c, d) }) }); $("[name='disable-connection-history']", d).click(function (c) {
            e ? myqtt.post({
                url: "/device/list", data: { domainName: a }, success: function (b) {
                    for (var c in b) myqtt.configureConnectionHistory(a, b[c].clientId, d, !1); myqtt.showInfo("Connection history tracking disabled", "Disabled connection history tracking for all devices at: " +
                        a)
                }, error: function (a) { myqtt.showError({ title: "Failed to load devices to disable connection history tracking", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            }) : myqtt.configureConnectionHistory(a, b, d, !1, function (c) { myqtt.showConnectionHistory.lastStatus = c; myqtt.showConnectionHistory(a, b, c, d) })
        }); $("[name='refresh']", d).click(function (d) { myqtt.getConnectionHistoryRecords(a, b, c, g, e) }); $("[name='clear-logs']", d).click(function (d) { myqtt.clearConnectionHistory(a, b, c, g, e) }); c &&
            myqtt.getConnectionHistoryRecords(a, b, c, g, e)
}; myqtt.clearConnectionHistory = function (a, b, c, d, e) { var f = {}; f.domainName = a; f.status = status; b && (f.clientId = b); myqtt.post({ url: "/connection-history/clear", data: f, success: function (f) { c && myqtt.getConnectionHistoryRecords(a, b, c, d, e) }, error: function (a) { myqtt.showErrorInPanel("Failed to clear connection history", "Received error response: " + a.statusText + ".<br>" + a.responseText, d) } }) };
myqtt.configureConnectionHistory = function (a, b, c, d, e) { var f = {}; f.domainName = a; f.status = d; b && (f.clientId = b); myqtt.post({ url: "/device/configure/connection-history", data: f, success: function (a) { e && e(d) }, error: function (a) { myqtt.showErrorInPanel("Failed to configure connection history", "Received error response: " + a.statusText + ".<br>" + a.responseText, c) } }) };
myqtt.getConnectionHistoryRecords = function (a, b, c, d, e) { $(d).empty(); var f = {}; f.domainName = a; b && (f.clientId = b); myqtt.post({ url: "/connection-history/get", data: f, success: function (f) { myqtt.showConnectionHistoryComplete(d, a, b, c, f, e) }, error: function (a) { myqtt.showErrorInPanel("Failed to load connection history", "Received error response: " + a.statusText + ".<br>" + a.responseText, d) } }) };
myqtt.showConnectionHistoryComplete = function (a, b, c, d, e, f) {
    d = []; var g = _domain(b); c && 0 < c.length && (g = _domain(b) + ":" + _device(b, c)); c = "Connection history records for:"; f && (c = "Connection history records for all devices at:"); d.push("<table class='ui striped sortable table'>"); d.push("<thead><tr><th colspan='5' class='no-sort'>" + c + " " + g + " (" + String(e.length) + " records)</th></tr>"); d.push("<tr><th>ClientId</th><th>Stamp</th><th>IP</th><th>Code</th><th>Message</th></tr></thead>"); d.push("<tbody>"); for (var h in e) f =
        e[h], c = myqtt.stampToDate(f.stamp), f = "<tr><td  class='single line'>" + _device(b, f.clientId) + "</td><td  class='single line'>" + c + "</td><td>" + _ip(f.ip) + "</td><td class='collapsing'>" + (0 == f.code ? "<a class='ui olive horizontal label small'>CONNECTED</a>" : 1 == f.code ? "<a class='ui horizontal label small'>DISCONNECTED</a>" : 2 == f.code ? "<a class='ui brown horizontal label small'>CONNECTION-FAILURE</a>" : 3 == f.code ? "<a class='ui brown horizontal label small'>REPLACE-INDICATION</a>" : 4 == f.code ? "<a class='ui horizontal label small'>CONN-REPLACE-SKIPPED</a>" :
            5 == f.code ? "<a class='ui red horizontal label small'>CONN-FAILURE-LIMITS</a>" : 6 == f.code ? "<a class='ui red horizontal label small'>IP-NOT-ALLOWED</a>" : String(f.code)) + "</td><td>" + f.msg + "</td></tr>", d.push(f); d.push("</tbody></table>"); $(a).append(d.join("\n")); $("table").tablesort(); myqtt.resolveIps(); $(a).removeClass("placeholder")
};
myqtt.changePasswordForm = function (a) {
    var b = []; b.push("<div class='ui text container'>"); b.push("<h1 class='ui header'>Changing password for current user</h1>"); b.push('<form class="ui form" >'); b.push('<div class="field"><label>New password</label><input type="password" name="password1" ></div>'); b.push('<div class="field"><label>Repeat new password</label><input type="password" name="password2" ></div>'); b.push('<button class="ui right labeled icon button primary" name="changepassword"><i class="right plus icon"></i>Change password</button>');
    b.push("</form>"); b.push("</div>"); a.html(b.join("\n")); $("select", a).dropdown(); $("[name=changepassword]").click(function (a) {
        a.preventDefault(); a = $("[name=password1]").val(); var b = $("[name=password2]").val(); a != b ? myqtt.showError({ title: "Passwords do not match", content: "Please, try again and check passwords introduced are the same" }) : (a = {}, a.newPassword = $("[name=password1]").val(), myqtt.post({
            url: "/change-my-password", data: a, success: function (a) { window.location = "/" }, error: function (a) {
                myqtt.showError({
                    title: "Failed to change password",
                    content: "Received error response: " + a.statusText + ".<br>" + a.responseText
                })
            }
        }))
    })
};
myqtt.removeDevice = function (a, b) {
    myqtt.confirmAction({
        icon: "microchip", design: "basic", title: "Remove device " + b + " from domain " + a + " and all associated messages?", content: "If you continue, you will remove permanently device (" + b + ") and all associated messages inside it, for domain (" + a + "). After device removal, it cannot be recovered in any way. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/device/remove", data: { domainName: a, clientId: b }, success: function (a) {
                    window.location =
                    window.location.href
                }, error: function (a) { myqtt.showError({ title: "Failed to remove device", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }
    })
};
myqtt.showDomainSubscriptions = function (a, b) {
    $(a).html("<div class='ui text loader centered active top150'>Loading subscriptions for " + _domain(b) + "</div>"); b || (b = myqtt.getUrlPathItem(2)); b || (b = myqtt.userInfo.domainName); var c = {}; c.domainName = b; myqtt.post({
        url: "/get-domain-subscriptions", data: c, success: function (c) { myqtt.showDomainsSubscriptionsComplete(a, c, b) }, error: function (b) {
            myqtt.showErrorInPanel("Failed to load subscriptions", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); $(a).append("<button class='ui primary button'>Retry loading subscriptions</button>");
            $("button.primary").click(function () { window.location = window.location.href })
        }
    })
};
myqtt.showSubscriptions = function (a, b) {
    a.html("<div class='ui text loader centered active top150'>Loading subscriptions</div>"); b || (b = myqtt.getUrlPathItem(1)); b || (b = myqtt.userInfo.domainName); var c = myqtt.getUrlPathItem(2), d = {}; b && (0 < b.length && c && 0 < c.length) && (d.domainName = b, d.clientId = c); myqtt.post({
        url: "/get-subscriptions", data: d, success: function (d) { myqtt.showSubscriptionsComplete(a, d, b, c) }, error: function (b) {
            myqtt.showErrorInPanel("Failed to load subscriptions", "Received error response: " + b.statusText +
                ".<br>" + b.responseText, a); a.append("<button class='ui primary button'>Retry loading subscriptions</button>"); $("button.primary").click(function () { window.location = window.location.href })
        }
    })
}; myqtt.translateQos = function (a) { return 0 == a ? "Qos 0" : 1 == a ? "Qos 1" : 2 == a ? "Qos 2" : "Malformed Qos: " + a };
myqtt.showDomainsSubscriptionsComplete = function (a, b, c) {
    var d = [], e = myqtt.extractParams(), e = e && e.tabactive && 0 < e.tabactive.length; if (!e) { var f = "<h1 class='ui header'><i class='block layout icon'></i> All subscriptions for " + _domain(c) + "</h1>"; d.push(f) } d.push("<a href='/domain/subscribe/add/" + c + "'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Subscribe</button></a>"); e && d.push("<a href='/domain/subscriptions/" + c + "'><button class='ui right labeled icon button '><i class='right microchip icon'></i>Show subscriptions expand</button></a>");
    d.push("<table class='ui celled sortable striped table'>"); d.push("<thead><tr><th colspan='6' class='no-sort'>Subscriptions <div class='ui label'><i class='block layout icon'></i> " + b.length + " </div></th></tr><tr><th>Client Id</th><th><i class='folder icon'></i> Topic filter</th><th class='collapsing'>Requested QOS</th><th class='collapsing'>Status</th><th class='collapsing no-sort'>Actions</th></tr></thead>"); d.push("<tbody>"); for (var g in b) {
        var e = b[g], f = e.topicFilter, h = myqtt.translateQos(e.qos),
        l = "<a class='ui green horizontal label small single line'>on-line</a>"; e.online || (l = "<a class='ui horizontal label small single line'>off-line</a>"); e = "<tr><td class='clickable' iter='" + g + "'>" + _device(c, e.clientId) + "</td><td></i> " + _topic(f, c) + " </td> <td class='right aligned'>" + h + "</td><td class='right aligned'>" + l + "</td><td><button class='ui icon mini button clickable' name='removetopic' topic='" + f + "' data-tooltip='Unsbuscribe topic' iter='" + g + "'><i class='remove icon'></i></button></td>"; d.push(e)
    } d.push("</tbody></table>");
    $(a).html(d.join("\n")); $("table").tablesort(); $("[name=removetopic]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); a && $(a).hasClass("clickable") && (a = Number($(a).attr("iter")), a = b[a], myqtt.removeSubscription(a.topicFilter, c, a.clientId)) })
};
myqtt.showSubscriptionsComplete = function (a, b, c, d) {
    var e = [], f = "<h1 class='ui header'>Current subscriptions for " + _domain(c) + "</h1>"; c && d && (f = "<h1 class='ui header'>Current subscriptions for " + _domain(c) + ":" + _device(c, d) + "</h1>"); e.push(f); f = "<a href='/subscribe/add'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Subscribe</button></a>"; c && d && (f = "<a href='/subscribe/add/" + c + "/" + d + "'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Subscribe</button></a>");
    e.push(f); e.push("<table class='ui celled striped sortable table'>"); e.push("<thead><tr><th colspan='4' class='no-sort'>Subscriptions</th></tr>"); e.push("<tr><th><i class='folder icon'></i> Topic filter</th><th class='collapsing'>Requested QOS</th><th class='collapsing'>Status</th><th class='collapsing no-sort'>Actions</th></tr></thead>"); e.push("<tbody>"); for (var g in b) {
        var f = b[g], h = f[0], l = myqtt.translateQos(f[1]), m = "<a class='ui green horizontal label small single line'>on-line</a>"; f[2] || (m = "<a class='ui horizontal label small single line'>off-line</a>");
        f = "<tr><td></i> " + _topic(h, c) + " </td> <td class='right aligned'>" + l + "</td><td class='right aligned'>" + m + "</td><td><button class='ui icon mini button' name='removetopic' topic='" + h + "' data-tooltip='Unsbuscribe topic'><i class='remove icon'></i></button></td>"; e.push(f)
    } e.push("</tbody></table>"); a.html(e.join("\n")); $("table").tablesort(); $("[name=removetopic]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); myqtt.removeSubscription($(a).attr("topic"), c, d) })
};
myqtt.removeSubscription = function (a, b, c) { a = { subscriptions: [a] }; b && (0 < b.length && c && 0 < c.length) && (a.domainName = b, a.clientId = c); myqtt.post({ url: "/unsubscribe", data: a, success: function (a) { window.location = window.location.href }, error: function (a) { myqtt.showError({ title: "Failed to unsubscribe", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.showAdminDevices = function (a) { a.html("<div class='ui text loader centered active top150'>Finding admin devices </div>"); myqtt.post({ url: "/admin/users", success: function (b) { myqtt.showAdminDevicesComplete(a, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load admin devices", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='/show-admin-devices'><button class='ui primary button'>Retry loading admin devices</button></a>") } }) };
myqtt.showAdminDevicesComplete = function (a, b) {
    var c = []; c.push("<h1 class='ui header'><i class='building icon'></i> Current platform admins</h1>"); c.push("<table class='ui celled striped table'><thead><tr><th colspan='3'>Global admins devices</th></tr></thead>"); c.push("<tbody><tr><td><i class='building outline icon'></i> Domain name</td><td >Client Id</td><td class='collapsing'>Actions</td></tr>"); for (var d in b) {
        var e = b[d], f = e[0], e = e[1]; c.push("<tr><td></i> " + f + " </td> <td class='right aligned'>" +
            e + "</td><td><button class='ui icon mini button' name='removeadmin' domain='" + f + "' clientId='" + e + "' data-tooltip='Remove Admin flag for this device'><i class='remove icon'></i></button></td>")
    } c.push("</tbody></table>"); a.html(c.join("\n")); $("[name=removeadmin]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); myqtt.removeAdminFlag($(a).attr("domain"), $(a).attr("clientId")) })
};
myqtt.removeAdminFlag = function (a, b) {
    a == myqtt.userInfo.domainName && b == myqtt.userInfo.clientId ? myqtt.showError({ title: "Cannot remove admin flag to yourself", content: "Attempted to remove Admin administration flag to your self. Due to security reasons, this is not allowed" }) : myqtt.post({
        url: "/admin/remove", data: { domainName: a, clientId: b }, success: function (a) { window.location = "/show-admin-devices" }, error: function (a) {
            myqtt.showError({
                title: "Failed to remove admin device", content: "Received error response: " +
                    a.statusText + ".<br>" + a.responseText
            })
        }
    })
}; myqtt.showDomainAdminDevices = function (a) { a.html("<div class='ui text loader centered active top150'>Finding domain admin devices </div>"); myqtt.post({ url: "/domain/admin/list", success: function (b) { myqtt.showDomainAdminDevicesComplete(a, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load domain admin devices", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='/show-domain-admin-devices'><button class='ui primary button'>Retry loading admin devices</button></a>") } }) };
myqtt.showDomainAdminDevicesComplete = function (a, b) {
    var c = []; c.push("<h1 class='ui header'><i class='building icon'></i> Domain admin devices: users that can manage a domain</h1>"); c.push("<table class='ui celled striped sortable table'>"); c.push("<thead><tr><th colspan='4' class='no-sort'>Domain admin devices</th></tr>"); c.push("<tr><th><i class='building outline icon'></i> Domain name</th><th >Client Id</th><th >Can manage domain</th><th class='collapsing no-sort'>Actions</th></thead>"); c.push("<tbody>");
    for (var d in b) { var e = b[d], f = e[0], g = e[1], e = e[2]; c.push("<tr><td></i> " + f + " </td> <td>" + g + "</td><td>" + e + "</td><td><button class='ui icon mini button' name='removedomainadmin' domain='" + f + "' clientId='" + g + "' requestedDomain='" + e + "' data-tooltip='Remove domain admin flag for this device'><i class='remove icon'></i></button></td>") } c.push("</tbody></table>"); a.html(c.join("\n")); $("table").tablesort(); $("[name=removedomainadmin]", a).click(function (a) {
        a = a.target; "I" == a.nodeName && (a = a.parentNode); myqtt.removeDomainAdminFlag($(a).attr("domain"),
            $(a).attr("clientId"), $(a).attr("requestedDomain"))
    })
}; myqtt.removeDomainAdminFlag = function (a, b, c) { myqtt.post({ url: "/domain/admin/remove", data: { domainName: a, clientId: b, requestedDomain: c }, success: function (a) { window.location = "/show-domain-admin-devices" }, error: function (a) { myqtt.showError({ title: "Failed to remove domain admin device", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.showIpsAllowed = function (a) {
    a.html("<div class='ui text loader centered active top150'>Loading allowed ips</div>"); var b = {}, c = myqtt.getUrlPathItem(2); b.domainName = c ? c : myqtt.userInfo.domainName; c = myqtt.getUrlPathItem(3); b.clientId = c ? c : myqtt.userInfo.clientId; myqtt.post({
        url: "/ip/allowed/list", data: b, success: function (c) { myqtt.showIpsAllowedComplete(a, c, b.domainName, b.clientId) }, error: function (b) {
            myqtt.showErrorInPanel("Failed to load allowed login ips", "Received error response: " + b.statusText +
                ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading allowed ips</button></a>")
        }
    })
};
myqtt.showIpsAllowedComplete = function (a, b, c, d) {
    var e = [], f = "<h1 class='ui header'><i class='shield icon'></i> IPs that are allowed to log from for device/user " + _domain(c) + ":" + _device(c, d) + "</h1>"; e.push(f); e.push("<a href='/ip/allowed/add/" + c + "/" + d + "'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Add allowed ip</button></a>"); e.push("<table class='ui celled striped table'><thead><tr><th colspan='3'>Allowed IPs (empty list allow from anywhere) for " + c + ":" + d + "</th></tr></thead>");
    e.push("<tbody><tr><td><i class='shield icon'></i> Allowed IP</td><td >Status</td><td class='collapsing'>Actions</td></tr>"); for (var g in b) { var f = b[g], h = f[0], l = "", l = f[1] ? "<a class='ui green horizontal label small'>active</a>" : "<a class='ui horizontal label small'>disabled</a>"; e.push("<tr><td></i> " + h + "</td> <td class='right aligned'>" + l + "</td><td><button class='ui icon mini button' name='removeallowedip' ip='" + h + "' ><i class='remove icon'></i></button></td>") } e.push("</tbody></table>"); a.html(e.join("\n"));
    $("[name=removeallowedip]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); myqtt.removeAllowedIp(c, d, $(a).attr("ip")) })
}; myqtt.removeAllowedIp = function (a, b, c) { myqtt.post({ url: "/ip/allowed/remove", data: { domainName: a, clientId: b, remoteAddr: c }, success: function (a) { window.location = window.location.href }, error: function (a) { myqtt.showError({ title: "Failed to remove admin device", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) };
myqtt.showIpsAllowedForm = function (a) {
    var b = [], c = {}, d = myqtt.getUrlPathItem(3); c.domainName = d ? d : myqtt.userInfo.domainName; d = myqtt.getUrlPathItem(4); c.clientId = d ? d : myqtt.userInfo.clientId; b.push("<div class='ui text container'>"); b.push("<h1 class='ui header'>Add a new IP allowed to " + c.domainName + ":" + c.clientId + " </h1>"); b.push("<div class='ui message'><div class='header'>Adding first IP allowed</div><p>By default, when no IP allowed is configured, login for current user is allowed from any IP. Once the first IP is added, system restricts login access to that list. </p></div>");
    b.push('<form class="ui form" >'); b.push('<div class="field"><label>IP to allow login from</label><input type="text" name="ipallowed" ></div>'); b.push('<button class="ui right labeled icon button primary" name="addipallowed"><i class="right plus icon"></i>Add IP Allowed</button>'); d = '<button class="ui right labeled icon button primary" name="addmyip"><i class="right plus icon"></i>Add my IP: ' + myqtt.userInfo.ip + "</button>"; b.push(d); b.push("</form>"); b.push("</div>"); a.html(b.join("\n")); $("[name=addipallowed],[name=addmyip]",
        a).click(function (b) { b.preventDefault(); "addmyip" == $(b.target).attr("name") ? c.remoteAddr = myqtt.userInfo.ip : c.remoteAddr = $("[name=ipallowed]", a).val(); myqtt.post({ url: "/ip/allowed/add", data: c, success: function (a) { window.location = "/ip/allowed/" + c.domainName + "/" + c.clientId }, error: function (a) { myqtt.showError({ title: "Failed to add ip allowed", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } }) })
};
myqtt.showPlans = function (a) { a.html("<div class='ui text loader centered active top150'>Loading Plans</div>"); myqtt.post({ url: "/plans/list", success: function (b) { myqtt.showPlansComplete(a, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load plans", "Received error response: " + b.statusText + ".<br>" + b.responseText + "</pre>", a); a.append("<a href='/plans'><button class='ui primary button'>Retry loading plans</button></a>") } }) };
myqtt.showPlansComplete = function (a, b) {
    var c = []; c.push("<h1 class='ui header'>Domain plans</h1>"); c.push("<a href='/plan/add'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Add new plan</button></a>"); c.push("<table class='ui celled striped sortable table'>"); c.push("<thead><tr><th colspan='14' class='no-sort'>Domain plans</th></tr>"); c.push("<tr><th><i class='tachometer alternate icon'></i> Plan Name</th><th class='collapsing'>Max Devices</th><th class='collapsing'>Max connected</th><th class='collapsing'>Max msg. size</th><th class='collapsing'>Msg. measurer size</th><th class='collapsing'>Max msgs/day</th><th class='collapsing'>Max msgs/hour</th><th class='collapsing'>Max msgs/minute</th><th class='collapsing'>Max msgs/month</th><th class='collapsing small'>Max conn subs.</th><th class='collapsing'>Max domain subs.</th><th class='collapsing'>Max Storage (MB)</th><th class='collapsing'>Panels</th><th class='collapsing no-sort'>Actions</th></tr></thead>");
    c.push("<tbody>"); for (var d in b) {
        var e = b[d], f = ""; myqtt.userInfo.isAdmin && (f = "<button class='ui icon mini button' name='removeplan__17689' plan='" + e.name + "' data-tooltip='Remove domain plan'><i class='remove icon'></i></button>"); var g = "", g = 0 < e.numPanels ? "<a class='ui green horizontal label small'>" + e.numPanels + "</a>" : "<a class='ui horizontal label small'>no panels</a>"; c.push("<tr><td class='clickable' iter='" + d + "'  ></i>" + e.name + "</td><td>" + e.maxAllowedDevices + "</td><td>" + e.maxConnectedDevices +
            "</td><td>" + e.maxMessageSize + "</td><td>" + e.msgMeasurerSize + "</td><td>" + e.maxMessagesPerDay + "</td><td>" + e.maxMessagesPerHour + "</td><td>" + e.maxMessagesPerMinute + "</td><td>" + e.maxMessagesPerMonth + "</td><td>" + e.maxConnSubscriptions + "</td><td>" + e.maxDomainSubscriptions + "</td><td>" + e.maxStorageQuota + "</td><td>" + g + "</td><td>" + f + "</td>")
    } c.push("</tbody></table>"); a.html(c.join("\n")); $("table").tablesort(); $("[name=removeplan__17689]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); myqtt.removePlan($(a).attr("plan")) });
    $("table", a).click(function (c) { if ((c = c.target) && $(c).hasClass("clickable")) c = Number($(c).attr("iter")), c = b[c], $(a).empty(), myqtt.showAddPlanForm(a, c, "/plan/update") })
};
myqtt.removePlan = function (a) {
    myqtt.confirmAction({
        icon: "tachometer", design: "basic", title: "Remove plan " + a + "?", content: "If you continue, you will remove permanently plan (" + a + "). After stash removal, it cannot be recovered in any way. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/plan/remove", data: { planName: a }, success: function (a) { window.location = "/plans" }, error: function (a) {
                    myqtt.showError({
                        title: "Failed to remove plan", content: "Received error response: " + a.statusText +
                            ".<br>" + a.responseText
                    })
                }
            })
        }
    })
};
myqtt.showAddPlanForm = function (a, b, c) {
    var d = null != b && "undefined" != typeof b && "undefined" != typeof c, e = []; d && history.pushState({}, "Updating plan", c); e.push("<div class='ui text container'>"); var f = "<h1 class='ui header'>Add plan</h1>"; d && (f = "<h1 class='ui header'>Updating plan: " + b.name + "</h1>"); e.push(f); e.push('<form class="ui form" >'); f = ""; b && b.name && (f = "value='" + b.name + "'"); e.push('<div class="field"><label>Plan name</label><input type="text" name="plan_name" placeholder="Name for the new plan" ' + f +
        "></div>"); f = ""; b && (f = "value='" + b.maxStorageQuota + "'"); e.push('<div class="field"><label>Max storage quota (MB) </label><input type="text" name="max_storage_quota" placeholder="Max storage quota in MB" ' + f + "></div>"); e.push('<h4 class="ui dividing header">Connection and devices limits</h4>'); e.push('<div class="two fields">'); f = ""; b && b.maxAllowedDevices && (f = " value='" + b.maxAllowedDevices + "'"); e.push('<div class="field"><label>Max allowed devices</label> <input type="text" name="max_allowed_devices" placeholder="Max allowed devices" ' +
            f + " > </div>"); f = ""; b && b.maxConnectedDevices && (f = " value='" + b.maxConnectedDevices + "'"); e.push('<div class="field"><label>Max connected devices</label><input type="text" name="max_connected_devices" placeholder="Max connected devices (at the same time)" ' + f + "> </div>"); e.push("</div>"); e.push('<h4 class="ui dividing header">Subscription limits (by connection and domain)</h4>'); e.push('<div class="three fields">'); f = ""; b && (f = " value='" + b.maxConnSubscriptions + "'"); e.push('<div class="field"><label>Max subscriptions per conn.</label><input type="text" name="max_conn_subscriptions" placeholder="Max allowed subscriptions per connection" ' +
                f + "> </div>"); f = ""; b && (f = " value='" + b.maxDomainSubscriptions + "'"); e.push('<div class="field"><label>Max subscriptions per domain</label><input type="text" name="max_domain_subscriptions" placeholder="Max allowed subscriptions per domain" ' + f + "> </div>"); f = ""; b && (f = " value='" + b.numPanels + "'"); e.push('<div class="field"><label>Num panels</label><input type="text" name="num_panels" placeholder="Num panels per domain" ' + f + "> </div>"); e.push("</div>"); e.push('<h4 class="ui dividing header">Message size (bytes) limits and quotas (units)</h4>');
    e.push('<div class="four fields">'); f = ""; b && b.maxMessageSize && (f = " value='" + b.maxMessageSize + "'"); e.push('<div class="field"><label>Max message size</label> <input type="text" name="max_message_size" placeholder="Max message size" ' + f + "> </div>"); f = ""; b && b.msgMeasurerSize && (f = " value='" + b.msgMeasurerSize + "'"); e.push('<div class="field"><label>Max message size</label> <input type="text" name="msg_measurer_size" placeholder="Msg. measurer size" ' + f + "> </div>"); f = ""; b && b.maxMessagesPerMinute && (f = " value='" +
        b.maxMessagesPerMinute + "'"); e.push('<div class="field"><label>Max msgs/minute</label><input type="text" name="max_messages_per_minute" placeholder="Max messages/minute" ' + f + "> </div>"); f = ""; b && b.maxMessagesPerHour && (f = " value='" + b.maxMessagesPerHour + "'"); e.push('<div class="field"><label>Max msgs/hour</label><input type="text" name="max_messages_per_hour" placeholder="Max messages/hour" ' + f + " > </div>"); e.push("</div>"); e.push('<div class="two fields">'); f = ""; b && b.maxMessagesPerDay && (f = " value='" +
            b.maxMessagesPerDay + "'"); e.push('<div class="field"><label>Max msgs/day</label><input type="text" name="max_messages_per_day" placeholder="Max messages/day" ' + f + " > </div>"); f = ""; b && b.maxMessagesPerMonth && (f = " value='" + b.maxMessagesPerMonth + "'"); e.push('<div class="field"><label>Max msgs/month</label><input type="text" name="max_messages_per_month" placeholder="Max messages/month" ' + f + " > </div>"); e.push("</div>"); e.push('<button class="ui right labeled icon button primary" name="addplan_kj09w8egwe"><i class="right ' +
                (d ? "edit" : "plus") + ' icon"></i>' + (d ? "Update" : "Add") + " plan</button>"); e.push("</form>"); e.push("</div>"); a.html(e.join("\n")); $(".ui.checkbox", a).checkbox(); $("[name=addplan_kj09w8egwe]").click(function (b) {
                    b.preventDefault(); b = {}; b.name = $("[name=plan_name]", a).val(); b.maxAllowedDevices = Number($("[name=max_allowed_devices]", a).val()); b.maxConnectedDevices = Number($("[name=max_connected_devices]", a).val()); b.maxConnSubscriptions = Number($("[name=max_conn_subscriptions]", a).val()); b.maxDomainSubscriptions =
                        Number($("[name=max_domain_subscriptions]", a).val()); b.maxMessageSize = Number($("[name=max_message_size]", a).val()); b.msgMeasurerSize = Number($("[name=msg_measurer_size]", a).val()); b.maxMessagesPerMinute = Number($("[name=max_messages_per_minute]", a).val()); b.maxMessagesPerHour = Number($("[name=max_messages_per_hour]", a).val()); b.maxMessagesPerDay = Number($("[name=max_messages_per_day]", a).val()); b.maxMessagesPerMonth = Number($("[name=max_messages_per_month]", a).val()); b.maxStorageQuota = Number($("[name=max_storage_quota]",
                            a).val()); b.numPanels = Number($("[name=num_panels]", a).val()); var e = {}; e.plan = b; myqtt.post({ url: d ? c : "/plan/add", data: e, success: function (a) { window.location = "/plans" }, error: function (a) { myqtt.showError({ title: d ? "Failed to update plan" : "Failed to add plan", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } })
                })
};
myqtt.showDisableTrace = function (a) {
    var b = myqtt.getUrlPathItem(2), c = myqtt.getUrlPathItem(3); result = []; result.push("<div class='ui text container'>"); result.push("<h1 class='ui header'>Byte trace disabled</h1>"); result.push("<div class='ui message'><div class='header'>Byte tracing disabled</div><p>Byte tracing has been disabled for clientId [" + c + "] inside domain [" + b + "]</p></div>"); result.push("<a href='/device/enabletrace/" + b + "/" + c + "'><button class='ui right labeled icon button primary  '><i class='right circle icon'></i> Enable byte tracing </button></a>");
    result.push("</div>"); a.html(result.join("\n")); a = {}; a.domainName = b; a.clientId = c; a.status = !1; myqtt.post({ url: "/bytestracing", data: a, success: function (a) { }, error: function (a) { myqtt.showError({ title: "Failed to disable tracing", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } })
};
myqtt.showEnableTrace = function (a) {
    var b = myqtt.getUrlPathItem(2), c = myqtt.getUrlPathItem(3); result = []; result.push("<div class='ui text container'>"); result.push("<h1 class='ui header'>Enabled byte tracing</h1>"); result.push("<div class='ui message'><div class='header'>Byte tracing enabled</div><p>Now all bytes sent and received by clientId [" + c + "] inside domain [" + b + "] will be logged at server logs. See /var/log/syslog or /var/log/myqtt.log</p></div>"); result.push("<a href='/device/disabletrace/" + b +
        "/" + c + "'><button class='ui right labeled icon button primary  '><i class='right pause icon'></i> Stop byte trace </button></a>"); result.push("</div>"); a.html(result.join("\n")); a = {}; a.domainName = b; a.clientId = c; a.status = !0; myqtt.post({ url: "/bytestracing", data: a, success: function (a) { }, error: function (a) { myqtt.showError({ title: "Failed to enable tracing", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) } })
};
myqtt.showSkipReplaceConnOn = function (a) {
    var b = myqtt.getUrlPathItem(2), c = myqtt.getUrlPathItem(3); result = []; result.push("<div class='ui text container'>"); result.push("<h1 class='ui header'>Skip connection replace: <a class='ui teal horizontal label'>enabled</a></h1>"); result.push("<div class='ui message'><div class='header'>Skip connection replace enabled</div><p>Now, all connections authenticated by  clientId [" + c + "] inside domain [" + b + "] will be accepted without closing/replacing any previous connection (as it is required by the default behaviour described by the standard). Use this option if you have use cases where same clientId+userName credentials are reused for a device launching independent interactions.</p></div>");
    result.push("<a href='/device/skipconnreplaceoff/" + b + "/" + c + "'><button class='ui right labeled icon button primary  '><i class='right dont icon'></i> Enable connection replace </button></a>"); result.push("<a href='/devices/" + b + "'><button class='ui right labeled icon button secondary '><i class='arrow left icon'></i> Finish and go back </button></a>"); result.push("</div>"); a.html(result.join("\n")); a = {}; a.domainName = b; a.clientId = c; a.status = !0; myqtt.post({
        url: "/skipconnreplace", data: a, success: function (a) { },
        error: function (a) { myqtt.showError({ title: "Failed to disable connection replace", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
    })
};
myqtt.showSkipReplaceConnOff = function (a) {
    var b = myqtt.getUrlPathItem(2), c = myqtt.getUrlPathItem(3); result = []; result.push("<div class='ui text container'>"); result.push("<h1 class='ui header'>Skip connection replace: <a class='ui horizontal label'>disabled</a></h1>"); result.push("<div class='ui message'><div class='header'>Connection replace enabled</div><p>Now, all connections authenticated by  clientId [" + c + "] inside domain [" + b + "] will close/replace any previous connection (as it is required by the default behaviour described by the standard).</p></div>");
    result.push("<a href='/device/skipconnreplaceon/" + b + "/" + c + "'><button class='ui right labeled icon button primary  '><i class='right exchange icon'></i> Enable skip connection replace </button></a>"); result.push("<a href='/devices/" + b + "'><button class='ui right labeled icon button secondary '><i class='arrow left icon'></i> Finish and go back </button></a>"); result.push("</div>"); a.html(result.join("\n")); a = {}; a.domainName = b; a.clientId = c; a.status = !1; myqtt.post({
        url: "/skipconnreplace", data: a, success: function (a) { },
        error: function (a) { myqtt.showError({ title: "Failed to disable connection replace", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
    })
};
myqtt.showFilters = function (a) { var b = myqtt.getUrlPathItem(1); b || (b = myqtt.userInfo.domainName); a.html("<div class='ui text loader centered active top150'>Loading filters for " + _domain(b) + "</div>"); myqtt.post({ url: "/filter/rules", data: { domainName: b }, success: function (c) { myqtt.showFiltersComplete(a, c, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load filter rules", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading filters</button></a>") } }) };
myqtt.getFilterType = function (a) { return 1 == a.value ? "limit-subscribe" : 2 == a.value ? "limit-publish" : 3 == a.value ? "content-control" : "" + a.value + " (unknown)" }; myqtt.getFilterPermission = function (a) { return 1 == a.value ? "<a class='ui green horizontal label small single line'>ok-allow</a>" : 2 == a.value ? "<a class='ui red horizontal label small single line'>deny-reject</a>" : 3 == a.value ? "<a class='ui horizontal label small single line'>dunno</a>" : "" + a.value + " (unknown)" };
myqtt.getFilterItems = function (a) { if (!a || 0 == a.length) return "No item, no permission"; var b = [], c; for (c in a) b.push("<a class='ui basic label single line'>" + a[c] + "</a>"); return b.join("\n") }; myqtt.getFilterItemsTextArea = function () { var a = $("textarea[name=filter-items]").val().split("\n"), b = []; for (item in a) { var c = a[item]; c && 0 < c.length && b.push(c) } return b }; myqtt.getClientIdsTextArea = function () { var a = $("textarea[name=client-ids]").val().split("\n"), b = []; for (item in a) { var c = a[item]; c && 0 < c.length && b.push(c) } return b };
myqtt.getStashToListTextArea = function () { var a = $("textarea[name=stash-to-list]").val().split("\n"), b = []; for (item in a) { var c = a[item]; c && 0 < c.length && b.push(c) } return b }; myqtt.getClientIds = function (a) { if (!a || 0 == a.length) return "Any ClientId"; var b = [], c; for (c in a) b.push("<a class='ui basic label single line'>" + a[c] + "</a>"); return b.join("\n") }; myqtt.getStashes = function (a) { if (!a || 0 == a.length) return ""; var b = [], c; for (c in a) b.push("<a class='ui basic label single line'>" + a[c] + "</a>"); return b.join("\n") };
myqtt.showFiltersComplete = function (a, b, c) {
    var d = [], e = "<h1 class='ui header'>Filters for " + _domain(c) + " </h1>"; d.push(e); if (myqtt.userInfo.isAdmin || myqtt.userInfo.hasDomainAdmin) e = "/filter/add", c && (e = e + "/" + c), d.push("<a href='" + e + "'><button class='ui right labeled icon button primary'><i class='right plus icon'></i>Add filter</button></a>"); e = myqtt.selectAnotherDomain("/domain/list", "domain", "name", "/filters/", "to manage filters", "Select another domain"); d.push(e); d.push("<table class='ui celled striped sortable table'>");
    d.push("<thead><tr><th colspan='9' class='no-sort'>MQTT filters</th></tr>"); d.push("<tr><th><i class='filter icon'></i> Label</th><th class='collapsing'>Priority</th><th class='collapsing'>Type</th><th>Filter items</th><th>Client ids</th><th>Stashing to</th><th class='collapsing'>Permission</th><th class='collapsing'>Active</th><th class='collapsing no-sort'>Actions</th></tr></thead>"); d.push("<tbody>"); for (var f in b) {
        var e = b[f], g = e.isActive, g = g ? "<a class='ui green horizontal label small'>active</a>" :
            "<a class='ui horizontal label small'>disabled</a>", h = "<button class='ui icon mini button' name='remove_filter_lkjsdf' iter='" + f + "' label='" + e.label + "' data-tooltip='Remove filter from domain'><i class='remove icon'></i></button>", e = "<tr><td class='clickable' iter='" + f + "'><a class='ui label single line'>" + e.label + "</a></td><td>" + e.prio + "</td><td class='single line'>" + myqtt.getFilterType(e.ruleType) + "</td><td>" + myqtt.getFilterItems(e.filterItems) + "</td><td>" + myqtt.getClientIds(e.clientIds) + "</td><td>" +
                myqtt.getStashes(e.stashTo) + "</td><td>" + myqtt.getFilterPermission(e.permission) + "</td><td>" + g + "</td><td>" + h + "</td>"; d.push(e)
    } d.push("</tbody></table>"); a.html(d.join("\n")); $("table").tablesort(); $("[name=remove_filter_lkjsdf]", a).click(function (a) { a = a.target; "I" == a.nodeName && (a = a.parentNode); a = Number($(a).attr("iter")); myqtt.removeFilter(b[a], c) }); $("table", a).click(function (a) {
        for (a = a.target; a && !$(a).hasClass("clickable");)a = a.parentNode; a && $(a).hasClass("clickable") && (a = Number($(a).attr("iter")),
            location = "/filter/add/" + c + myqtt.formatParameters(b[a]))
    })
};
myqtt.removeFilter = function (a, b) {
    myqtt.confirmAction({
        icon: "filter", design: "basic", title: "Remove filter <strong>" + a.label + "</strong> from domain <strong>" + b + "</strong>?", content: "If you continue, you will remove permanently filter (" + a.label + ") for domain (" + b + "). After filter removal, it cannot be recovered in any way. Do you want to continue?", onDeny: function () { }, onApprove: function () {
            myqtt.post({
                url: "/filter/remove", data: { domainName: b, label: a.label }, success: function (a) { window.location = window.location.href },
                error: function (a) { myqtt.showError({ title: "Failed to remove filter", content: "Received error response: " + a.statusText + ".<br>" + a.responseText }) }
            })
        }
    })
};
myqtt.showAddFilterForm = function (a) { var b = myqtt.getUrlPathItem(2); b || (b = myqtt.userInfo.domainName); myqtt.post({ url: "/stashes", data: { domainName: b }, success: function (c) { myqtt.showAddFilterFormAux(a, c, b) }, error: function (b) { myqtt.showErrorInPanel("Failed to load stashes", "Received error response: " + b.statusText + ".<br>" + b.responseText, a); a.append("<a href='" + window.location.href + "'><button class='ui primary button'>Retry loading stashes</button></a>") } }) };
myqtt.showAddFilterFormAux = function (a, b, c) {
    var d = myqtt.extractParams(), e = null != d && "undefined" != typeof d, f = []; f.push("<div class='ui doubling container'>"); f.push("<div class='ui stackable grid'>"); f.push("<div class='sixteen wide column'>"); var g = "<h1 class='ui header'>Add filter</h1>"; e && (g = "<h1 class='ui header'>Update filter</h1>"); f.push(g); f.push('<form class="ui form" >'); f.push('<div class="two fields">'); g = ""; d && d.label && (g = "value='" + d.label + "'"); f.push('<div class="field"><label>Label</label><input type="text" name="label" placeholder="Rule label (must be unique)" ' +
        g + " ></div>"); g = ""; d && d.prio && (g = "value='" + String(d.prio) + "'"); f.push('<div class="field"><label>Priority</label><input type="text" name="prio" placeholder="Rule Priority (low apply first)" ' + g + " ></div>"); f.push("</div>"); f.push('<div class="two fields">'); f.push('<div class="field" name="dropdown-rule-type-select"><label>Select rule type</label><select class="ui search dropdown" name="rule-type"><option selected="selected" value="1">limit SUBSCRIBE</option><option value="2">limit PUBLISH</option><option value="3">Content-Control</option></select></div>');
    f.push('<div class="field" name="dropdown-rule-type-select"><label>Permission/action</label><select class="ui search dropdown" name="permission"><option selected="selected" value="1">Allow/Ok</option><option value="2">Reject/Deny</option><option value="3">Dunno/Continue</option></select></div>'); f.push("</div>"); var h = g = ""; if (null == d || d && d.isActive) g = "checked", h = "checked=''"; f.push('<div class="field"><div class="ui toggle ' + g + ' checkbox"><label>Active</label><input type="checkbox" name="is_active" ' +
        h + " ></div></div>"); f.push('<div class="ui top attached tabular menu"><a class="item active" data-tab="filter-items">Topic filters</a><a class="item" data-tab="client-ids">ClientIds</a><a class="item" data-tab="stash-to-list">Stash to</a></div>'); g = ""; d && 0 < d.filterItems.length && (g = d.filterItems.join("\n")); f.push('<div class="ui bottom attached tab segment active" data-tab="filter-items"><div class="ui message">  <div class="header">Topic filters to match this rule</div><p>Configure here topic filters to match this rule. If rule matches, action configured is applied. One filter per line. <a href="https://support.asplhosting.com/t/managing-mqtt-filters-with-myqtthub-to-control-what-can-be-published/51#heading--format-supported">See reference help for format available.</a></p></div> <div class="ui form"> <div class="field">  <label>Topic filters</label>   <textarea name="filter-items">' +
            g + "</textarea>  </div> </div></div>"); g = ""; d && 0 < d.clientIds.length && (g = d.clientIds.join("\n")); f.push('<div class="ui bottom attached tab segment" data-tab="client-ids"><div class="ui message">  <div class="header">Optional clientIds to scope this rule</div><p>The rule applies to any clientId if nothing is configured here. If you want to control what client ids applies to this rule, input them here. One client id per line</p></div><div class="ui form"> <div class="field">  <label>Client Ids</label>   <textarea name="client-ids">' +
                g + "</textarea>  </div> </div></div>"); g = ""; d && (d.stashTo && 0 < d.stashTo.length) && (g = d.stashTo.join("\n")); h = '<div class="field" name="dropdown-stashes-available"><label>Stashes available</label><select class="ui search dropdown" name="stashes-available-kjl32f"> '; if (0 == b.length) h += '<option selected="selected" value="">No stash available</option>'; else for (var l in b) var m = b[l], h = h + ('<option value="' + m.name + '">' + m.name + "</option>"); f.push('<div class="ui bottom attached tab segment" data-tab="stash-to-list"><div class="ui message">  <div class="header">  Optional list to stash this message if maches  </div>  <p>Input here list of stash names messages be stashed in the case rule matches. Note Stashing only applies to Content-Control and Limit-Publish rules (PUBLISH ops)</p></div>' +
                    (h + "</select></div>") + ' <button class="ui right labeled icon button " name="add_stash_87dfkljsdFsdf"><i class="right warehouse icon"></i>Add stash</button> <button class="ui right labeled icon button " name="manage_stashes_kldkjf"><i class="right warehouse icon"></i>Manage stashes</button><div class="ui horizontal divider"></div><div class="ui form"> <div class="field">  <label>Stashs</label>   <textarea name="stash-to-list">' + g + "</textarea>  </div> </div></div>"); f.push('<button class="ui right labeled icon button primary" name="addrule_908sgjfk"><i class="right ' +
                        (e ? "edit" : "plus") + ' icon"></i>' + (e ? "Update" : "Add") + " filter rule</button>"); f.push("</form>"); f.push("</div>"); f.push("</div>"); f.push("</div>"); f.push("</div>"); a.html(f.join("\n")); myqtt.combobox(a); $(".ui.checkbox", a).checkbox(); $(".menu .item", a).tab(); d && d.ruleType && $("select[name=rule-type]").val(String(d.ruleType.value)).change(); d && d.permission && $("select[name=permission]").val(String(d.permission.value)).change(); $("[name=addrule_908sgjfk]").click(function (b) {
                            b.preventDefault(); var f = {};
                            f.domainName = c; f.label = $("[name=label]", a).val(); f.prio = Number($("[name=prio]", a).val()); f.isActive = $("input[name=is_active]", a).is(":checked"); f.ruleType = Number($("[name=rule-type]", a).val()); f.permission = Number($("[name=permission]", a).val()); f.filterItems = myqtt.getFilterItemsTextArea(); f.clientIds = myqtt.getClientIdsTextArea(); f.stashToList = myqtt.getStashToListTextArea(); f.stashToList && 0 < f.stashToList.length && 1 == f.ruleType ? myqtt.showError({
                                title: "Limit SUBSCRIBE filter is not allowed with stashing",
                                content: "You have selected filter Limit Subscribe type with stashing selected. This is not allowed to avoid confusion. If you want to stash, select another filter type. If you do not want to stash, remove stash selection"
                            }) : myqtt.post({
                                url: "/filter/add", data: f, success: function (a) { d && d.label && f.label != d.label ? myqtt.post({ url: "/filter/remove", data: { domainName: c, label: d.label }, success: function (a) { window.location = "/filters/" + c } }) : window.location = "/filters/" + c }, error: function (a) {
                                    myqtt.showError({
                                        title: e ?
                                            "Failed to update filter" : "Failed to add filter", content: "Received error response: " + a.statusText + ".<br>" + a.responseText
                                    })
                                }
                            })
                        }); $("[name=manage_stashes_kldkjf]").click(function (a) { a.preventDefault(); window.location = "/stashes/" + c }); $("[name=add_stash_87dfkljsdFsdf]").click(function (b) { b.preventDefault(); b = $("[name=stashes-available-kjl32f]", a).val(); var c = myqtt.getStashToListTextArea(); 0 <= c.indexOf(b) || (c.push(b), $("textarea[name=stash-to-list]").text(c.join("\n"))) })
};
myqtt.setToogleValue = function (a, b, c) { c = myqtt.parseBoolean(c); $(a, b).is(":checked") != c && $(a, b).trigger("click") }; myqtt.togglePusher = function () { $(".sidebar").sidebar("toggle"); myqtt.resizePusher() }; myqtt.resizePusher = function () { }; myqtt.onResize = function () { myqtt.resizePusher() }; myqtt.configureToolbar = function () { var a = $("[name=loggedas]"), b = myqtt.cookieGet("clientId"), c = myqtt.cookieGet("userName"); c && b ? a.text(b + " (username: " + c + ")") : b && a.text(b + " (username: no username)") };
myqtt.logout = function (a) { myqtt.post({ url: "/logout", success: function (a) { myqtt.completeLogout() }, error: function (a) { myqtt.showError({ title: "Failed to logout", content: "Received error response: " + a.statusText + ".<br>" + a.responseText, onClose: function () { myqtt.completeLogout() } }) } }) }; myqtt.completeLogout = function () { myqtt.cookieDelete("tokenId"); myqtt.cookieDelete("clientId"); myqtt.cookieDelete("userName"); myqtt.cookieDelete("cleanSession"); window.location = "/login" };
myqtt.runTests = function () { jQuery.ajax({ url: "/assets/javascripts/tests.js", dataType: "script", async: !0, success: function () { myqtt.runTests.run() } }) };
